'use client';

import React, { useState, useEffect } from 'react';

// Interfaces for Action Usage Analysis data
interface ActionAnalysis {
  _id: string;
  llm: string;
  displayName: string;
  timestamp: string;
  actions: {
    total: number;
    byType: { [actionType: string]: number };
    byTest: Array<{
      filePath: string;
      orderInFile: number;
      actionableCommands: number;
      commands: string[];
    }>;
    patterns: {
      mostUsedActions: Array<[string, number]>;
      leastUsedActions: Array<[string, number]>;
      actionDistribution: { [actionType: string]: { count: number; percentage: number } };
      testComplexity: {
        simple: number;    // 1-5 actions
        medium: number;    // 6-15 actions  
        complex: number;   // 16+ actions
      };
    };
  };
  efficiency: {
    totalTests: number;
    totalCommands: number;
    commandsPerTest: number;
    avgExecutionTime: number;
  };
  execution: {
    totalTests: number;
    passed: number;
    failed: number;
    passRate: number;
    avgDuration: number;
  };
}

interface ActionComparison {
  _id: string;
  target: string;
  targetDisplayName: string;
  baseline: string;
  baselineDisplayName: string;
  timestamp: string;
  metrics: {
    actionEfficiency: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
    executionEfficiency: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
    avgExecutionTime: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
  };
  actionTypeComparison: {
    [actionType: string]: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
  };
  summary: {
    isMoreEfficient: boolean;
    hasHigherPassRate: boolean;
    isFaster: boolean;
  };
}

interface ActionSummary {
  _id: string;
  timestamp: string;
  totalLLMs: number;
  baseline: string;
  summary: {
    mostEfficientLLM: {
      llm: string;
      displayName: string;
      commandsPerTest: number;
    };
    leastEfficientLLM: {
      llm: string;
      displayName: string;
      commandsPerTest: number;
    };
    highestPassRateLLM: {
      llm: string;
      displayName: string;
      passRate: number;
    };
    fastestLLM: {
      llm: string;
      displayName: string;
      avgDuration: number;
    };
    actionTypeDistribution: { [actionType: string]: number };
    overallMetrics: {
      avgCommandsPerTest: number;
      avgPassRate: number;
      avgExecutionTime: number;
    };
  };
  llmAnalyses: Array<{
    llm: string;
    displayName: string;
    commandsPerTest: number;
    passRate: number;
    avgDuration: number;
    totalActions: number;
  }>;
  comparisons: Array<{
    llm: string;
    displayName: string;
    isMoreEfficient: boolean;
    hasHigherPassRate: boolean;
    isFaster: boolean;
    efficiencyChange: number;
    passRateChange: number;
    timeChange: number;
  }>;
}
  timestamp: string;
  metrics: {
    actionEfficiency: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
    executionEfficiency: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
    avgExecutionTime: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
  };
  actionTypeComparison: {
    [actionType: string]: {
      target: number;
      baseline: number;
      difference: number;
      percentageChange: number;
    };
  };
  summary: {
    isMoreEfficient: boolean;
    hasHigherPassRate: boolean;
    isFaster: boolean;
  };
}

interface ActionSummary {
  _id: string;
  timestamp: string;
  totalLLMs: number;
  baseline: string;
  summary: {
    mostEfficientLLM: {
      llm: string;
      displayName: string;
      commandsPerTest: number;
    };
    leastEfficientLLM: {
      llm: string;
      displayName: string;
      commandsPerTest: number;
    };
    highestPassRateLLM: {
      llm: string;
      displayName: string;
      passRate: number;
    };
    fastestLLM: {
      llm: string;
      displayName: string;
      avgDuration: number;
    };
    actionTypeDistribution: { [actionType: string]: number };
    overallMetrics: {
      avgCommandsPerTest: number;
      avgPassRate: number;
      avgExecutionTime: number;
    };
  };
  llmAnalyses: Array<{
    llm: string;
    displayName: string;
    commandsPerTest: number;
    passRate: number;
    avgDuration: number;
    totalActions: number;
  }>;
  comparisons: Array<{
    llm: string;
    displayName: string;
    isMoreEfficient: boolean;
    hasHigherPassRate: boolean;
    isFaster: boolean;
    efficiencyChange: number;
    passRateChange: number;
    timeChange: number;
  }>;
}

const ActionUsageComparisonView: React.FC = () => {
  const [actionSummary, setActionSummary] = useState<ActionSummary | null>(null);
  const [actionAnalyses, setActionAnalyses] = useState<ActionAnalysis[]>([]);
  const [actionComparisons, setActionComparisons] = useState<ActionComparison[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedLLM, setSelectedLLM] = useState<string>('');
  const [selectedView, setSelectedView] = useState<'summary' | 'detailed' | 'comparison'>('summary');
  const [availableLLMs, setAvailableLLMs] = useState<Array<{key: string, displayName: string}>>([]);
  useEffect(() => {
    fetchActionUsageData();
  }, []);

  const fetchActionUsageData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Fetch action usage summary
      const summaryResponse = await fetch('/api/mongo/action-usage-analysis?type=summary&latest=true');
      if (!summaryResponse.ok) {
        throw new Error('Failed to fetch action usage summary');
      }
      const summaryData = await summaryResponse.json();
      setActionSummary(summaryData);

      // Fetch all action analyses
      const analysesResponse = await fetch('/api/mongo/action-usage-analysis?type=analysis&latest=true');
      if (!analysesResponse.ok) {
        throw new Error('Failed to fetch action analyses');
      }
      const analysesData = await analysesResponse.json();
      setActionAnalyses(Array.isArray(analysesData) ? analysesData : []);

      // Fetch all comparisons
      const comparisonsResponse = await fetch('/api/mongo/action-usage-analysis?type=comparison&latest=true');
      if (!comparisonsResponse.ok) {
        throw new Error('Failed to fetch action comparisons');
      }
      const comparisonsData = await comparisonsResponse.json();
      setActionComparisons(Array.isArray(comparisonsData) ? comparisonsData : []);

      // Fetch available LLMs
      const llmListResponse = await fetch('/api/mongo/action-usage-analysis?type=llm-list');
      if (!llmListResponse.ok) {
        throw new Error('Failed to fetch LLM list');
      }
      const llmListData = await llmListResponse.json();
      setAvailableLLMs(Array.isArray(llmListData) ? llmListData : []);

      console.log('✅ Action Usage Analysis data loaded successfully');
      console.log('Summary:', summaryData);
      console.log('Analyses:', analysesData?.length || 0, 'items');
      console.log('Comparisons:', comparisonsData?.length || 0, 'items');
      console.log('Available LLMs:', llmListData?.length || 0, 'items');

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      setError(errorMessage);
      console.error('❌ Error fetching action usage data:', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const triggerAnalysis = async () => {
    try {
      const response = await fetch('/api/mongo/action-usage-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'trigger-analysis' }),
      });

      if (!response.ok) {
        throw new Error('Failed to trigger analysis');
      }

      const result = await response.json();
      alert(result.message + '\n\nCommand: ' + result.command);
      
      // Reload data after triggering analysis
      setTimeout(() => {
        fetchActionUsageData();
      }, 2000);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      alert('Error triggering analysis: ' + errorMessage);
    }
  };
      // Find the original baseline LLM - prioritize the original Cypress test data
      const originalLLM = efficiencyData.llmMetrics.find(llm => {
        const llmName = llm.llm.toLowerCase();
        return (
          llmName === 'original_ast' ||           // Exact match for the original AST processed data
          llmName === 'original' ||               // Direct original match
          llmName === 'baseline' ||               // Direct baseline match
          llmName.includes('original_ast') ||     // Contains original_ast
          llmName.includes('original') ||         // Contains original
          llmName.includes('baseline') ||         // Contains baseline
          (llm.testFiles && Object.keys(llm.testFiles).some(fileName => 
            fileName.toLowerCase().includes('original')
          ))
        );
      });
      
      // If no original LLM is found, this indicates a data problem - log a warning
      // and fall back to the most efficient LLM
      const fallbackLLM = efficiencyData.llmMetrics.reduce((min, current) => 
        current.summary.averageCommandsPerTest < min.summary.averageCommandsPerTest ? current : min
      );

      const effectiveBaselineLLM = originalLLM || fallbackLLM;
      setBaselineLLM(effectiveBaselineLLM);
      setIsOriginalBaseline(!!originalLLM);
      
      // Log which LLM is being used as the baseline for debugging
      if (originalLLM) {
        console.log(`✅ Using "${effectiveBaselineLLM?.llm}" as the efficiency baseline (original Cypress test data)`);
      } else {
        console.warn(`⚠️ Original baseline data not found! Falling back to most efficient LLM: "${effectiveBaselineLLM?.llm}"`);
        console.log('Available LLMs:', efficiencyData.llmMetrics.map(llm => llm.llm));
      }
    }
  }, [efficiencyData, baselineLLM]);
  
  // Debug: Log LLM names and pass rate data - only when data changes
  useEffect(() => {
    if (efficiencyData?.llmMetrics) {
      console.log('LLM names in efficiency data:', efficiencyData.llmMetrics.map(llm => llm.llm));
    }
    if (passRateData && Object.keys(passRateData).length > 0) {
      console.log('Pass rate data keys:', Object.keys(passRateData));
      console.log('Pass rate data:', passRateData);
    }
  }, [efficiencyData, passRateData]);

  useEffect(() => {
    if (showDetailedTests && selectedLLM) {
      fetchDetailedTests();
    }
  }, [showDetailedTests, selectedLLM]);

  const fetchPassRateData = async () => {
    try {
      // Fetch efficiency data including pass rates from MongoDB summary collection
      const response = await fetch('/api/efficiency?details=true');
      if (!response.ok) {
        throw new Error('Failed to fetch test data for pass rate calculation');
      }
      const data = await response.json();
      
      // Use pass rates calculated by the API from MongoDB summary collection
      if (data.passRates) {
        setPassRateData(data.passRates);
        console.log('Pass rate data loaded from MongoDB summary collection:', data.passRates);
      } else {
        // Fallback: calculate pass rates from detailed test data if not provided by API
        const passRates: {[llm: string]: number} = {};
        
        if (data.detailedTests && Array.isArray(data.detailedTests)) {
          const llmGroups: {[llm: string]: any[]} = {};
          
          // Group tests by LLM
          data.detailedTests.forEach((test: any) => {
            if (!llmGroups[test.llm]) {
              llmGroups[test.llm] = [];
            }
            llmGroups[test.llm].push(test);
          });
          
          // Calculate pass rate for each LLM
          Object.keys(llmGroups).forEach(llm => {
            const tests = llmGroups[llm];
            const passedTests = tests.filter(test => test.status === 'passed').length;
            const passRate = tests.length > 0 ? (passedTests / tests.length) * 100 : 0;
            passRates[llm] = Math.round(passRate * 100) / 100; // Round to 2 decimal places
          });
        }
        
        // Set pass rate for original baseline data (100% - 58 passed, 0 failed)
        passRates['Original/Baseline'] = 100.0;
        passRates['original_ast'] = 100.0;
        passRates['original'] = 100.0;
        passRates['baseline'] = 100.0;
        
        setPassRateData(passRates);
        console.log('Pass rate data calculated as fallback:', passRates);
      }
      
      return data;
    } catch (err) {
      console.error('Error fetching pass rate data:', err);
      // Set empty pass rate data on error
      setPassRateData({});
      throw err;
    }
  };

  const fetchEfficiencyData = async () => {
    try {
      // Fetch both efficiency and pass rate data
      const data = await fetchPassRateData();
      setEfficiencyData(data);
      
      // Set all detailed tests for additional analysis
      if (data.detailedTests) {
        setDetailedTests(data.detailedTests);
      }
      
      if (data.llmMetrics?.length > 0) {
        setSelectedLLM(data.llmMetrics[0].llm);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };
  const fetchDetailedTests = async () => {
    if (!selectedLLM) return;
    
    setLoadingDetails(true);
    try {
      console.log(`Fetching detailed tests for LLM: "${selectedLLM}"`);
      
      const response = await fetch(`/api/efficiency?details=true&llm=${encodeURIComponent(selectedLLM)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch detailed test data');
      }
      const data = await response.json();
      
      console.log('API response for detailed tests:', data);
      console.log('Detailed tests count:', data.detailedTests?.length || 0);
      
      // Filter detailed tests for the selected LLM (in case API returns all)
      const filteredTests = data.detailedTests?.filter((test: any) => test.llm === selectedLLM) || [];
      console.log(`Filtered tests for "${selectedLLM}":`, filteredTests.length);
      
      setDetailedTests(filteredTests);
    } catch (err) {
      console.error('Error fetching detailed tests:', err);
      setDetailedTests([]);
    } finally {
      setLoadingDetails(false);
    }
  };

  // New function to fetch original baseline data
  const fetchOriginalData = async () => {
    try {
      const response = await fetch('/api/original-efficiency');
      if (!response.ok) {
        throw new Error('Failed to fetch original baseline data');
      }
      const data: OriginalEfficiencyData = await response.json();
      
      setOriginalData(data);
      
      // Automatically set the baseline LLM based on the original data
      if (data.testFiles && Object.keys(data.testFiles).length > 0) {
        const llmName = 'Original/Baseline';
        const fileMetrics = data.testFiles[Object.keys(data.testFiles)[0]];
        
        setBaselineLLM({
          llm: llmName,
          testFiles: {
            [llmName]: fileMetrics
          },
          summary: {
            totalActionableCommands: fileMetrics.tests ? Object.values(fileMetrics.tests).reduce((sum, test) => sum + test.actionableCommands, 0) : 0,
            totalTests: fileMetrics.totalTests,
            averageCommandsPerTest: fileMetrics.tests ? 
              (Object.values(fileMetrics.tests).reduce((sum, test) => sum + test.actionableCommands, 0) / fileMetrics.totalTests) || 0
              : 0,
            totalFiles: 1,
            commandBreakdown: [],
            mostUsedCommands: []
          }
        } as LLMEfficiencyData);
      }
    } catch (err) {
      console.error('Error fetching original baseline data:', err);
    }
  };

  // Function to load original Cypress test data for baseline comparison
  const loadOriginalData = async () => {
    try {
      // Load original test execution results
      const executionResponse = await fetch('/data/cypress-realworld-app/resultsOriginal.json');
      if (executionResponse.ok) {
        const executionData = await executionResponse.json();
        if (executionData?.results?.tests) {
          setOriginalTestData(executionData.results.tests);
          console.log('✅ Loaded original test execution data:', executionData.results.tests.length, 'tests');
        }
      }

      // Load original test efficiency metrics
      const efficiencyResponse = await fetch('/data/cypress-realworld-app/test-efficiency-metrics_original_ast.json');
      if (efficiencyResponse.ok) {
        const efficiencyData = await efficiencyResponse.json();
        if (efficiencyData?.testFiles) {
          setOriginalEfficiencyData(efficiencyData);
          console.log('✅ Loaded original test efficiency data:', Object.keys(efficiencyData.testFiles).length, 'files');
        }
      }
    } catch (error) {
      console.error('Error loading original baseline data:', error);
    }
  };

  // Function to find matching original test data for a given LLM test
  const findOriginalTestData = (test: DetailedTest) => {
    // Extract filename from path (e.g., "auth-reconstructed.spec.ts" from full path)
    const fileName = test.fileName.replace(/^.*[\\/]/, '').replace('.spec.ts', '');
    
    // Find execution data by test name match
    const originalExecution = originalTestData.find(orig => 
      orig.name.toLowerCase().includes(test.testName.toLowerCase()) ||
      test.testName.toLowerCase().includes(orig.name.toLowerCase())
    );

    // Find efficiency data by filename and test name
    let originalEfficiency = null;
    if (originalEfficiencyData?.testFiles) {
      const fileData = originalEfficiencyData.testFiles[test.fileName] || 
                      originalEfficiencyData.testFiles[fileName + '.spec.ts'];
      
      if (fileData?.tests) {
        // Try exact test name match first
        originalEfficiency = fileData.tests[test.testName];
        
        // If no exact match, try partial match
        if (!originalEfficiency) {
          const testNames = Object.keys(fileData.tests);
          const matchingTestName = testNames.find(name => 
            name.toLowerCase().includes(test.testName.toLowerCase()) ||
            test.testName.toLowerCase().includes(name.toLowerCase())
          );
          if (matchingTestName) {
            originalEfficiency = fileData.tests[matchingTestName];
          }
        }
      }
    }    return {
      execution: originalExecution,
      efficiency: originalEfficiency
    };
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-2">Loading action usage data...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-600">Error: {error}</p>
      </div>
    );
  }

  if (!efficiencyData?.llmMetrics?.length) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-600">No action usage data available</p>
      </div>
    );  }

  const selectedLLMData = efficiencyData.llmMetrics.find(llm => llm.llm === selectedLLM);
  const globalCommandBreakdown = efficiencyData.globalSummary?.globalCommandBreakdown || [];

  const getEfficiencyPercentage = (llm: LLMEfficiencyData) => {
    // Handle edge case where baseline has no commands or is null
    if (!baselineLLM || baselineLLM.summary.averageCommandsPerTest === 0) return 100;
    
    // If this is the baseline LLM itself (original Cypress tests), it's 100% efficient by definition
    if (llm.llm === baselineLLM.llm) return 100;
    
    // Calculate efficiency relative to the baseline (original Cypress tests)
    // Efficiency = (Baseline Commands / LLM Commands) * 100
    // Lower command count = higher efficiency
    const efficiency = (baselineLLM.summary.averageCommandsPerTest / llm.summary.averageCommandsPerTest) * 100;
    
    // Cap efficiency at a reasonable maximum (e.g., 500%) to handle edge cases
    return Math.min(efficiency, 500);
  };// Function to normalize LLM names for pass rate lookup
  const normalizeLLMName = (llmName: string): string => {
    // Map efficiency data LLM names to pass rate data keys
    const nameMapping: {[key: string]: string} = {
      // Claude models
      'claude_3_5_sonnet': 'Claude 3.5 Sonnet',
      'claude_3_7_sonnet': 'Claude 3.7 Sonnet', 
      'claude_3_7_thinking': 'Claude 3.7 Sonnet Thinking',
      'claude_sonnet_4': 'Claude Sonnet 4',
      'claude_3_opus': 'Claude 3 Opus',
      'claude_3_haiku': 'Claude 3 Haiku',
      'claude_3_sonnet': 'Claude 3 Sonnet',
      'claude_haiku': 'Claude Haiku',
      'claude_opus': 'Claude Opus',
      'claude_sonnet': 'Claude Sonnet',
      
      // GPT models
      'gpt_4o': 'GPT-4o',
      'gpt_4_turbo': 'GPT-4 Turbo',
      'gpt_4': 'GPT-4',
      'gpt_3_5_turbo': 'GPT-3.5 Turbo',
      'gpt4o': 'GPT-4o',
      'gpt4_turbo': 'GPT-4 Turbo',
      'gpt4': 'GPT-4',
      'gpt35_turbo': 'GPT-3.5 Turbo',
      'openai_gpt_4o': 'GPT-4o',
      'openai_gpt_4_turbo': 'GPT-4 Turbo',
      'chatgpt_4o': 'GPT-4o',
        // Gemini models - Updated to match MongoDB data exactly
      'gemini_2_5_pro_preview': 'Gemini 2.5 Pro',  // Fixed: maps to exact MongoDB key
      'gemini_2_0_flash_exp': 'Gemini 2.0 Flash Exp',
      'gemini_1_5_pro': 'Gemini 1.5 Pro',
      'gemini_1_5_flash': 'Gemini 1.5 Flash',
      'gemini_pro': 'Gemini Pro',
      'gemini_flash': 'Gemini Flash',
      'google_gemini_2_5_pro': 'Gemini 2.5 Pro',  // Fixed: maps to exact MongoDB key
      'google_gemini_1_5_pro': 'Gemini 1.5 Pro',
      
      // O1 and Mini models - Updated to match MongoDB data exactly
      'o1_preview': 'O1 Preview',
      'o1_mini': 'O1 Mini',
      'o4_mini-preview': 'GPT-4o Mini',  // Fixed: maps to exact MongoDB key
      'gpt_4o_mini': 'GPT-4o Mini',  // Added: additional mapping for GPT-4o Mini
      'openai_o1_preview': 'O1 Preview',
      'openai_o1_mini': 'O1 Mini',
      
      // DeepSeek models
      'deepseek_v3': 'DeepSeek V3',
      'deepseek_v2_5': 'DeepSeek V2.5',
      'deepseek_coder': 'DeepSeek Coder',
      'deepseek': 'DeepSeek',
      
      // Other models
      'llama_3_1_405b': 'Llama 3.1 405B',
      'llama_3_1_70b': 'Llama 3.1 70B',
      'llama_3_1_8b': 'Llama 3.1 8B',
      'llama_3_2': 'Llama 3.2',
      'mixtral_8x7b': 'Mixtral 8x7B',
      'qwen_2_5_coder': 'Qwen 2.5 Coder',
      'codestral': 'Codestral',
      'cohere_command_r_plus': 'Cohere Command R+',
      
      // Original/Baseline variations
      'original_ast': 'Original/Baseline',
      'original': 'Original/Baseline',
      'baseline': 'Original/Baseline',
      'cypress_original': 'Original/Baseline',
      'human_baseline': 'Original/Baseline'
    };
    
    // First try exact mapping
    if (nameMapping[llmName]) {
      return nameMapping[llmName];
    }
    
    // If no exact mapping, try to find a match in the pass rate data keys
    const passRateKeys = Object.keys(passRateData);
    
    // Try case-insensitive partial matching
    const llmLower = llmName.toLowerCase();
    for (const key of passRateKeys) {
      const keyLower = key.toLowerCase();
      if (keyLower.includes(llmLower.replace(/_/g, ' ')) || 
          llmLower.includes(keyLower.replace(/\s/g, '_'))) {
        return key;
      }
    }
    
    return llmName; // Return original if no mapping found
  };

  const getPassRate = (llmName: string): number => {
    // Normalize the LLM name to match pass rate data keys
    const normalizedName = normalizeLLMName(llmName);
    const passRate = passRateData[normalizedName];
    
    console.log(`Getting pass rate for "${llmName}" -> normalized to "${normalizedName}":`, passRate);
    
    if (passRate !== undefined) {
      return passRate;
    }
    
    // Fallback: try to find pass rate for original/baseline variations
    const llmLower = llmName.toLowerCase();
    if (llmLower.includes('original') || llmLower.includes('baseline')) {
      return passRateData['Original/Baseline'] || 100.0;
    }
    
    // If no pass rate data available, return 0 (lowest priority in sorting)
    console.warn(`No pass rate data found for LLM: ${llmName} (normalized: ${normalizedName})`);
    return 0;
  };
  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Execution Efficiency - Action Usage Analysis</h2>
        <p className="text-sm text-gray-600 mb-1">          Analysis of command usage efficiency across different LLMs compared to the original implementation.
          Efficiency is calculated relative to the
          {isOriginalBaseline ? ' original baseline results ' : ' most efficient LLM '} 
          (treated as 100% efficient).
        </p>
        <p className="text-sm text-gray-600 mb-6">
          <span className="font-medium">Higher percentages indicate better efficiency</span> -
          meaning fewer commands used to achieve the same test functionality as the original implementation.
          The execution time and action counts from the original tests serve as the reference baseline.
        </p>
        
        {/* LLM Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Select LLM for detailed analysis:
          </label>
          <select
            value={selectedLLM}
            onChange={(e) => {
              setSelectedLLM(e.target.value);
              setSelectedFile('');
            }}            className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-gray-900 bg-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            {efficiencyData.llmMetrics.map(llm => (
              <option key={llm.llm} value={llm.llm} className="text-gray-900">
                {llm.llm.replace(/_/g, ' ')}
              </option>            ))}
          </select>
        </div>
        {/* Efficiency Comparison Table */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">
            LLM Efficiency Comparison            <span className="px-2 py-0.5 ml-2 bg-green-100 text-green-800 rounded text-sm">
              {isOriginalBaseline ? 'Original = 100%' : 'Most Efficient = 100%'}
            </span>
          </h3>          {baselineLLM && (
            <p className="text-sm text-gray-600 mb-4">
              Baseline: <span className="font-medium">{baselineLLM.llm.replace(/_/g, ' ')}</span> with 
              {baselineLLM.summary.totalActionableCommands} total commands across 
              {baselineLLM.summary.totalTests} tests 
              (avg: {baselineLLM.summary.averageCommandsPerTest.toFixed(2)})
            </p>
          )}<div className="overflow-x-auto">
            <table className="min-w-full bg-white border border-gray-200 rounded-lg">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">LLM</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Tests</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pass Rate</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Efficiency %</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {efficiencyData.llmMetrics
                  .sort((a, b) => {
                    // Calculate pass rates for both LLMs
                    const passRateA = getPassRate(a.llm);
                    const passRateB = getPassRate(b.llm);
                    
                    // Primary sort: Pass rate (higher is better)
                    if (passRateA !== passRateB) {
                      return passRateB - passRateA;
                    }
                    
                    // Secondary sort: Efficiency percentage (higher is better)
                    return getEfficiencyPercentage(b) - getEfficiencyPercentage(a);
                  })
                  .map((llm) => {
                    const efficiency = getEfficiencyPercentage(llm);                    return (                      <tr key={llm.llm} className={`${selectedLLM === llm.llm ? 'bg-blue-50' : ''} ${baselineLLM && llm.llm === baselineLLM.llm ? 'border-l-4 border-r-4 border-green-400' : ''}`}>
                        <td className="px-4 py-3 text-sm font-medium text-gray-900">
                          {llm.llm.replace(/_/g, ' ')}
                          {baselineLLM && llm.llm === baselineLLM.llm && (
                            <span className="ml-1 text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded">
                              BASELINE
                            </span>
                          )}
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-600">
                          {llm.summary.totalTests}
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-600">
                          <div className="flex items-center">
                            {(() => {
                              const passRate = getPassRate(llm.llm);
                              return (
                                <>
                                  <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                                    <div 
                                      className={`h-2 rounded-full ${
                                        passRate >= 90 ? 'bg-green-500' : 
                                        passRate >= 70 ? 'bg-yellow-500' : 
                                        passRate >= 50 ? 'bg-orange-500' : 'bg-red-500'
                                      }`}
                                      style={{ width: `${Math.min(passRate, 100)}%` }}
                                    ></div>
                                  </div>
                                  <span className="font-semibold text-sm">
                                    {passRate > 0 ? `${passRate.toFixed(1)}%` : 'N/A'}
                                  </span>
                                </>
                              );
                            })()}
                          </div>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-600">
                          <div className="flex items-center">
                            <div className="w-20 bg-gray-200 rounded-full h-2 mr-2">
                              <div 
                                className={`h-2 rounded-full ${
                                  efficiency >= 95 ? 'bg-green-500' : 
                                  efficiency >= 80 ? 'bg-yellow-500' : 
                                  efficiency >= 60 ? 'bg-orange-500' : 'bg-red-500'
                                }`}
                                style={{ width: `${Math.min(efficiency, 100)}%` }}
                              ></div>
                            </div>
                            <span className="font-semibold">{efficiency.toFixed(1)}%</span>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-sm">
                          <span className={`inline-block px-2 py-1 rounded text-xs font-semibold ${
                            efficiency >= 95 ? 'bg-green-100 text-green-800' :
                            efficiency >= 80 ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }`}>
                            {efficiency >= 95 ? 'Excellent' :
                             efficiency >= 80 ? 'Good' : 
                             efficiency >= 60 ? 'Fair' : 'Poor'}
                          </span>
                        </td>
                      </tr>
                    );
                  })}
              </tbody>
            </table>
          </div>
        </div>

        {/* Global Command Usage */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Global Command Usage (All LLMs)</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {globalCommandBreakdown.slice(0, 9).map((cmd, index) => (
              <div key={cmd.command} className="bg-gray-50 p-4 rounded-lg border">
                <div className="flex justify-between items-center mb-2">
                  <span className="font-medium text-gray-900">{cmd.command}</span>
                  <span className="text-lg font-bold text-blue-600">{cmd.count}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full"
                    style={{ 
                      width: `${(cmd.count / globalCommandBreakdown[0].count) * 100}%` 
                    }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Selected LLM Details */}
        {selectedLLMData && (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-gray-800">
              Detailed Analysis: {selectedLLMData.llm.replace(/_/g, ' ')}
            </h3>
            
            {/* File Selection for Detailed View */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Select test file for command breakdown:
              </label>
              <select
                value={selectedFile}
                onChange={(e) => setSelectedFile(e.target.value)}
                className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-gray-900 bg-white focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="" className="text-gray-900">-- Select a file --</option>
                {Object.keys(selectedLLMData.testFiles).map(fileName => (
                  <option key={fileName} value={fileName} className="text-gray-900">
                    {fileName} ({selectedLLMData.testFiles[fileName].totalTests} tests)
                  </option>
                ))}
              </select>
            </div>

            {/* LLM Command Breakdown */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-gray-800 mb-3">Command Usage Summary</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{selectedLLMData.summary.totalTests}</div>
                  <div className="text-sm text-gray-600">Total Tests</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{selectedLLMData.summary.totalActionableCommands}</div>
                  <div className="text-sm text-gray-600">Total Commands</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">{selectedLLMData.summary.averageCommandsPerTest.toFixed(2)}</div>
                  <div className="text-sm text-gray-600">Avg/Test</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">{getEfficiencyPercentage(selectedLLMData).toFixed(1)}%</div>
                  <div className="text-sm text-gray-600">Efficiency</div>
                </div>
              </div>
            </div>            {/* Baseline Comparison */}
            {baselineLLM && selectedLLM !== baselineLLM.llm && (
              <div className="bg-blue-50 p-4 rounded-lg mb-6 border border-blue-200">
                <h4 className="font-semibold text-gray-800 mb-3">Comparison with Original Baseline</h4>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-700">Average commands per test:</span>
                    <div className="flex items-center">
                      <span className="text-md text-gray-900 font-semibold mr-2">
                        {selectedLLMData.summary.averageCommandsPerTest.toFixed(2)}
                      </span>
                      <span className="text-sm text-gray-700">
                        vs {baselineLLM.summary.averageCommandsPerTest.toFixed(2)} (original)
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-700">Total actionable commands:</span>
                    <div className="flex items-center">
                      <span className="text-md text-gray-900 font-semibold mr-2">
                        {selectedLLMData.summary.totalActionableCommands}
                      </span>
                      <span className="text-sm text-gray-700">
                        vs {baselineLLM.summary.totalActionableCommands} (original)
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-700">Relative efficiency:</span>
                    <div className="flex items-center">
                      <span className={`text-md font-semibold px-2 py-0.5 rounded ${
                        getEfficiencyPercentage(selectedLLMData) >= 95 ? 'bg-green-100 text-green-800' :
                        getEfficiencyPercentage(selectedLLMData) >= 80 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {getEfficiencyPercentage(selectedLLMData).toFixed(1)}%
                      </span>
                    </div>
                  </div>
                  
                  <div className="mt-2 text-sm text-gray-700">
                    <span className="font-medium text-gray-800">Note:</span> Original baseline is treated as 100% efficient. 
                    Higher percentages indicate better efficiency (fewer commands to achieve the same test functionality).
                  </div>
                </div>
              </div>
            )}
            
            {/* Most Used Commands by Selected LLM */}
            <div>
              <h4 className="font-semibold text-gray-800 mb-3">Most Used Commands</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {selectedLLMData.summary.commandBreakdown.slice(0, 8).map((cmd, index) => (
                  <div key={cmd.command} className="flex items-center justify-between p-3 bg-white border rounded-lg">
                    <span className="font-medium text-gray-900">{cmd.command}</span>
                    <div className="flex items-center">
                      <span className="text-sm text-gray-600 mr-2">{cmd.count} uses</span>
                      <div className="w-16 bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full"
                          style={{ 
                            width: `${(cmd.count / selectedLLMData.summary.commandBreakdown[0].count) * 100}%` 
                          }}
                        ></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Individual Test Commands (if file selected) */}
            {selectedFile && selectedLLMData.testFiles[selectedFile] && (
              <div>
                <h4 className="font-semibold text-gray-800 mb-3">
                  Test Commands in {selectedFile}
                </h4>
                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {Object.entries(selectedLLMData.testFiles[selectedFile].tests).map(([testName, testData]) => (
                    <div key={testName} className="bg-white border rounded-lg p-3">
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-medium text-gray-900">{testName}</span>
                        <span className="text-sm text-gray-600">
                          {testData.actionableCommands} commands
                        </span>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {testData.commands.map((cmd, index) => (
                          <span 
                            key={index}
                            className="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded"
                          >
                            {cmd}
                          </span>
                        ))}
                      </div>                      <div className="mt-2 text-xs text-gray-500">
                        Efficiency vs baseline: {baselineLLM && baselineLLM.summary.averageCommandsPerTest > 0 ? 
                          ((baselineLLM.summary.averageCommandsPerTest / testData.actionableCommands) * 100).toFixed(1) : 100}%
                      </div>
                    </div>
                  ))}
                </div>
              </div>            )}

            {/* Detailed Test Results Section */}
            <div className="border-t pt-6">
              <div className="flex justify-between items-center mb-4">
                <h4 className="text-lg font-semibold text-gray-800">Individual Test Results</h4>
                <button
                  onClick={() => setShowDetailedTests(!showDetailedTests)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                >
                  {showDetailedTests ? 'Hide Details' : 'Show Detailed Test Results'}
                </button>
              </div>

              {showDetailedTests && (
                <div className="space-y-4">
                  {loadingDetails ? (
                    <div className="flex justify-center items-center p-8">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                      <span className="ml-2">Loading detailed test data...</span>
                    </div>                  ) : detailedTests.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="min-w-full bg-white border border-gray-200 rounded-lg">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">File Name</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Test Name</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">LLM Commands</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Execution Time (s)</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Original Exec Time (s)</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Original Commands</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                          </tr>
                        </thead>                        <tbody className="divide-y divide-gray-200">
                          {detailedTests.map((test, index) => {
                            const originalData = findOriginalTestData(test);
                            // Debug: Log test data to console
                            if (index === 0) {
                              console.log('Sample test data:', test);
                              console.log('Original data found:', originalData);
                              console.log('Commands array:', test.commands);
                              console.log('Command count:', test.commandCount);
                            }
                            return (
                              <tr key={`${test.fileName}-${test.testName}-${index}`} className="hover:bg-gray-50">
                                <td className="px-4 py-3 text-sm font-medium text-gray-900">
                                  <div className="max-w-xs truncate" title={test.fileName}>
                                    {test.fileName}
                                  </div>
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-600">
                                  <div className="max-w-sm truncate" title={test.testName}>
                                    {test.testName}
                                  </div>
                                </td>                                <td className="px-4 py-3 text-sm text-gray-600">
                                  <div>
                                    <span className="font-semibold text-blue-600">
                                      {test.commandCount || test.commands?.length || 0}
                                    </span>
                                    {test.commands && test.commands.length > 0 ? (
                                      <div className="text-xs text-gray-500 max-w-xs truncate" title={test.commands?.join(', ')}>
                                        {test.commands.slice(0, 3).join(', ')}{test.commands.length > 3 ? '...' : ''}
                                      </div>
                                    ) : (
                                      <div className="text-xs text-red-500">
                                        No commands data
                                      </div>
                                    )}
                                  </div>
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-600">
                                  <span className="font-semibold text-purple-600">
                                    {(test.executionTime / 1000).toFixed(1)}s
                                  </span>
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-600">
                                  {originalData.execution ? (
                                    <span className="font-semibold text-orange-600">
                                      {(originalData.execution.duration / 1000).toFixed(1)}s
                                    </span>
                                  ) : (
                                    <span className="text-gray-400 text-xs">N/A</span>
                                  )}
                                </td>                                <td className="px-4 py-3 text-sm text-gray-600">
                                  {originalData.efficiency ? (
                                    <div>
                                      <span className="font-semibold text-green-600">
                                        {originalData.efficiency.actionableCommands}
                                      </span>
                                      {originalData.efficiency?.commands && originalData.efficiency.commands.length > 0 ? (
                                        <div className="text-xs text-gray-500 max-w-xs truncate" title={originalData.efficiency.commands.join(', ')}>
                                          {originalData.efficiency.commands.slice(0, 3).join(', ')}{originalData.efficiency.commands.length > 3 ? '...' : ''}
                                        </div>
                                      ) : (
                                        <div className="text-xs text-red-500">
                                          No commands data
                                        </div>
                                      )}
                                    </div>
                                  ) : (
                                    <div>
                                      <span className="text-gray-400 text-xs">N/A</span>
                                      <div className="text-xs text-red-500">
                                        No original data found
                                      </div>
                                    </div>
                                  )}
                                </td>
                                <td className="px-4 py-3 text-sm">
                                  <span className={`inline-block px-2 py-1 rounded text-xs font-semibold ${
                                    test.status === 'passed' 
                                      ? 'bg-green-100 text-green-800' 
                                      : test.status === 'failed'
                                      ? 'bg-red-100 text-red-800'
                                      : 'bg-yellow-100 text-yellow-800'
                                  }`}>
                                    {test.status.toUpperCase()}
                                  </span>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                        {/* Summary Statistics for Detailed Tests */}
                      <div className="mt-4 bg-gray-50 p-4 rounded-lg">
                        <h5 className="font-semibold text-gray-800 mb-2">Test Results Summary</h5>                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div className="text-center">
                            <div className="text-lg font-bold text-blue-600">{detailedTests.length}</div>
                            <div className="text-gray-600">Total Tests</div>
                          </div>
                          <div className="text-center">
                            <div className="text-lg font-bold text-green-600">
                              {detailedTests.filter(t => t.status === 'passed').length}
                            </div>
                            <div className="text-gray-600">Passed</div>
                          </div>
                          <div className="text-center">
                            <div className="text-lg font-bold text-red-600">
                              {detailedTests.filter(t => t.status === 'failed').length}
                            </div>
                            <div className="text-gray-600">Failed</div>
                          </div>
                          <div className="text-center">
                            <div className="text-lg font-bold text-orange-600">
                              {detailedTests.length > 0 ? 
                                (detailedTests.reduce((sum, t) => sum + t.executionTime, 0) / detailedTests.length / 1000).toFixed(1) 
                                : '0'}s
                            </div>
                            <div className="text-gray-600">Avg Exec Time</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <p className="text-yellow-600">No detailed test data available for {selectedLLM}</p>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ActionUsageComparisonView;
