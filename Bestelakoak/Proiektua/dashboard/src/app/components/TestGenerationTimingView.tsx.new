'use client';

import React, { useState, useEffect } from 'react';

interface LLMGenerationSummary {
  llm: string;
  totalTests: number;
  passedTests: number;
  failedTests: number;
  passRate: number;
  averageGenerationTime: number;
  totalGenerationTime: number;
}

interface DetailedTest {
  llm: string;
  fileName: string;
  testName: string;
  generationTime: number; // in milliseconds
  generationTimeSeconds: number; // in seconds
  executionTime: number; // in milliseconds
  executionTimeSeconds: number; // in seconds
  status: string;
  filePath: string;
  passed: boolean;
}

interface TestGenerationData {
  llmSummaries: LLMGenerationSummary[];
  detailedTests: DetailedTest[];
  totalLLMs: number;
  timestamp: string;
}

function TestGenerationTimingView() {
  const [testGenerationData, setTestGenerationData] = useState<TestGenerationData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedLLM, setSelectedLLM] = useState<string>('');
  const [detailedTests, setDetailedTests] = useState<DetailedTest[]>([]);
  const [showDetailedTable, setShowDetailedTable] = useState(false);
  const [loadingDetails, setLoadingDetails] = useState(false);

  useEffect(() => {
    fetchTestGenerationData();
  }, []);

  useEffect(() => {
    if (testGenerationData?.llmSummaries && testGenerationData.llmSummaries.length > 0 && !selectedLLM) {
      setSelectedLLM(testGenerationData.llmSummaries[0].llm);
    }
  }, [testGenerationData, selectedLLM]);

  const fetchTestGenerationData = async () => {
    try {
      const response = await fetch('/api/test-generation');
      if (!response.ok) {
        throw new Error('Failed to fetch test generation data');
      }
      const data = await response.json();
      setTestGenerationData(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const fetchDetailedTests = async () => {
    if (!selectedLLM) return;
    
    setLoadingDetails(true);
    try {
      const response = await fetch(`/api/test-generation?details=true&llm=${encodeURIComponent(selectedLLM)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch detailed test data');
      }
      const data = await response.json();
      setDetailedTests(data.detailedTests || []);
    } catch (err) {
      console.error('Error fetching detailed tests:', err);
      setDetailedTests([]);
    } finally {
      setLoadingDetails(false);
    }
  };

  const handleShowDetailedTable = async () => {
    if (!showDetailedTable) {
      await fetchDetailedTests();
    }
    setShowDetailedTable(!showDetailedTable);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-2">Loading test generation data...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-600">Error: {error}</p>
      </div>
    );
  }

  if (!testGenerationData?.llmSummaries || testGenerationData.llmSummaries.length === 0) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-600">No test generation data available</p>
      </div>
    );
  }

  const { llmSummaries } = testGenerationData;

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-xl font-bold mb-4">Test Generation Timing View</h2>
      <p>This component shows test generation timing statistics.</p>
    </div>
  );
}

// Export the component
export default TestGenerationTimingView;
