{
  "claude_3_5_sonnet": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// Visit a protected page\n\n  cy.visit(\"/personal\");\n\n  // Verify redirect to the signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n\n  // Verify signin page elements are visible\n\n  cy.getBySel(\"signin-title\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid credentials\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify redirection to home page\n\n  cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\n\n  // Verify user is logged in by checking for sidenav username\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in login credentials\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Check the remember me checkbox\n\n  cy.getBySel(\"signin-remember-me\").check();\n\n  // Submit login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify successful login\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Verify the cookie has a long expiration date (30 days)\n\n  cy.getCookie(\"connect.sid\").then(cookie => {\n    const cookieExpirationDate = new Date(cookie!.expiry! * 1000);\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.setDate(now.getDate() + 30));\n\n    // The cookie should expire approximately 30 days from now\n\n    // (give or take a day for timing)\n\n    const daysDifference = Math.round((cookieExpirationDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n    expect(daysDifference).to.be.closeTo(30, 1);\n  });\n\n  // Verify user stays logged in after page reload\n\n  cy.reload();\n  cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// Visit signup page\n\n  cy.visit(\"/signup\");\n\n  // Fill out the signup form\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n  // Submit signup form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Wait for signup API call to complete\n\n  cy.wait(\"@signup\");\n\n  // Create bank account during onboarding\n\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for bank account creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Complete onboarding\n\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-done\").click();\n\n  // Verify successful login after signup\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n\n  // Logout\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Verify redirect to signin page after logout\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Test empty form submission\n\n  cy.getBySel(\"signin-submit\").click();\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Password is required\");\n\n  // Test invalid username\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Test invalid password for existing user\n\n  cy.reload(); // Clear previous error state\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n  cy.getBySel(\"signin-submit\").click();\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Test password mismatch during signup\n\n  cy.visit(\"/signup\");\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"INVALID\");\n  cy.getBySel(\"signup-submit\").click();\n  cy.get(\"#confirmPassword-helper-text\").should(\"be.visible\").and(\"contain\", \"Password does not match\");\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Test 1: Submit empty form to check required field validations\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Assert that error messages are shown for all required fields\n\n  cy.getBySel(\"signup-first-name\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-last-name\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-username\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-password\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-confirmPassword\").should(\"have.class\", \"Mui-error\");\n\n  // Test 2: Test password mismatch validation\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"INVALID\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Assert password mismatch error\n\n  cy.contains(\"Password does not match\").should(\"be.visible\");\n\n  // Test 3: Test minimum password length validation\n\n  cy.getBySel(\"signup-password\").clear().type(\"123\");\n  cy.getBySel(\"signup-confirmPassword\").clear().type(\"123\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Assert password length error\n\n  cy.contains(\"Password must contain at least 4 characters\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in invalid username and valid password\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Submit the form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message appears\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// Visit signin page\n\n  cy.visit(\"/signin\");\n\n  // Try to login with valid username but invalid password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message appears\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"have.text\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// Navigate to bank accounts page and open form\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill out the bank account form\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for mutation and verify creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the new account appears in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"be.visible\");\n  cy.contains(\"The Best Bank\").should(\"be.visible\");\n  cy.contains(\"123456789\").should(\"be.visible\");\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// Click on create new bank account button \n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Step 1: Try submitting empty form first\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Verify error messages for all required fields\n\n  cy.getBySel(\"bankaccount-bankName-error\").should(\"be.visible\").and(\"contain\", \"Enter a bank name\");\n  cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\").and(\"contain\", \"Enter a valid routing number\");\n  cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\").and(\"contain\", \"Enter a valid account number\");\n\n  // Step 2: Test invalid routing number format\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"12345\"); // Invalid - too short\n\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\").and(\"contain\", \"Must contain a valid routing number\");\n\n  // Step 3: Test invalid account number format\n\n  cy.getBySel(\"bankaccount-routingNumber-input\").clear().type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").clear().type(\"12345\"); // Invalid - too short\n\n  cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\").and(\"contain\", \"Must contain a valid account number\");\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\n// Create a new bank account first\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill in bank account details\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for bank account creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify bank account was created\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"123456789\");\n\n  // Delete the bank account\n\n  cy.getBySel(\"bankaccount-delete\").first().click();\n\n  // Confirm deletion in dialog\n\n  cy.getBySel(\"modal-delete-confirmation\").should(\"be.visible\");\n  cy.getBySel(\"modal-delete-confirmation-submit\").click();\n\n  // Wait for deletion mutation\n\n  cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n  // Verify bank account was removed from list\n\n  cy.getBySel(\"bankaccount-list\").should(\"not.contain\", \"The Best Bank\").and(\"not.contain\", \"123456789\");\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// Get all users and find a user without bank accounts\n\n  cy.database(\"find\", \"users\").then((users: User[]) => {\n    const firstUser = users[0];\n\n    // Get bank accounts for the user\n\n    cy.database(\"find\", \"bankaccounts\", {\n      userId: firstUser.id\n    }).then((bankAccounts: any[]) => {\n      if (bankAccounts.length === 0) {\n        // If user has no bank accounts, verify empty state\n\n        cy.loginByXstate(firstUser.username);\n        cy.getBySel(\"bankaccounts-list\").should(\"not.exist\");\n        cy.getBySel(\"empty-list-header\").should(\"exist\");\n        cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n      } else {\n        // Find a user without bank accounts if first user has accounts\n\n        cy.database(\"find\", \"users\", {\n          id: {\n            $nin: bankAccounts.map(ba => ba.userId)\n          }\n        }).then((usersWithoutAccounts: User[]) => {\n          const newUser = usersWithoutAccounts[0];\n          cy.loginByXstate(newUser.username);\n          cy.getBySel(\"bankaccounts-list\").should(\"not.exist\");\n          cy.getBySel(\"empty-list-header\").should(\"exist\");\n          cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n        });\n      }\n    });\n  });\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// Navigate to new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the list\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment amount and description\n\n  cy.getBySel(\"amount-input\").type(paymentTransactions[0].amount);\n  cy.getBySel(\"transaction-create-description-input\").type(paymentTransactions[0].description);\n\n  // Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify transaction success\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Verify we're redirected to the transactions list\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n\n  // Verify the new transaction appears in the list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", paymentTransactions[0].description).and(\"contain\", `$${paymentTransactions[0].amount}`);\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out the request form with data from the first request transaction\n\n  cy.getBySel(\"amount-input\").type(\"95\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n  // Switch to request mode and submit\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the transaction to be created and verify success\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify we're on the transactions list and the new request appears\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n  cy.getBySel(\"transaction-item\").first().within(() => {\n    cy.contains(\"Fancy Hotel 🏨\").should(\"be.visible\");\n    cy.contains(\"$95\").should(\"be.visible\");\n    cy.contains(\"Requested\").should(\"be.visible\");\n  });\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// Navigate to new transaction page\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the list\n\n  cy.getBySel(\"user-list-item\").contains(ctx.contact.firstName).click();\n\n  // Try to submit without entering an amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n\n  // Enter invalid amount\n\n  cy.getBySel(\"amount-input\").type(\"0\");\n\n  // Try to submit with invalid amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error message is still displayed\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n\n  // Try to submit without a note/description\n\n  cy.getBySel(\"amount-input\").clear().type(\"50\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify note error message is displayed\n\n  cy.getBySel(\"transaction-create-description-error\").should(\"be.visible\").and(\"contain\", \"Please enter a note\");\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// Store initial receiver balance for later comparison\n\n  let receiverInitialBalance: number;\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then(user => {\n    receiverInitialBalance = user.balance;\n  });\n\n  // Navigate to new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the contact from search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment details using test data\n\n  cy.getBySel(\"amount-input\").type(\"35\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify transaction appears in list\n\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\").and(\"contain\", \"$35\");\n\n  // Switch to receiver's account to verify deposit\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Navigate to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify the transaction appears in receiver's list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\").and(\"contain\", \"$35\").and(\"contain\", \"received\");\n\n  // Verify receiver's balance increased by payment amount\n\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then(user => {\n    const expectedBalance = receiverInitialBalance + 3500; // $35.00 in cents\n\n    expect(user.balance).to.equal(expectedBalance);\n  });\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// First create a request\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for contact by name\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter request details using the first request transaction\n\n  cy.getBySel(\"amount-input\").type(\"95\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n  // Submit request\n\n  cy.getBySelLike(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify request was created successfully\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Logout and login as the contact (receiver of request)\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Go to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Fancy Hotel 🏨\").should(\"contain\", \"$95\").click();\n\n  // Accept the request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is updated\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"completed\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// Find or create a transaction from User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userB.id\n  }).then((transaction: Transaction) => {\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n\n    // Visit the transaction and like it\n\n    cy.visit(`/transaction/${transaction.id}`);\n    cy.getBySel(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Verify the like was registered\n\n    cy.getBySel(\"like-count\").should(\"contain\", \"1\");\n\n    // Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Check notifications\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify notification content\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", `${ctx.userA.firstName} ${ctx.userA.lastName}`).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\r\r\ncy.database(\"find\", \"transactions\", { \r\r\n    senderId: ctx.userA.id, \r\r\n    receiverId: ctx.userB.id \r\r\n}).then((transaction: Transaction) => {\r\r\n    // Login as User C\r\r\n    cy.loginByXstate(ctx.userC.username);\r\r\n    // Visit the transaction detail page\r\r\n    cy.visit(`/transaction/${transaction.id}`);\r\r\n    // Like the transaction\r\r\n    cy.getBySelLike(\"like-button\").click();\r\r\n    cy.wait(\"@postLike\");\r\r\n\r\r\n    // Check User A's notifications\r\r\n    cy.switchUser(ctx.userA.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n        .first()\r\r\n        .should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\r\r\n\r\r\n    // Check User B's notifications\r\r\n    cy.switchUser(ctx.userB.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n        .first()\r\r\n        .should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\r\r\n});\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Find or create a transaction from User B\n\n  cy.loginByXstate(ctx.userB.username);\n  cy.visit(\"/transaction/new\");\n  cy.getBySel(\"user-list-item\").contains(ctx.userA.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get transaction ID from URL\n\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Log out as User B\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User A and add a comment\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.visit(`/transaction/${transactionId}`);\n    const commentText = \"Test comment from User A\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Verify comment appears\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText).and(\"contain\", ctx.userA.firstName);\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log back in as User B to check notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.visit(\"/notifications\");\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification exists\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"commented on your transaction\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Test: User C comments on a transaction between User A and B; User A and B get notifications that User C commented on their transaction\r\r\n// Login as User A\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\n    \r\r\n// Create a transaction between User A and User B\r\r\ncy.visit(\"/transaction/new\");\r\r\ncy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\r\r\ncy.getBySelLike(\"amount\").type(\"75\");\r\r\ncy.getBySelLike(\"description\").type(\"Transaction between A and B\");\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Get the transaction id from the URL\r\r\nlet transactionId: string;\r\r\ncy.url().then(url => {\r\r\n    transactionId = url.split(\"/\").pop()!;\r\r\n    \r\r\n    // Log out as User A\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n    \r\r\n    // Log in as User C\r\r\n    cy.loginByXstate(ctx.userC.username);\r\r\n    \r\r\n    // Visit the transaction detail page and add comment\r\r\n    cy.visit(`/transaction/${transactionId}`);\r\r\n    const commentText = \"Test comment from User C\";\r\r\n    cy.getBySel(\"comment-input\").type(`${commentText}{enter}`);\r\r\n    cy.wait(\"@postComment\");\r\r\n\r\r\n    // Check User A's notifications\r\r\n    cy.switchUser(ctx.userA.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n        .first()\r\r\n        .should(\"contain\", ctx.userC.firstName)\r\r\n        .and(\"contain\", \"commented\");\r\r\n\r\r\n    // Check User B's notifications\r\r\n    cy.switchUser(ctx.userB.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n        .first()\r\r\n        .should(\"contain\", ctx.userC.firstName)\r\r\n        .and(\"contain\", \"commented\");\r\r\n});\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n  cy.wait(\"@getNotifications\");\n\n  // Create new payment transaction to User B\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Fill payment details\n\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Payment from A to B\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Logout User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as User B to check notification\n\n  cy.loginByXstate(ctx.userB.username);\n  cy.wait(\"@getNotifications\");\n\n  // Verify notification\n\n  cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n  cy.getBySel(\"nav-top-notifications-link\").click();\n\n  // Check notification content\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"paid\");\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n  cy.visit(\"/\");\n  cy.wait(\"@getNotifications\");\n\n  // Create payment request\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill in request details\n\n  cy.getBySel(\"amount-input\").type(\"75\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test payment request\");\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for request creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Logout User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as User C\n\n  cy.loginByXstate(ctx.userC.username);\n  cy.wait(\"@getNotifications\");\n\n  // Verify notification\n\n  cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n  cy.getBySel(\"nav-top-notifications-link\").click();\n\n  // Check notification content\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// Create a brand new user that won't have any notifications\n\n  cy.task(\"db:seed:user\").then((user: User) => {\n    // Log in as the new user\n\n    cy.loginByXstate(user.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications page\n\n    cy.getBySel(\"notifications-link\").click();\n\n    // Verify empty state elements are visible\n\n    cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n    cy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\n\n    // Verify no notification items exist\n\n    cy.getBySel(\"notification-list-item\").should(\"not.exist\");\n  });\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n// Initial state check - full screen view (nav drawer visible)\n\n  cy.getBySel(\"sidenav\").should(\"be.visible\");\n  cy.getBySel(\"sidenav-home\").should(\"be.visible\");\n  cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n\n  // If on mobile viewport, test drawer toggle functionality\n\n  cy.viewport(\"iphone-x\");\n\n  // Initial state on mobile - drawer should be hidden\n\n  cy.getBySel(\"sidenav\").should(\"not.be.visible\");\n\n  // Click hamburger menu to open drawer\n\n  cy.getBySel(\"drawer-button\").click();\n  cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n  // Click outside drawer to close it\n\n  cy.get(\"body\").click(0, 0);\n  cy.getBySel(\"sidenav\").should(\"not.be.visible\");\n\n  // Return to desktop view - drawer should be visible again\n\n  cy.viewport(1024, 768);\n  cy.getBySel(\"sidenav\").should(\"be.visible\");\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// Get user's contacts first to establish contact IDs\n\n  cy.database(\"find\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // Navigate to public feed\n\n    cy.getBySel(\"nav-public-tab\").click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n\n    // Ensure transactions are loaded\n\n    cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\n\n    // Check first 5 transactions (or less if fewer exist)\n\n    cy.getBySel(\"transaction-item\").then($items => {\n      const numToCheck = Math.min(5, $items.length);\n      for (let i = 0; i < numToCheck; i++) {\n        cy.wrap($items[i]).within(() => {\n          // Check if either sender or receiver is in user's contacts\n\n          cy.get(\"[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n            const userId = dataTest!.split(\"-\")[2];\n            const isContact = contactIds.includes(userId);\n            expect(isContact, `Transaction ${i + 1} should involve a contact`).to.be.true;\n          });\n        });\n      }\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// Get the user's contacts first\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n\n    // Navigate to contacts feed tab\n\n    cy.getBySel(\"nav-contacts-tab\").click();\n    cy.wait(\"@contactsTransactions\");\n\n    // Skip test if user has no contacts\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Test skipped.\");\n      return;\n    }\n\n    // Check if there are any transactions\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test=empty-list-header]\").length > 0) {\n        cy.log(\"No transactions found in friends feed. Test skipped.\");\n        return;\n      }\n\n      // Get all transaction items\n\n      cy.getBySel(\"transaction-item\").each($el => {\n        // For each transaction, verify it involves a contact\n\n        cy.wrap($el).within(() => {\n          // Check sender and receiver IDs\n\n          cy.get(\"[data-test*='sender-'], [data-test*='receiver-']\").should($elements => {\n            // Extract IDs from data-test attributes\n\n            const ids = Array.from($elements).map(el => {\n              const dataTest = el.getAttribute(\"data-test\");\n              return dataTest?.split(\"-\")[2];\n            });\n\n            // Verify at least one party is a contact\n\n            const hasContactParty = ids.some(id => contactIds.includes(id) || id === ctx.user!.id);\n            expect(hasContactParty).to.be.true;\n          });\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => {\n// Visit home page which shows transaction feed\n\n  cy.visit(\"/\");\n\n  // Wait for transactions to load\n\n  cy.wait(\"@publicTransactions\");\n\n  // Verify transaction feed container exists\n\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n\n  // Check for different transaction item variations\n\n  cy.getBySel(\"transaction-item\").each($el => {\n    // Verify basic transaction elements\n\n    cy.wrap($el).within(() => {\n      // Verify sender/receiver info exists\n\n      cy.get(\"[data-test*='transaction-sender-']\").should(\"exist\");\n      cy.get(\"[data-test*='transaction-receiver-']\").should(\"exist\");\n\n      // Verify amount is displayed\n\n      cy.get(\"[data-test*='transaction-amount-']\").should(\"exist\");\n\n      // Verify description exists\n\n      cy.get(\"[data-test*='transaction-description-']\").should(\"exist\");\n\n      // Verify date is displayed\n\n      cy.get(\"[data-test*='transaction-created-']\").should(\"exist\");\n    });\n  });\n\n  // Take a snapshot for visual verification\n\n  cy.visualSnapshot(\"Transaction Item Variations\");\n });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// Skip if not mobile view\n\n  if (!isMobile()) {\n    return;\n  }\n\n  // Visit the transactions page\n\n  cy.visit(\"/\");\n  cy.wait(\"@publicTransactions\");\n\n  // Open date range picker\n\n  cy.getBySel(\"filter-date-range-button\").click();\n  cy.getBySel(\"date-range-filter-drawer\").should(\"be.visible\");\n\n  // Close the modal\n\n  cy.getBySel(\"date-range-filter-drawer-close\").click();\n  cy.getBySel(\"date-range-filter-drawer\").should(\"not.exist\");\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by date range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => {\n// Visit base URL and wait for data to load\n\n  cy.visit(\"/\");\n\n  // Navigate to personal feed\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(`@${feedViews.personal.routeAlias}`);\n\n  // Check that transactions exist\n\n  cy.getBySel(\"transaction-item\").should(\"exist\");\n\n  // Get the current user's ID to verify transactions\n\n  cy.getBySel(\"transaction-item\").each($el => {\n    // For each transaction, verify that the current user is either the sender or receiver\n\n    const transactionInvolvesUser = $el.find(`[data-test=\"transaction-sender-${ctx.user!.id}\"]`).length > 0 || $el.find(`[data-test=\"transaction-receiver-${ctx.user!.id}\"]`).length > 0;\n\n    // Assert that the transaction involves the current user\n\n    expect(transactionInvolvesUser).to.be.true;\n  });\n\n  // Verify the \"mine\" tab is selected\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\").and(\"contain\", \"mine\");\n });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// Verify we have a transaction to work with\n\n  expect(ctx.transactionRequest, \"Transaction request exists\").to.not.be.undefined;\n\n  // Navigate to specific transaction page using the transaction request ID\n\n  cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n  cy.wait(\"@getTransaction\");\n\n  // Verify the transaction detail view is loaded\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n\n  // Verify that the navigation tabs are hidden\n\n  cy.getBySel(\"nav-transaction-tabs\").should(\"not.exist\");\n  cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n\n  // Verify we're still showing the transaction details\n\n  cy.getBySel(\"transaction-amount\").should(\"be.visible\");\n  cy.getBySel(\"transaction-description\").should(\"be.visible\");\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Find a transaction in the personal feed\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Get initial like count\n\n  cy.getBySel(\"transaction-like-count\").invoke(\"text\").then(text => {\n    const initialLikeCount = parseInt(text || \"0\");\n\n    // Click the like button\n\n    cy.getBySel(\"transaction-like-button\").click();\n\n    // Verify like count increased\n\n    cy.getBySel(\"transaction-like-count\").should(\"have.text\", `${initialLikeCount + 1}`);\n\n    // Verify like button state changed\n\n    cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"liked\");\n  });\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// Verify we have a transaction request in context\n\n  if (!ctx.transactionRequest) {\n    throw new Error(\"No transaction request found in context\");\n  }\n\n  // Navigate to the transaction detail view\n\n  cy.visit(`/transaction/${ctx.transactionRequest.id}`);\n  cy.wait(\"@getTransaction\");\n\n  // Get the comment input field\n\n  cy.getBySel(\"transaction-comment-input\").should(\"be.visible\").type(\"Great dinner! Thanks!\");\n\n  // Submit the comment\n\n  cy.getBySel(\"transaction-comment-submit\").should(\"be.visible\").click();\n\n  // Wait for the comment to be posted\n\n  cy.wait(\"@postComment\");\n\n  // Verify the comment appears in the transaction\n\n  cy.getBySel(\"comments-list\").should(\"be.visible\").and(\"contain\", \"Great dinner! Thanks!\");\n\n  // Verify comment author is the authenticated user\n\n  cy.getBySel(\"comment-author\").first().should(\"contain\", ctx.authenticatedUser?.firstName).and(\"contain\", ctx.authenticatedUser?.lastName);\n\n  // Verify timestamp is present\n\n  cy.getBySel(\"comment-timestamp\").first().should(\"be.visible\");\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// Verify we have a pending transaction request in context\n\n  expect(ctx.transactionRequest).to.exist;\n\n  // Click on the pending transaction request \n\n  cy.getBySel(\"transaction-item\").contains(ctx.transactionRequest!.description).click();\n  cy.wait(\"@getTransaction\");\n\n  // Verify transaction details are displayed\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n  cy.getBySel(\"transaction-amount\").invoke(\"text\").should(\"contain\", ctx.transactionRequest!.amount);\n  cy.getBySel(\"transaction-description\").invoke(\"text\").should(\"contain\", ctx.transactionRequest!.description);\n\n  // Accept the transaction request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is updated to complete\n\n  cy.getBySel(\"transaction-payment-status\").should(\"have.text\", \"Complete\");\n\n  // Verify success message is shown\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Request Accepted\");\n\n  // Verify transaction no longer appears in pending requests\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n  cy.getBySel(\"transaction-item\").contains(ctx.transactionRequest!.description).parent().should(\"not.contain\", \"pending\");\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Test for rejecting a transaction request\r\r\nit(\"rejects a transaction request\", () => {\r\r\n    // Skip test if no pending transaction request exists\r\r\n    cy.get(\"body\").then(() => {\r\r\n        if (!ctx.transactionRequest) {\r\r\n            cy.log(\"No pending transaction request found - skipping test\");\r\r\n            return;\r\r\n        }\r\r\n\r\r\n        // Navigate to the transaction request\r\r\n        cy.visit(`/transaction/${ctx.transactionRequest.id}`);\r\r\n        cy.wait(\"@getTransaction\");\r\r\n\r\r\n        // Verify transaction details are displayed\r\r\n        cy.getBySel(\"transaction-detail-header\")\r\r\n            .should(\"contain\", \"Requested Payment\");\r\r\n        \r\r\n        // Click reject button\r\r\n        cy.getBySel(\"transaction-reject-request\")\r\r\n            .should(\"be.visible\")\r\r\n            .click();\r\r\n\r\r\n        // Wait for rejection to be processed\r\r\n        cy.wait(\"@updateTransaction\");\r\r\n\r\r\n        // Verify transaction status is updated\r\r\n        cy.getBySel(\"transaction-detail-header\")\r\r\n            .should(\"contain\", \"Rejected\");\r\r\n            \r\r\n        // Return to personal transactions list\r\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\r\n        cy.wait(\"@personalTransactions\");\r\r\n\r\r\n        // Verify rejected transaction appears in list with correct status\r\r\n        cy.getBySel(\"transaction-item\")\r\r\n            .first()\r\r\n            .should(\"contain\", \"rejected\");\r\r\n});\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// Verify we have a transaction request in context\n\n  expect(ctx.transactionRequest).to.exist;\n\n  // Click on the first transaction item\n\n  cy.getBySel(\"transaction-item\").first().click();\n  cy.wait(\"@getTransaction\");\n\n  // Update transaction status to completed\n\n  cy.database(\"update\", \"transactions\", {\n    id: ctx.transactionRequest!.id,\n    status: \"complete\",\n    requestStatus: \"accepted\",\n    requestResolvedAt: new Date().toISOString()\n  });\n\n  // Refresh the page to see updated transaction\n\n  cy.reload();\n  cy.wait(\"@getTransaction\");\n\n  // Verify the accept button is not present\n\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n\n  // Verify the reject button is not present    \n\n  cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n\n  // Verify transaction shows completed status\n\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"Complete\");\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Verify the user settings form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify all required input fields are present and visible\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n  // Verify form fields have current user data\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-email-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"not.have.value\", \"\");\n\n  // Verify submit button is present and enabled\n\n  cy.getBySel(\"user-settings-submit\").should(\"be.visible\").and(\"be.enabled\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// Clear all required form fields\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Submit form with empty fields\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify validation messages for required fields\n\n  cy.get(\"form\").contains(\"Enter a first name\").should(\"be.visible\");\n  cy.get(\"form\").contains(\"Enter a last name\").should(\"be.visible\");\n  cy.get(\"form\").contains(\"Must contain a valid email address\").should(\"be.visible\");\n\n  // Test invalid phone number format\n\n  cy.getBySel(\"user-settings-firstName-input\").type(\"Test\");\n  cy.getBySel(\"user-settings-lastName-input\").type(\"User\");\n  cy.getBySel(\"user-settings-email-input\").type(\"valid@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(\"invalid\");\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify phone number validation message\n\n  cy.getBySel(\"user-settings-phoneNumber-input\").siblings(\"div\").should(\"contain\", \"Phone number is not valid\");\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// Clear existing field values\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Type in new user information\n\n  cy.getBySel(\"user-settings-firstName-input\").type(\"New First Name\").should(\"have.value\", \"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").type(\"New Last Name\").should(\"have.value\", \"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").type(\"email@email.com\").should(\"have.value\", \"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(\"6155551212\").should(\"have.value\", \"6155551212\");\n\n  // Submit the form\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Wait for the update request to complete\n\n  cy.wait(\"@updateUser\");\n\n  // Verify form values persist after update\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", \"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", \"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", \"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", \"6155551212\");\n\n  // Verify success notification\n\n  cy.getBySel(\"user-settings-form-success\").should(\"be.visible\").and(\"contain\", \"User Settings Updated Successfully\");\n });\r\n});\r\n"
  },
  "claude_3_7_sonnet": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// Try to access a protected page without authentication\n\n  cy.visit(\"/personal\");\n\n  // Verify we're redirected to the signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n\n  // Verify signin page elements are visible\n\n  cy.getBySel(\"signin-title\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in login credentials with valid username and password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Click the submit button\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert that user is redirected to the home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Verify that we're on the authenticated home page by checking for UI elements\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// should remember a user for 30 days after login\r\r\ncy.visit(\"/signin\");\r\r\n\r\r\n// Enter valid login credentials\r\r\ncy.getBySel(\"signin-username\").type(\"PainterJoy90\");\r\r\ncy.getBySel(\"signin-password\").type(\"s3cret\");\r\r\n\r\r\n// Check the \"Remember me\" checkbox\r\r\ncy.getBySel(\"signin-remember-me\").check();\r\r\n\r\r\n// Submit the login form\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\n\r\r\n// Verify login was successful by checking we're on the home page\r\r\ncy.location(\"pathname\").should(\"equal\", \"/\");\r\r\n\r\r\n// Verify the cookie has a long expiration date (approximately 30 days)\r\r\ncy.getCookie(\"connect.sid\").then(cookie => {\r\r\n  const cookieExpirationDate = new Date(cookie!.expiry! * 1000);\r\r\n  const now = new Date();\r\r\n  const thirtyDaysFromNow = new Date(now.setDate(now.getDate() + 30));\r\r\n  \r\r\n  // The cookie should expire approximately 30 days from now (give or take a day for timing)\r\r\n  const daysDifference = Math.round(\r\r\n    (cookieExpirationDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)\r\r\n  );\r\r\n  expect(daysDifference).to.be.closeTo(30, 1);\r\r\n});\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Fill out the signup form with user details\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n  // Submit the form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Wait for the signup request to complete\n\n  cy.wait(\"@signup\");\n\n  // After successful signup, user should be redirected to the onboarding page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Complete onboarding by creating a bank account\n\n  cy.getBySel(\"user-onboarding-next\").click();\n\n  // Fill out bank account form\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit bank account form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for bank account creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Complete the onboarding process\n\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-done\").click();\n\n  // Verify successful login by checking for the user's name in the sidenav\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n\n  // Logout (handle mobile case if needed)\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Verify redirect to signin page after logout\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Test case 1: Empty form submission\n\n  // Submit without entering any credentials\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify validation errors for required fields\n\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Password is required\");\n\n  // Test case 2: Invalid username\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message for invalid username\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Clear the fields and try again with valid username but invalid password\n\n  cy.getBySel(\"signin-username\").clear().type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").clear().type(\"invalidPa$word\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message for invalid password\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Test empty form submission\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Verify all required field errors are displayed\n\n  cy.getBySel(\"signup-first-name\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-last-name\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-username\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-password\").should(\"have.class\", \"Mui-error\");\n  cy.getBySel(\"signup-confirmPassword\").should(\"have.class\", \"Mui-error\");\n\n  // Test password mismatch\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"INVALID\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Verify password match error\n\n  cy.contains(\"Password does not match\").should(\"be.visible\");\n\n  // Test short password\n\n  cy.getBySel(\"signup-password\").clear().type(\"123\");\n  cy.getBySel(\"signup-confirmPassword\").clear().type(\"123\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Verify password length error\n\n  cy.contains(\"Password must contain at least 4 characters\").should(\"be.visible\");\n\n  // Test existing username (using the seeded username)\n\n  cy.getBySel(\"signup-password\").clear().type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").clear().type(\"s3cret\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Verify username taken error\n\n  cy.wait(\"@signup\");\n  cy.getBySel(\"signup-error\").should(\"be.visible\").and(\"contain\", \"Username already exists\");\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in signin form with invalid username and valid password\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Submit the form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid username\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n  // Enter invalid password\n\n  cy.getBySel(\"signin-password\").type(\"INVALID\");\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click on the new bank account button\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill in the bank account form with provided test data\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for the GraphQL mutation to complete\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the newly created bank account is visible in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"be.visible\");\n  cy.contains(\"The Best Bank\").should(\"be.visible\");\n\n  // Verify account details are displayed correctly\n\n  cy.contains(\"123456789\").should(\"be.visible\");\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click the Create button to open the form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Try to submit empty form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Verify that error messages appear for each required field\n\n  cy.get(\"#bankaccount-bankName-input-helper-text\").should(\"be.visible\").and(\"have.text\", \"Enter a bank name\");\n  cy.get(\"#bankaccount-routingNumber-input-helper-text\").should(\"be.visible\").and(\"have.text\", \"Enter a valid bank routing number\");\n  cy.get(\"#bankaccount-accountNumber-input-helper-text\").should(\"be.visible\").and(\"have.text\", \"Enter a valid bank account number\");\n\n  // Fill in form with invalid data and check for specific validation errors\n\n  // Test invalid routing number (too short)\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"12345\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.get(\"#bankaccount-routingNumber-input-helper-text\").should(\"be.visible\").and(\"have.text\", \"Must contain a valid routing number\");\n\n  // Clear the form\n\n  cy.getBySel(\"bankaccount-bankName-input\").clear();\n  cy.getBySel(\"bankaccount-routingNumber-input\").clear();\n  cy.getBySel(\"bankaccount-accountNumber-input\").clear();\n\n  // Test invalid account number (too short)\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"12345\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.get(\"#bankaccount-accountNumber-input-helper-text\").should(\"be.visible\").and(\"have.text\", \"Must contain a valid account number\");\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // First create a new bank account to ensure we have one to delete\n\n  cy.getBySel(\"bankaccount-new\").click();\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the bank account exists in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"be.visible\");\n  cy.contains(\"The Best Bank\").should(\"be.visible\");\n\n  // Delete the bank account\n\n  cy.contains(\"The Best Bank\").parent().find(\"[data-test=bankaccount-delete]\").click();\n\n  // Confirm deletion in the dialog\n\n  cy.getBySel(\"bankaccount-delete-confirmation\").click();\n\n  // Wait for deletion request to complete\n\n  cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n  // Verify the bank account is no longer displayed\n\n  cy.contains(\"The Best Bank\").should(\"not.exist\");\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// Reset the database to ensure we have a clean state\n\n  cy.task(\"db:seed\");\n\n  // Find a user without bank accounts or remove bank accounts from current user\n\n  cy.database(\"find\", \"users\").then((users: User[]) => {\n    // Login with the first user\n\n    const firstUser = users[0];\n\n    // Check if this user has bank accounts\n\n    cy.database(\"find\", \"bankaccounts\", {\n      userId: firstUser.id\n    }).then(bankAccounts => {\n      // If user has bank accounts, delete them\n\n      if (bankAccounts && bankAccounts.length > 0) {\n        bankAccounts.forEach(account => {\n          cy.database(\"delete\", \"bankaccounts\", {\n            id: account.id\n          });\n        });\n      }\n\n      // Login with the user\n\n      cy.loginByXstate(firstUser.username);\n\n      // Navigate to bank accounts page\n\n      cy.getBySel(\"sidenav-bankaccounts\").click();\n\n      // Wait for the list bank accounts query\n\n      cy.wait(\"@gqlListBankAccountQuery\");\n\n      // Verify that the bank accounts list is not visible\n\n      cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\n\n      // Verify that empty state elements are displayed\n\n      cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n\n      // Verify that the onboarding modal is shown\n\n      cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n    });\n  });\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// Navigate to new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for a user/contact\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out payment details using the first payment transaction object\n\n  cy.getBySel(\"amount-input\").type(\"35\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n  // Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify transaction was successfully submitted\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n  cy.getBySel(\"alert-bar-success\").should(\"contain\", \"Transaction Submitted!\");\n\n  // Verify we're redirected to the personal transactions page where the new transaction should appear\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n\n  // Verify the new transaction appears in the list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\").and(\"contain\", \"$35\");\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter transaction request details using data from requestTransactions\n\n  cy.getBySel(\"amount-input\").type(\"95\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n  // Switch to request mode and submit the request\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify the transaction was created successfully\n\n  cy.getBySel(\"nav-personal-tab\").should(\"be.visible\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Fancy Hotel 🏨\").and(\"contain\", \"$95\");\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// Navigate to the new transaction page\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the list\n\n  cy.getBySel(\"user-list-item\").contains(ctx.contact.firstName).click();\n\n  // Try to submit without entering an amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error message is displayed for amount\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n\n  // Enter invalid amount (0)\n\n  cy.getBySel(\"amount-input\").type(\"0\");\n\n  // Try to submit with invalid amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error message is still displayed for invalid amount\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n\n  // Clear amount and enter valid amount\n\n  cy.getBySel(\"amount-input\").clear().type(\"50\");\n\n  // Try to submit without entering a note/description\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error message is displayed for missing note\n\n  cy.getBySel(\"transaction-create-description-error\").should(\"be.visible\").and(\"contain\", \"Please enter a note\");\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// Get initial balance of receiver (contact) for later comparison\n\n  let receiverInitialBalance;\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then(user => {\n    receiverInitialBalance = user.balance;\n  });\n\n  // Get initial balance of sender for later comparison\n\n  let senderInitialBalance;\n  cy.getBySel(\"sidenav-user-balance\").then($balance => {\n    const balanceText = $balance.text().replace(/[^0-9.-]+/g, \"\");\n    senderInitialBalance = parseFloat(balanceText);\n  });\n\n  // Navigate to new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for contact by name\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment amount using data from test info\n\n  const paymentAmount = \"35\";\n  const paymentDescription = \"Sushi dinner 🍣\";\n  cy.getBySel(\"amount-input\").type(paymentAmount);\n\n  // Enter payment description\n\n  cy.getBySel(\"transaction-create-description-input\").type(paymentDescription);\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify transaction was created successfully\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", paymentDescription);\n\n  // Verify sender's balance decreased\n\n  cy.reload();\n  cy.getBySel(\"sidenav-user-balance\").then($balance => {\n    const newBalanceText = $balance.text().replace(/[^0-9.-]+/g, \"\");\n    const newBalance = parseFloat(newBalanceText);\n    expect(newBalance).to.be.lessThan(senderInitialBalance);\n  });\n\n  // Log out and log in as receiver\n\n  cy.getBySel(\"sidenav-signout\").click();\n  cy.loginByXstate(ctx.contact!.username);\n\n  // Check receiver's updated balance\n\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then(user => {\n    const expectedBalance = receiverInitialBalance + Number(paymentAmount) * 100; // Converting dollars to cents\n\n    expect(user.balance).to.equal(expectedBalance);\n  });\n\n  // Verify transaction appears in the receiver's list\n\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", paymentDescription).and(\"contain\", `+$${paymentAmount}`);\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// Define the transaction to use from the userInfo\n\n  const requestTransaction = {\n    amount: \"95\",\n    description: \"Fancy Hotel 🏨\"\n  };\n\n  // Step 1: Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Step 2: Search for contact user to request money from\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Step 3: Select the contact from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Step 4: Enter request details\n\n  cy.getBySel(\"amount-input\").type(requestTransaction.amount);\n  cy.getBySel(\"transaction-create-description-input\").type(requestTransaction.description);\n\n  // Step 5: Submit the request\n\n  cy.getBySelLike(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Step 6: Verify request was created\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", requestTransaction.description).and(\"contain\", `$${requestTransaction.amount}`);\n\n  // Step 7: Logout and login as the contact (receiver of request)\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Step 8: Go to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Step 9: Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", requestTransaction.description).click();\n\n  // Step 10: Accept the request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Step 11: Verify the transaction status is updated\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"Paid\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// Login as User B first to create a transaction\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Create a transaction that User A will later like\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userA.firstName);\n  cy.getBySel(\"user-list-item\").first().click();\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get the transaction ID from the URL\n\n  let transactionId;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop();\n\n    // Log out as User B\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n\n    // Visit the transaction\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Like the transaction\n\n    cy.getBySel(\"like-button\").click();\n\n    // Verify the like is registered\n\n    cy.getBySel(\"like-count\").should(\"contain\", \"1\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B to check for notifications\n\n    cy.loginByXstate(ctx.userB.username);\n\n    // Navigate to notifications\n\n    cy.getBySel(\"sidenav-notifications\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification about the like exists\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// Step 1: Find an existing transaction between User A and User B or create a new one\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userA.id,\n    receiverId: ctx.userB.id\n  }).then((transaction: Transaction) => {\n    if (transaction) {\n      // Use existing transaction\n\n      performLikeAndCheckNotifications(transaction.id);\n    } else {\n      // Create a new transaction between User A and User B\n\n      cy.loginByXstate(ctx.userA.username);\n\n      // Navigate to new transaction form\n\n      cy.getBySel(\"nav-top-new-transaction\").click();\n\n      // Select User B as recipient\n\n      cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n      cy.getBySel(\"user-list-item\").first().click();\n\n      // Enter transaction details\n\n      cy.getBySel(\"amount-input\").type(\"50\");\n      cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like notification\");\n      cy.getBySel(\"transaction-create-submit-payment\").click();\n\n      // Wait for transaction creation to complete\n\n      cy.wait(\"@createTransaction\").then(intercept => {\n        // Extract transaction ID from the response\n\n        const transactionId = intercept.response.body.transaction.id;\n\n        // Log out User A\n\n        cy.getBySel(\"sidenav-signout\").click();\n\n        // Continue with the test using the new transaction\n\n        performLikeAndCheckNotifications(transactionId);\n      });\n    }\n  });\n\n  // Function to perform like and check notifications for both users\n\n  function performLikeAndCheckNotifications(transactionId: string) {\n    // Log in as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Navigate to the transaction\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // User C likes the transaction\n\n    cy.getBySel(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Log out as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User A and check for notification\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification count badge shows correctly\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n\n    // Open notifications panel\n\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User A received notification that User C liked their transaction\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"liked\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User B and check for notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification count badge shows correctly\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n\n    // Open notifications panel\n\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User B received notification that User C liked their transaction\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"liked\");\n  }\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Find a transaction created by User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userB.id\n  }).then(transaction => {\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n\n    // Navigate to User B's transaction\n\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Add a comment to the transaction\n\n    const commentText = \"This is a test comment from User A\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n\n    // Wait for comment to be posted\n\n    cy.wait(\"@postComment\");\n\n    // Verify the comment appears on the page\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText);\n\n    // Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B\n\n    cy.loginByXstate(ctx.userB.username);\n\n    // Navigate to notifications\n\n    cy.getBySel(\"sidenav-notifications\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Verify User B has a notification about User A's comment\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Create a transaction between User A and User B\n\n  cy.visit(\"/transaction/new\");\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction AB\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get transaction ID from URL\n\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Visit the transaction\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Add a comment\n\n    const comment = \"This is a comment from User C!\";\n    cy.getBySel(\"comment-input\").type(comment);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Verify the comment appears\n\n    cy.getBySel(\"comments-list\").should(\"contain\", comment);\n\n    // Log out as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A and check for notification\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification about User C's comment\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B and check for notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Verify notification about User C's comment\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to new transaction\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Search for and select User B\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Enter payment details\n\n  const paymentAmount = 50;\n  const paymentNote = \"Payment from A to B\";\n  cy.getBySel(\"amount-input\").type(paymentAmount.toString());\n  cy.getBySel(\"transaction-create-description-input\").type(paymentNote);\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Log out as User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as User B to check notification\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Wait for notifications to load\n\n  cy.wait(\"@getNotifications\");\n\n  // Verify notification badge is visible\n\n  cy.getBySel(\"nav-top-notifications-count\").should(\"be.visible\");\n\n  // Open notifications\n\n  cy.getBySel(\"sidenav-notifications\").click();\n\n  // Verify the notification content\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"paid\");\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Create a payment request to User C\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment request details\n\n  cy.getBySel(\"amount-input\").type(\"75\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test payment request\");\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for transaction creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Log out User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as User C to verify notification\n\n  cy.loginByXstate(ctx.userC.username);\n\n  // Navigate to notifications\n\n  cy.getBySel(\"sidenav-notifications\").click();\n  cy.wait(\"@getNotifications\");\n\n  // Verify notification content\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// Create a brand new user with no notifications\n\n  cy.task(\"db:seed:user\").then((user: User) => {\n    // Login as the new user\n\n    cy.loginByXstate(user.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications page\n\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Verify empty state elements are displayed\n\n    cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n    cy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\n    cy.getBySelLike(\"notification-list-item\").should(\"not.exist\");\n\n    // Verify the empty state message\n\n    cy.getBySel(\"empty-list-header\").should(\"contain\", \"No Notifications\");\n  });\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n// Visit the home page (root URL)\n\n  cy.visit(\"/\");\n\n  // Wait for transactions to load\n\n  cy.wait(\"@publicTransactions\");\n\n  // Check if we need to handle responsive design differently\n\n  if (isMobile()) {\n    // On mobile, the drawer should be closed initially\n\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n\n    // Open the drawer by clicking the menu button\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify the drawer is open\n\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n    // Close the drawer by clicking the menu button again\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify the drawer is closed\n\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n  } else {\n    // On desktop, the drawer should be visible by default\n\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n    // Close the drawer by clicking the collapse button\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify drawer is collapsed (not necessarily invisible, but collapsed)\n\n    cy.getBySel(\"sidenav-drawer\").should(\"have.class\", \"MuiDrawer-paperAnchorDockedLeft\");\n    cy.getBySel(\"sidenav-user-full-name\").should(\"not.be.visible\");\n\n    // Open the drawer by clicking the expand button\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify drawer is expanded\n\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n    cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n  }\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// Get the user's contacts first to determine their IDs\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // Skip test if user has no contacts\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Test skipped.\");\n      return;\n    }\n\n    // Navigate to public feed\n\n    cy.getBySel(\"nav-public-tab\").click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n\n    // Verify transactions have loaded\n\n    cy.getBySel(\"transaction-item\").should(\"exist\");\n\n    // Check the first 5 transactions (or fewer if less than 5 exist)\n\n    cy.getBySel(\"transaction-item\").then($items => {\n      const itemsToCheck = Math.min($items.length, 5);\n      if (itemsToCheck === 0) {\n        cy.log(\"No transactions found in public feed. Test skipped.\");\n        return;\n      }\n\n      // For each of the first 5 transactions\n\n      for (let i = 0; i < itemsToCheck; i++) {\n        cy.wrap($items[i]).within(() => {\n          // Check if either sender or receiver is in the user's contacts\n\n          cy.get(\"[data-test*='transaction-sender-'], [data-test*='transaction-receiver-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n            // Extract the user ID from the data attribute\n\n            const regex = /transaction-(sender|receiver)-([a-f0-9-]+)/;\n            const match = dataTest?.match(regex);\n            if (match && match.length > 2) {\n              const userId = match[2];\n\n              // Verify this transaction involves a contact\n\n              const isContactTransaction = contactIds.includes(userId);\n              expect(isContactTransaction, `Transaction ${i + 1} should involve a contact`).to.be.true;\n            } else {\n              // If we can't extract the ID properly, log an issue\n\n              cy.log(`Could not extract user ID from data-test attribute: ${dataTest}`);\n            }\n          });\n        });\n      }\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// Get the user's contacts first\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // If user has no contacts, skip test with a message\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Test skipped.\");\n      return;\n    }\n\n    // Navigate to contacts feed\n\n    cy.getBySel(\"nav-contacts-tab\").click();\n    cy.wait(`@${feedViews.contacts.routeAlias}`);\n\n    // Check if there are any transactions in the friends feed\n\n    cy.get(\"body\").then($body => {\n      // If no transactions are found, skip test with appropriate message\n\n      if ($body.find(\"[data-test=empty-list-header]\").length > 0) {\n        cy.log(\"No transactions found in friends feed. Test skipped.\");\n        return;\n      }\n\n      // Verify all transactions involve at least one contact\n\n      cy.getBySel(\"transaction-item\").each($el => {\n        // Get sender and receiver IDs from the transaction item\n\n        cy.wrap($el).within(() => {\n          // For each transaction, check if it involves at least one contact\n\n          // We look for data-test attributes that start with \"transaction-sender-\" or \"transaction-receiver-\"\n\n          cy.get(\"[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']\").should(\"exist\").then($participants => {\n            // Extract user IDs from the data-test attributes\n\n            const participantIds = Array.from($participants).map(el => {\n              const dataTest = el.getAttribute(\"data-test\");\n              return dataTest ? dataTest.split(\"-\")[2] : \"\";\n            });\n\n            // At least one participant should be in the contact list\n\n            const involvesContact = participantIds.some(id => contactIds.includes(id));\n            expect(involvesContact, \"Transaction involves at least one contact\").to.be.true;\n          });\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => {\n// Visit the home page which shows the default feed\n\n  cy.visit(\"/\");\n\n  // Wait for transactions to load\n\n  cy.wait(\"@publicTransactions\");\n\n  // Check that transaction items are rendering\n\n  cy.getBySel(\"transaction-item\").should(\"have.length.gt\", 0);\n\n  // Verify different transaction status variations are displayed correctly\n\n  cy.getBySel(\"transaction-item\").then($items => {\n    // Look for different transaction statuses\n\n    const hasCompleted = $items.find(\"[data-test*='transaction-status-COMPLETED']\").length > 0;\n    const hasPending = $items.find(\"[data-test*='transaction-status-PENDING']\").length > 0;\n    const hasRequested = $items.find(\"[data-test*='transaction-status-REQUESTED']\").length > 0;\n\n    // We should have at least one type of transaction status displayed\n\n    expect(hasCompleted || hasPending || hasRequested).to.be.true;\n  });\n\n  // Check for transaction payment and request variations\n\n  cy.getBySel(\"transaction-item\").then($items => {\n    // Look for payment vs request variations\n\n    const hasPayment = $items.find(\"[data-test*='transaction-payment']\").length > 0;\n    const hasRequest = $items.find(\"[data-test*='transaction-request']\").length > 0;\n\n    // There should be at least one payment or request type\n\n    expect(hasPayment || hasRequest).to.be.true;\n  });\n\n  // Verify transaction amount is displayed properly\n\n  cy.getBySel(\"transaction-item\").first().find(\"[data-test*='transaction-amount']\").should(\"be.visible\");\n\n  // Verify transaction description is displayed\n\n  cy.getBySel(\"transaction-item\").first().find(\"[data-test*='transaction-description']\").should(\"be.visible\");\n });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// Visit the main page\n\n  cy.visit(\"/\");\n  cy.wait(\"@publicTransactions\");\n\n  // Click on date range filter button to open the modal\n\n  cy.getBySel(\"date-range-filter-button\").click();\n\n  // Verify that date range modal is open\n\n  cy.getBySel(\"date-range-filter-modal\").should(\"be.visible\");\n\n  // Click the close button on the modal\n\n  cy.getBySel(\"date-range-filter-modal-close\").click();\n\n  // Verify that date range modal is closed\n\n  cy.getBySel(\"date-range-filter-modal\").should(\"not.exist\");\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => {\n// Navigate to personal feed\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(`@${feedViews.personal.routeAlias}`);\n\n  // Get user's ID for later comparison\n\n  const userId = ctx.user!.id;\n\n  // Check if there are any transactions\n\n  cy.getBySel(\"transaction-item\").then($items => {\n    if ($items.length === 0) {\n      cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n      cy.log(\"No transactions found in personal feed. Test skipped.\");\n      return;\n    }\n\n    // For each transaction in the personal feed, verify it involves the current user\n\n    cy.getBySel(\"transaction-item\").each($el => {\n      // Check if the transaction sender or receiver is the current user\n\n      cy.wrap($el).within(() => {\n        cy.get(\"[data-test*='transaction-sender-'], [data-test*='transaction-receiver-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n          // Extract the user ID from the data-test attribute\n\n          const transactionUserId = dataTest!.split(\"-\")[2];\n\n          // Assert that the transaction involves the current user\n\n          expect(transactionUserId).to.equal(userId);\n        });\n      });\n    });\n\n    // Alternative verification: use database to confirm all transactions involve the user\n\n    cy.database(\"filter\", \"transactions\", {\n      $or: [{\n        senderId: userId\n      }, {\n        receiverId: userId\n      }]\n    }).then((userTransactions: Transaction[]) => {\n      // Check that number of user's transactions matches what's displayed in the feed\n\n      cy.getBySel(\"transaction-item\").should(\"have.length\", userTransactions.length);\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// Get a transaction ID from the personal transaction list\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for the transaction detail to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on a transaction detail page by checking the URL\n\n  cy.url().should(\"include\", \"/transaction/\");\n\n  // Check that the navigation tabs container exists but is not visible\n\n  cy.getBySel(\"nav-transaction-tabs\").should(\"not.be.visible\");\n\n  // Alternative check: verify tabs are not in the DOM when in transaction detail view\n\n  cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Find a transaction in the personal feed\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Get the initial like count\n\n  cy.getBySel(\"transaction-like-count\").invoke(\"text\").then(text => {\n    const initialLikeCount = parseInt(text.trim()) || 0;\n\n    // Click the like button\n\n    cy.getBySel(\"transaction-like-button\").click();\n\n    // Wait for the like action to complete\n\n    cy.wait(\"@updateTransaction\");\n\n    // Verify the like count has increased\n\n    cy.getBySel(\"transaction-like-count\").should(\"contain\", initialLikeCount + 1);\n\n    // Verify the like button appears selected/active\n\n    cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"MuiButton-contained\").and(\"not.have.class\", \"MuiButton-outlined\");\n  });\n\n  // Navigate back to transaction list\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify we're back on the transactions list\n\n  cy.getBySel(\"transaction-list\").should(\"be.visible\");\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// Assuming we need to navigate to a specific transaction first\n\n  // We'll use the transaction request that was found in beforeEach\n\n  if (!ctx.transactionRequest) {\n    cy.log('No pending transaction request found for testing');\n    return;\n  }\n\n  // Click on the pending transaction to view its details\n\n  cy.getBySel(\"transaction-item\").contains(`$${ctx.transactionRequest.amount}`).first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Type a comment in the comment input field\n\n  const commentText = \"This is a test comment on the transaction\";\n  cy.getBySel(\"transaction-comment-input\").should(\"be.visible\").type(commentText);\n\n  // Submit the comment\n\n  cy.getBySel(\"transaction-comment-submit\").should(\"be.visible\").click();\n\n  // Wait for the comment to be submitted and the transaction to refresh\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify that the comment appears in the transaction comments section\n\n  cy.getBySel(\"transaction-comment-list\").should(\"contain\", commentText);\n\n  // Verify the comment shows the current user's name\n\n  cy.getBySel(\"transaction-comment-list\").should(\"contain\", ctx.authenticatedUser?.firstName).should(\"contain\", ctx.authenticatedUser?.lastName);\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// First, make sure we have a transaction request to work with\n\n  cy.wrap(ctx.transactionRequest).should(\"exist\");\n\n  // Find and click on the pending transaction request\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest?.description}\")`).first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify the transaction details show pending status\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"pending\");\n  cy.getBySel(\"transaction-accept-request\").should(\"be.visible\");\n\n  // Accept the transaction request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n\n  // Wait for the transaction to be updated\n\n  cy.wait(\"@updateTransaction\");\n\n  // Verify transaction is now complete\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"complete\");\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"Complete\");\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Check if we have a pending transaction request to work with\n\n  cy.wrap(ctx.transactionRequest).should(\"exist\").then(() => {\n    // Navigate to the transaction detail view\n\n    cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n    cy.wait(\"@getTransaction\");\n\n    // Verify the transaction request status is pending before rejection\n\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n    cy.getBySel(\"transaction-status\").should(\"contain\", \"pending\");\n    cy.getBySel(\"transaction-action-button\").should(\"have.length\", 2);\n\n    // Click the reject button\n\n    cy.getBySel(\"transaction-reject-request\").click();\n\n    // Wait for the update request to complete\n\n    cy.wait(\"@updateTransaction\");\n\n    // Verify the transaction status is now rejected\n\n    cy.getBySel(\"transaction-status\").should(\"contain\", \"rejected\");\n    cy.getBySel(\"transaction-action-button\").should(\"not.exist\");\n\n    // Verify rejection appears in activity feed\n\n    cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"rejected\");\n  });\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// Find a completed transaction in the personal transactions list\n\n  cy.database(\"create\", \"transactions\", {\n    receiverId: ctx.authenticatedUser?.id,\n    senderId: ctx.authenticatedUser?.id !== \"t45AiwidW\" ? \"t45AiwidW\" : \"qywYp6hS0U\",\n    // Use a different user ID\n\n    status: \"complete\",\n    requestStatus: \"approved\",\n    requestResolvedAt: new Date().toISOString(),\n    description: \"Completed transaction request\",\n    amount: 50,\n    transactionType: \"request\"\n  }).then(completedTransaction => {\n    // Navigate to the personal transactions page\n\n    cy.getBySel(\"nav-personal-tab\").click();\n    cy.wait(\"@personalTransactions\");\n\n    // Find and click on the completed transaction\n\n    cy.getBySel(\"transaction-item\").contains(completedTransaction.description).click();\n\n    // Wait for transaction details to load\n\n    cy.wait(\"@getTransaction\");\n\n    // Verify we're viewing the correct transaction\n\n    cy.getBySel(\"transaction-detail-header\").should(\"contain\", completedTransaction.description);\n\n    // Verify the transaction status is complete\n\n    cy.getBySel(\"transaction-status\").should(\"contain\", \"complete\");\n\n    // Verify accept button is not present\n\n    cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n\n    // Verify reject button is not present\n\n    cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n  });\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Verify that the user settings form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify that all required form fields are present and visible\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n  // Verify the submit button exists\n\n  cy.getBySel(\"user-settings-submit\").should(\"be.visible\");\n\n  // Verify that the form fields contain values (they should be pre-filled with user data)\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\");\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// Clear all form fields\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Submit the form with empty fields to trigger validation errors\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify that error messages appear for required fields\n\n  cy.contains(\"Enter a first name\").should(\"be.visible\");\n  cy.contains(\"Enter a last name\").should(\"be.visible\");\n  cy.contains(\"Enter an email address\").should(\"be.visible\");\n  cy.contains(\"Enter a phone number\").should(\"be.visible\");\n\n  // Fill in fields with valid data except for phone number\n\n  cy.getBySel(\"user-settings-firstName-input\").type(\"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").type(\"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").type(\"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(\"abc\"); // Invalid phone number format\n\n  // Submit the form again\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify that only phone number error is displayed\n\n  cy.contains(\"Enter a first name\").should(\"not.exist\");\n  cy.contains(\"Enter a last name\").should(\"not.exist\");\n  cy.contains(\"Enter an email address\").should(\"not.exist\");\n  cy.contains(\"Phone number is not valid\").should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// Clear the existing form fields\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Fill in the form with updated user information\n\n  cy.getBySel(\"user-settings-firstName-input\").type(\"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").type(\"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").type(\"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(\"6155551212\");\n\n  // Submit the form\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Wait for the update request to complete\n\n  cy.wait(\"@updateUser\");\n\n  // Verify a success alert is displayed\n\n  cy.getBySel(\"user-settings-form-success\").should(\"be.visible\");\n\n  // Alternative success message selector if the above doesn't exist\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"User Settings Updated\");\n\n  // Reload the page to ensure changes were persisted\n\n  cy.reload();\n\n  // Verify the form fields contain the updated values\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", \"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", \"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", \"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", \"6155551212\");\n\n  // Verify the updated name appears in the sidenav (if applicable)\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", \"New First Name New Last Name\");\n });\r\n});\r\n"
  },
  "claude_3_7_sonnet_thinking": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// should redirect unauthenticated user to signin page\r\r\ncy.visit(\"/personal\"); // Attempt to access a protected page\r\r\n\r\r\n// Verify we're redirected to the signin page\r\r\ncy.location(\"pathname\").should(\"equal\", \"/signin\");\r\r\n\r\r\n// Verify signin page elements are visible\r\r\ncy.getBySel(\"signin-title\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// should redirect to the home page after login\r\r\nit(\"should redirect to the home page after login\", () => {\r\r\n  <generated_code>\r\r\n  // Visit the signin page\r\r\n  cy.visit(\"/signin\");\r\r\n  \r\r\n  // Enter valid login credentials\r\r\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\r\r\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\r\r\n  \r\r\n  // Submit the login form\r\r\n  cy.getBySel(\"signin-submit\").click();\r\r\n  \r\r\n  // Assert that we are redirected to the home page after successful login\r\r\n  cy.location(\"pathname\").should(\"equal\", \"/\");\r\r\n  \r\r\n  // Verify that elements indicating successful login are present\r\r\n  cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\r\r\n  </generated_code>\r\r\n});\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter the valid username and password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Check the \"Remember Me\" checkbox to enable 30-day session\n\n  cy.getBySel(\"signin-remember-me\").check();\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify successful login by checking we're on the home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Check that the session cookie exists and has approximately 30 days expiration\n\n  cy.getCookie(\"connect.sid\").then(cookie => {\n    // Convert cookie expiry timestamp to date\n\n    const cookieExpirationDate = new Date(cookie!.expiry! * 1000);\n    const now = new Date();\n\n    // Calculate difference in days between now and cookie expiration\n\n    const daysDifference = Math.round((cookieExpirationDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    // Assert the cookie expires approximately 30 days from now (with 1 day margin)\n\n    expect(daysDifference).to.be.closeTo(30, 1);\n  });\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Fill out the signup form with user information\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n  // Submit the signup form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Wait for the signup API call to complete\n\n  cy.wait(\"@signup\");\n\n  // Should be redirected to the onboarding page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Create a bank account during onboarding\n\n  cy.getBySel(\"user-onboarding-next\").click();\n\n  // Fill in bank account details\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for bank account creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Complete onboarding\n\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-done\").click();\n\n  // Verify logged-in state\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n\n  // Logout\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Verify logged-out state - should be redirected to signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // 1. Test empty form submission\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify field validation errors are shown\n\n  cy.get(\"#username-helper-text\").should(\"be.visible\").and(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"be.visible\").and(\"contain\", \"Password is required\");\n\n  // 2. Test invalid username with valid password\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Wait for login attempt to complete\n\n  cy.wait(\"@login\");\n\n  // Verify error message for invalid username\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Clear fields for next test\n\n  cy.getBySel(\"signin-username\").clear();\n  cy.getBySel(\"signin-password\").clear();\n\n  // 3. Test valid username with invalid password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"INVALID\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Wait for login attempt to complete\n\n  cy.wait(\"@login\");\n\n  // Verify error message for invalid password\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Test 1: Submit empty form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Check for required field error messages\n\n  cy.get(\"#firstName-helper-text\").should(\"contain\", \"First Name is required\");\n  cy.get(\"#lastName-helper-text\").should(\"contain\", \"Last Name is required\");\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Enter your password\");\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Confirm your password\");\n\n  // Test 2: Password mismatch\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"New\" + \"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"INVALID\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Check password mismatch error\n\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Password does not match\");\n\n  // Test 3: Existing username (clear fields for fresh test)\n\n  cy.reload();\n\n  // Fill form with existing username from seed data\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n  cy.getBySel(\"signup-submit\").click();\n\n  // Check for username exists error\n\n  cy.wait(\"@signup\");\n  cy.getBySel(\"signup-error\").should(\"be.visible\").and(\"contain\", \"Username already exists\");\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// should error for an invalid user\r\r\ncy.visit(\"/signin\");\r\r\n\r\r\n// Enter an invalid username with a valid password\r\r\ncy.getBySel(\"signin-username\").type(\"invalidUserName\");\r\r\ncy.getBySel(\"signin-password\").type(\"s3cret\");\r\r\n\r\r\n// Submit the login form\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\n\r\r\n// Verify that an error message appears\r\r\ncy.getBySel(\"signin-error\")\r\r\n  .should(\"be.visible\")\r\r\n  .and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// Visit signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid username\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n  // Enter invalid password\n\n  cy.getBySel(\"signin-password\").type(\"INVALID\");\n\n  // Submit the form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// Navigate to the bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click on the create new bank account button\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill out the bank account form with the provided information\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for the GraphQL mutation to complete\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the new bank account was created and appears in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"be.visible\");\n  cy.contains(\"The Best Bank\").should(\"be.visible\");\n  cy.contains(`Account Number: ${\"123456789\"}`).should(\"be.visible\");\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// Navigate to the bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click on the create button to open the form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Test 1: Submit empty form to check for required field errors\n\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.getBySel(\"bankaccount-bankName-error\").should(\"be.visible\").and(\"contain\", \"Enter a bank name\");\n  cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\").and(\"contain\", \"Enter a valid routing number\");\n  cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\").and(\"contain\", \"Enter a valid account number\");\n\n  // Test 2: Test partial form completion (only bank name)\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Bank name error should disappear, but other errors remain\n\n  cy.getBySel(\"bankaccount-bankName-error\").should(\"not.exist\");\n  cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\");\n  cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\");\n\n  // Test 3: Test invalid routing number format (too short)\n\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"12345\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\").and(\"contain\", \"Must contain a valid routing number\");\n\n  // Test 4: Test invalid account number format (too short)\n\n  cy.getBySel(\"bankaccount-routingNumber-input\").clear();\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"12345\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\").and(\"contain\", \"Must contain a valid account number\");\n\n  // Test 5: Verify form submits successfully when all fields are filled correctly\n\n  cy.getBySel(\"bankaccount-accountNumber-input\").clear();\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify we're no longer on the form page or that success is shown\n\n  cy.getBySel(\"bankaccount-list\").should(\"be.visible\");\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\ncy.getBySel(\"sidenav-bankaccounts\").click();\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Check if any bank accounts exist and create one if needed\n\n  cy.getBySel(\"bankaccount-list\").then($list => {\n    const hasAccounts = $list.find(\"[data-test^='bankaccount-item']\").length > 0;\n    if (!hasAccounts) {\n      // Create a bank account first\n\n      cy.getBySel(\"bankaccount-new\").click();\n      cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n      cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n      cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n      cy.getBySel(\"bankaccount-submit\").click();\n      cy.wait(\"@gqlCreateBankAccountMutation\");\n\n      // Return to the bank accounts list\n\n      cy.getBySel(\"sidenav-bankaccounts\").click();\n      cy.wait(\"@gqlListBankAccountQuery\");\n    }\n\n    // Store account count before deletion\n\n    cy.getBySel(\"bankaccount-list\").find(\"[data-test^='bankaccount-item']\").its(\"length\").as(\"initialCount\");\n\n    // Find and delete the first bank account\n\n    cy.getBySel(\"bankaccount-list\").find(\"[data-test^='bankaccount-item']\").first().within(() => {\n      cy.getBySel(\"bankaccount-delete\").click();\n    });\n\n    // Wait for the delete mutation to complete\n\n    cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n    // Verify success notification\n\n    cy.contains(\"deleted\").should(\"be.visible\");\n\n    // Verify the account was removed from the list\n\n    cy.get(\"@initialCount\").then(initialCount => {\n      if (initialCount === 1) {\n        // If it was the only account, check for empty state\n\n        cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n      } else {\n        // Otherwise verify count decreased by 1\n\n        cy.getBySel(\"bankaccount-list\").find(\"[data-test^='bankaccount-item']\").should(\"have.length\", Number(initialCount) - 1);\n      }\n    });\n  });\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Wait for bank accounts data to load\n\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Check if there are any bank accounts and delete them if necessary\n\n  cy.get(\"body\").then($body => {\n    if ($body.find('[data-test=\"bankaccount-item\"]').length > 0) {\n      // Delete all existing bank accounts\n\n      cy.getBySel(\"bankaccount-delete\").each($el => {\n        cy.wrap($el).click();\n        cy.wait(\"@gqlDeleteBankAccountMutation\");\n      });\n\n      // Refresh the page to see empty state\n\n      cy.reload();\n      cy.wait(\"@gqlListBankAccountQuery\");\n    }\n\n    // Verify the empty state is displayed\n\n    cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\n    cy.getBySel(\"empty-list-header\").should(\"exist\");\n\n    // Verify the onboarding modal is visible\n\n    cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n  });\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out payment details using the first payment transaction\n\n  cy.getBySel(\"amount-input\").type(\"35\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n  // Submit the payment\n\n  cy.getBySelLike(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify transaction was created successfully\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Verify we're back on the personal transactions page\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n\n  // Verify the transaction appears in the list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\").and(\"contain\", \"$35\");\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter the amount for the request\n\n  cy.getBySel(\"amount-input\").type(\"95\");\n\n  // Enter the description for the request\n\n  cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n  // Switch to the request mode (instead of payment)\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify the request was successfully created\n\n  cy.getBySel(\"snackbar-success-content\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Verify the transaction appears in the personal transactions list\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Check that the most recent transaction has our description\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Fancy Hotel 🏨\").and(\"contain\", \"$95\");\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the user from the list\n\n  cy.getBySel(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n  // Test Case 1: Submit without entering any data\n\n  // Try to submit without entering an amount or description\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error messages are displayed for required fields\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\").should(\"contain\", \"Please enter a valid amount\");\n  cy.getBySel(\"transaction-create-description-error\").should(\"be.visible\").should(\"contain\", \"Please enter a note\");\n\n  // Test Case 2: Submit with invalid amount\n\n  // Enter zero amount (invalid)\n\n  cy.getBySel(\"amount-input\").type(\"0\");\n\n  // Enter valid description\n\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction\");\n\n  // Try to submit with invalid amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify amount error message is still displayed\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\");\n\n  // Test Case 3: Submit with negative amount\n\n  // Clear previous amount and enter negative amount\n\n  cy.getBySel(\"amount-input\").clear().type(\"-5\");\n\n  // Try to submit with negative amount\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify amount error message is displayed\n\n  cy.getBySel(\"transaction-create-amount-error\").should(\"be.visible\");\n\n  // Test Case 4: Clear description and try to submit\n\n  // Enter valid amount\n\n  cy.getBySel(\"amount-input\").clear().type(\"10\");\n\n  // Clear description\n\n  cy.getBySel(\"transaction-create-description-input\").clear();\n\n  // Try to submit without description\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify description error message is displayed\n\n  cy.getBySel(\"transaction-create-description-error\").should(\"be.visible\");\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// Get payment transaction data from user info\n\n  const paymentAmount = \"35\";\n  const paymentDescription = \"Sushi dinner 🍣\";\n\n  // Store receiver's initial balance\n\n  let receiverInitialBalance;\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then(user => {\n    receiverInitialBalance = user.balance;\n  });\n\n  // Store sender's initial balance\n\n  let senderInitialBalance;\n  cy.getBySel(\"sidenav-user-balance\").then($balance => {\n    const balanceText = $balance.text().replace(/[^0-9.-]+/g, \"\");\n    senderInitialBalance = parseFloat(balanceText);\n  });\n\n  // Navigate to new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the contact user\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment amount and description\n\n  cy.getBySel(\"amount-input\").type(paymentAmount);\n  cy.getBySel(\"transaction-create-description-input\").type(paymentDescription);\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify payment was successful\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", paymentDescription);\n\n  // Verify sender's balance decreased\n\n  cy.getBySel(\"sidenav-user-balance\").then($balance => {\n    const balanceText = $balance.text().replace(/[^0-9.-]+/g, \"\");\n    const currentBalance = parseFloat(balanceText);\n    expect(currentBalance).to.be.lessThan(senderInitialBalance);\n  });\n\n  // Log out and log in as receiver\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Go to personal transactions tab\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify transaction appears in receiver's list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", paymentDescription).and(\"contain\", `$${paymentAmount}`).and(\"contain\", \"received\");\n\n  // Verify receiver's balance increased\n\n  cy.getBySel(\"sidenav-user-balance\").then($balance => {\n    const balanceText = $balance.text().replace(/[^0-9.-]+/g, \"\");\n    const currentBalance = parseFloat(balanceText);\n    const expectedBalance = receiverInitialBalance / 100 + parseFloat(paymentAmount);\n    expect(currentBalance).to.be.at.least(expectedBalance);\n  });\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// First create a transaction request\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for contact by name\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter request details\n\n  cy.getBySel(\"amount-input\").type(\"95\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n  // Switch to request tab and submit request\n\n  cy.getBySelLike(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify the request was created\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Fancy Hotel 🏨\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"requested\");\n\n  // Logout and login as the contact (receiver of request)\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Go to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Fancy Hotel 🏨\").click();\n\n  // Accept the request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is updated\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"charged you\");\n  cy.getBySel(\"transaction-detail-header\").should(\"not.contain\", \"requested\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// Login as User B first to create a transaction\n\n  cy.loginByXstate(ctx.userB.username);\n  cy.wait(\"@getNotifications\");\n\n  // Create a new transaction as User B (sending to User A)\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-item\").contains(ctx.userA.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for notification\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get the transaction ID from the URL\n\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Log out as User B\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n\n    // Visit the transaction that User B created\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Like the transaction\n\n    cy.getBySel(\"like-button\").click();\n\n    // Verify the like count is updated\n\n    cy.getBySel(\"like-count\").should(\"contain\", \"1\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B again to check notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications page\n\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Verify the notification about the like exists\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Create a transaction between User A and User B\n\n  cy.visit(\"/transaction/new\");\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like notification\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get the transaction ID from the URL\n\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Visit the transaction between User A and User B\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Like the transaction\n\n    cy.getBySel(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Log out as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Check User A's notifications\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.visit(\"/notifications\");\n    cy.wait(\"@getNotifications\");\n\n    // Verify User A received a notification about User C's like\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"liked your transaction\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Check User B's notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.visit(\"/notifications\");\n    cy.wait(\"@getNotifications\");\n\n    // Verify User B received a notification about User C's like\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Find a transaction created by User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userB.id\n  }).then(transaction => {\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n\n    // Visit the transaction\n\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Add a comment to the transaction\n\n    const commentText = \"Great transaction!\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Verify the comment was added\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText);\n\n    // Logout as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Check for notifications\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify notification about the comment\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Login as User A to create a transaction with User B\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Create a new payment to User B\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").first().click();\n  cy.getBySel(\"amount-input\").type(\"75\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Comment test transaction\");\n  cy.getBySelLike(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get transaction ID from URL for later reference\n\n  let transactionId;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop();\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Visit the transaction created by User A\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Add a comment to the transaction\n\n    const commentText = \"This is a test comment from User C\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Verify the comment appears\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText);\n\n    // Log out as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A and check for notification\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"be.visible\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User A received a notification about User C's comment\n\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n\n    // Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B and check for notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"be.visible\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User B received a notification about User C's comment\n\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// User A sends a payment to User B\r\r\nit(\"User A sends a payment to User B\", () => {\r\r\n    <generated_code>\r\r\n    // Login as User A\r\r\n    cy.loginByXstate(ctx.userA.username);\r\r\n    \r\r\n    // Create a new payment transaction to User B\r\r\n    cy.getBySel(\"nav-top-new-transaction\").click();\r\r\n    cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\n    cy.getBySel(\"user-list-item\").first().click();\r\r\n    \r\r\n    // Enter payment amount and description\r\r\n    cy.getBySel(\"amount-input\").type(\"50\");\r\r\n    cy.getBySel(\"transaction-create-description-input\").type(\"Payment from A to B\");\r\r\n    cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n    \r\r\n    // Wait for transaction to be created\r\r\n    cy.wait(\"@createTransaction\");\r\r\n    \r\r\n    // Log out User A\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n    \r\r\n    // Login as User B\r\r\n    cy.loginByXstate(ctx.userB.username);\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    \r\r\n    // Check for notifications\r\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"be.visible\");\r\r\n    cy.getBySel(\"nav-top-notifications-button\").click();\r\r\n    \r\r\n    // Verify the notification content\r\r\n    cy.getBySel(\"notification-list-item\")\r\r\n        .first()\r\r\n        .should(\"contain\", ctx.userA.firstName)\r\r\n        .and(\"contain\", \"paid you\");\r\r\n    </generated_code>\r\r\n});\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\nconst requestAmount = 75;\n  const requestDescription = \"Test payment request\";\n\n  // Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Create a new payment request to User C\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).click();\n\n  // Enter payment request details\n\n  cy.getBySel(\"amount-input\").type(requestAmount.toString());\n  cy.getBySel(\"transaction-create-description-input\").type(requestDescription);\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the request to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Logout User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as User C\n\n  cy.loginByXstate(ctx.userC.username);\n\n  // Wait for notifications to load\n\n  cy.wait(\"@getNotifications\");\n\n  // Check for notification\n\n  cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n  cy.getBySel(\"nav-top-notifications-link\").click();\n\n  // Verify notification content\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\").and(\"contain\", requestDescription);\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// Create a brand new user that won't have notifications\n\n  cy.task(\"db:seed:user\").then((user: User) => {\n    // Login as the new user\n\n    cy.loginByXstate(user.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications\n\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Verify empty state\n\n    cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n    cy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\n\n    // Additional verification that no notification items exist\n\n    cy.getBySel(\"notification-list-item\").should(\"not.exist\");\n  });\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n// Visit the main application page which shows the transaction feed\n\n  cy.visit(\"/\");\n\n  // Wait for transactions to load\n\n  cy.wait([\"@publicTransactions\", \"@notifications\"]);\n\n  // Test behavior based on viewport size\n\n  if (isMobile()) {\n    // For mobile viewport: drawer should be initially closed\n\n    cy.getBySel(\"sidenav-toggle\").should(\"be.visible\");\n    cy.getBySel(\"sidenav\").should(\"have.css\", \"transform\").and(\"include\", \"matrix\");\n\n    // Open the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify drawer is open\n\n    cy.getBySel(\"sidenav\").should(\"be.visible\");\n    cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n\n    // Close the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify drawer is closed again\n\n    cy.getBySel(\"sidenav\").should(\"have.css\", \"transform\").and(\"include\", \"matrix\");\n  } else {\n    // For desktop viewport: navigation should be visible\n\n    cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n    // Desktop has a permanent drawer, so verify key elements are visible\n\n    cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n    cy.getBySel(\"sidenav-home\").should(\"be.visible\");\n    cy.getBySel(\"sidenav-personal\").should(\"be.visible\");\n\n    // Test collapse functionality if available on desktop\n\n    if (Cypress.$('\"[data-test=sidenav-toggle]\"').length > 0) {\n      cy.getBySel(\"sidenav-toggle\").click();\n      cy.getBySel(\"sidenav\").should(\"have.class\", \"MuiDrawer-paperClose\");\n      cy.getBySel(\"sidenav-toggle\").click();\n      cy.getBySel(\"sidenav\").should(\"not.have.class\", \"MuiDrawer-paperClose\");\n    }\n  }\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// Get the user's contacts first\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // Skip test if user has no contacts\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Test skipped.\");\n      return;\n    }\n\n    // Navigate to public feed\n\n    cy.getBySel(\"nav-public-tab\").click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n\n    // Check if there are any transactions in the feed\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test='empty-list-header']\").length > 0) {\n        cy.log(\"No transactions found in public feed. Test skipped.\");\n        return;\n      }\n\n      // Ensure we have transaction items to check\n\n      cy.getBySel(\"transaction-item\").should(\"exist\");\n\n      // Check each of the first 5 items (or fewer if there aren't 5)\n\n      cy.getBySel(\"transaction-item\").each(($el, index) => {\n        // Only check the first 5 items\n\n        if (index >= 5) return false;\n\n        // Get the transaction ID from the element\n\n        cy.wrap($el).invoke(\"attr\", \"data-transaction-id\").then(transactionId => {\n          // Use the database to check if this transaction involves a contact\n\n          cy.database(\"find\", \"transactions\", {\n            id: transactionId\n          }).then(transaction => {\n            // A transaction belongs to a contact if sender or receiver is a contact\n\n            const belongsToContact = contactIds.includes(transaction.senderId) || contactIds.includes(transaction.receiverId);\n            expect(belongsToContact).to.be.true;\n          });\n        });\n      }).then($items => {\n        // If we have fewer than 5 items, log that info\n\n        if ($items.length < 5) {\n          cy.log(`Only ${$items.length} transaction items found in the feed.`);\n        }\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// Navigate to the contacts (friends) feed tab\n\n  cy.getBySel(feedViews.contacts.tab).click();\n  cy.wait(`@${feedViews.contacts.routeAlias}`);\n\n  // Get the user's contacts and their IDs\n\n  cy.database(\"find\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    // Extract contact IDs\n\n    const contactIds = contacts.map(contact => contact.contactUserId);\n\n    // If user has no contacts, skip the test\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Test skipped.\");\n      return;\n    }\n\n    // Check if there are any transactions in the friends feed\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test=empty-list-header]\").length > 0) {\n        cy.log(\"No transactions found in friends feed. Test skipped.\");\n        return;\n      }\n\n      // Verify each transaction involves at least one contact\n\n      cy.getBySel(\"transaction-item\").each($transaction => {\n        // For each transaction, get the sender and receiver IDs\n\n        cy.wrap($transaction).within(() => {\n          // Get the sender and receiver IDs from the data-test attributes\n\n          cy.get(\"[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']\").then($elements => {\n            // Extract the user IDs from the data-test attributes\n\n            const transactionUserIds = Array.from($elements).map(el => {\n              const dataTest = el.getAttribute(\"data-test\");\n\n              // Extract the user ID from the data-test attribute\n\n              return dataTest?.split(\"-\")[2];\n            });\n\n            // Check if at least one user in the transaction is a contact\n\n            // Transaction should involve either a contact or the current user\n\n            const belongsToContactOrUser = transactionUserIds.some(id => id === ctx.user!.id || contactIds.includes(id));\n\n            // Assert that the transaction belongs to a contact or the current user\n\n            expect(belongsToContactOrUser).to.be.true;\n          });\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => {\n// Visit the home page which shows transaction feed\n\n  cy.visit(\"/\");\n  cy.wait(\"@publicTransactions\");\n\n  // Check that transaction items are visible\n\n  cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\n\n  // Verify different transaction item components are displayed\n\n  cy.getBySel(\"transaction-item\").first().within(() => {\n    // Check for sender/receiver avatars and names\n\n    cy.getBySel(\"transaction-avatar\").should(\"be.visible\");\n    cy.getBySel(\"transaction-sender\").should(\"be.visible\");\n    cy.getBySel(\"transaction-action\").should(\"be.visible\");\n    cy.getBySel(\"transaction-receiver\").should(\"be.visible\");\n\n    // Check for amount and payment details\n\n    cy.getBySel(\"transaction-amount\").should(\"be.visible\");\n    cy.getBySel(\"transaction-description\").should(\"be.visible\");\n\n    // Check for date/time information\n\n    cy.getBySel(\"transaction-created-date\").should(\"be.visible\");\n  });\n\n  // Check for different transaction states if they exist\n\n  cy.getBySel(\"transaction-item\").then($items => {\n    if ($items.length > 1) {\n      // Try to find different transaction types (payment vs. request)\n\n      cy.getBySel(\"transaction-payment\").should(\"exist\");\n\n      // Some transactions might be requests instead of payments\n\n      cy.getBySel(\"transaction-request\").should(\"exist\");\n    }\n  });\n });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// Navigate to the public feed (home page)\n\n  cy.visit(\"/\");\n  cy.wait(`@${feedViews.public.routeAlias}`);\n\n  // Open the date range filter\n\n  cy.getBySel(\"date-range-filter\").click();\n\n  // Verify the filter modal is visible\n\n  cy.getBySel(\"date-range-filter-modal\").should(\"be.visible\");\n\n  // Close the modal using the close button\n\n  cy.getBySel(\"date-range-filter-modal-close\").click();\n\n  // Verify the modal is closed and no longer visible\n\n  cy.getBySel(\"date-range-filter-modal\").should(\"not.exist\");\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by date range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => {\n// Navigate to the personal transactions feed\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(`@${feedViews.personal.routeAlias}`);\n\n  // Ensure transactions are loaded\n\n  cy.getBySel(\"transaction-item\").should(\"exist\");\n\n  // Check if we have any transactions\n\n  cy.get(\"body\").then($body => {\n    // If there are no transactions (empty state), skip the test\n\n    if ($body.find(\"[data-test='empty-list-header']\").length > 0) {\n      cy.log(\"No transactions found in personal feed. Test skipped.\");\n      return;\n    }\n\n    // Get the current user's ID for comparison\n\n    const userId = ctx.user!.id;\n\n    // Check all transactions in the personal feed\n\n    cy.getBySel(\"transaction-item\").each($el => {\n      // For each transaction, verify it involves the current user\n\n      // (either as sender or receiver)\n\n      cy.wrap($el).within(() => {\n        cy.get(\"[data-test*='transaction-sender-'], [data-test*='transaction-receiver-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n          const transactionUserId = dataTest!.split(\"-\")[2];\n\n          // Assert that this transaction involves the current user\n\n          expect(transactionUserId === userId || $el.find(`[data-test=\"transaction-sender-${userId}\"]`).length > 0 || $el.find(`[data-test=\"transaction-receiver-${userId}\"]`).length > 0).to.be.true;\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// First check that we see the navigation tabs on the main page\n\n  cy.getBySel(\"nav-public-tab\").should(\"be.visible\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"be.visible\");\n  cy.getBySel(\"nav-personal-tab\").should(\"be.visible\");\n\n  // Now navigate to a specific transaction detail page using the transaction ID from context\n\n  cy.get(\"@testTransaction\").then(transaction => {\n    // If we don't have a transaction in context yet, find one from the list\n\n    if (!ctx.transactionRequest) {\n      cy.getBySel(\"transaction-item\").first().click();\n    } else {\n      // Navigate to the specific transaction detail page\n\n      cy.visit(`/transaction/${ctx.transactionRequest.id}`);\n    }\n    cy.wait(\"@getTransaction\");\n\n    // Verify transaction details are displayed\n\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n\n    // Verify that navigation tabs are hidden on the transaction detail page\n\n    cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n\n    // Alternative verification if tabs might exist but be hidden\n\n    cy.getBySel(\"transaction-list-filter-tabs\").should(\"not.exist\");\n  });\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Intercept the POST request for liking a transaction\n\n  cy.intercept(\"POST\", \"/likes/*\").as(\"postLike\");\n\n  // Find and click on a transaction to view its details\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Find and click on the like button\n\n  cy.getBySel(\"transaction-like-button\").click();\n\n  // Wait for the like action to complete\n\n  cy.wait(\"@postLike\");\n\n  // Verify the transaction has been liked - the button should now show as liked\n\n  cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"MuiButton-containedPrimary\");\n\n  // Verify the like count has increased\n\n  cy.getBySel(\"transaction-like-count\").should(\"be.visible\");\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// Intercept comments API request\n\n  cy.intercept(\"POST\", \"/comments\").as(\"postComment\");\n\n  // First, find and click on the pending transaction request to view its details\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(${ctx.transactionRequest?.description})`).first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on the transaction detail view\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n\n  // Create a test comment\n\n  const testComment = \"This is a test comment for the transaction\";\n\n  // Type the comment in the comment input field\n\n  cy.getBySel(\"comment-input\").type(testComment);\n\n  // Submit the comment\n\n  cy.getBySel(\"comment-submit\").click();\n\n  // Wait for the comment to be posted to the server\n\n  cy.wait(\"@postComment\");\n\n  // Verify the comment appears in the list of comments\n\n  cy.getBySel(\"comments-list\").should(\"contain\", testComment);\n\n  // Verify user information appears with the comment\n\n  cy.getBySel(\"comment-username\").first().should(\"contain\", ctx.authenticatedUser?.username);\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// Find and click on the pending transaction request\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest.description}\")`).first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify it's a pending request before accepting\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"pending\");\n\n  // Verify the accept button is visible\n\n  cy.getBySel(\"transaction-accept-request\").should(\"be.visible\");\n\n  // Click the accept button\n\n  cy.getBySel(\"transaction-accept-request\").click();\n\n  // Wait for the update to complete\n\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status has changed to \"complete\"\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"complete\");\n\n  // Verify the accept button is no longer visible\n\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Skip test if no pending transaction request is found\n\n  if (!ctx.transactionRequest) {\n    cy.log(\"No pending transaction request found. Skipping test.\");\n    return;\n  }\n\n  // Find and click on the pending transaction request in the list\n\n  cy.getBySel(\"transaction-item\").contains(ctx.transactionRequest.description || \"\").first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify the transaction details page shows a pending request\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"pending\");\n\n  // Click the reject button\n\n  cy.getBySel(\"transaction-reject-request\").click();\n\n  // Wait for the update transaction API call to complete\n\n  cy.wait(\"@updateTransaction\");\n\n  // Assert the transaction status is updated to reflect rejection\n\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"rejected\");\n\n  // Navigate back to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify the transaction now shows as rejected in the list\n\n  if (ctx.transactionRequest.description) {\n    cy.getBySel(\"transaction-item\").contains(ctx.transactionRequest.description).parent().should(\"contain\", \"rejected\");\n  }\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// First, try to find a completed transaction request\n\n  cy.database(\"find\", \"transactions\", {\n    receiverId: ctx.authenticatedUser.id,\n    status: \"complete\",\n    requestStatus: \"accepted\" // This indicates it was a request that was accepted\n  }).then((completedRequest: Transaction) => {\n    if (completedRequest) {\n      // If we found a completed request, navigate to it\n\n      cy.getBySel(\"transaction-item\").filter(`:contains(\"${completedRequest.description}\")`).first().click();\n\n      // Wait for transaction details to load\n\n      cy.wait(\"@getTransaction\");\n\n      // Verify that accept/reject buttons are not displayed\n\n      cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n      cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n    } else if (ctx.transactionRequest) {\n      // If no completed request exists but we have a pending request in context\n\n      // Navigate to the pending request\n\n      cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest.description}\")`).first().click();\n\n      // Wait for transaction details to load\n\n      cy.wait(\"@getTransaction\");\n\n      // Accept the request to complete it\n\n      cy.getBySel(\"transaction-accept-request\").click();\n      cy.wait(\"@updateTransaction\");\n\n      // Reload the page to ensure we're seeing the updated state\n\n      cy.reload();\n      cy.wait(\"@getTransaction\");\n\n      // Verify that accept/reject buttons are no longer displayed\n\n      cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n      cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n    } else {\n      // If no request transaction is available, skip the test\n\n      cy.log(\"No transaction request found to test with - skipping test\");\n      this.skip();\n    }\n  });\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Verify the form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify all form fields are visible\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n  // Verify submit button is present\n\n  cy.getBySel(\"user-settings-submit\").should(\"be.visible\");\n\n  // Optional: Verify form fields contain expected values from the current user\n\n  // Note: This depends on what data is available in the seeded user\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-email-input\").should(\"not.have.value\", \"\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"not.have.value\", \"\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// Clear all form fields\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Submit form with empty fields to trigger validation errors\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify error messages for required fields\n\n  cy.get(\"form\").contains(/first name is required|enter a first name/i).should(\"be.visible\");\n  cy.get(\"form\").contains(/last name is required|enter a last name/i).should(\"be.visible\");\n  cy.get(\"form\").contains(/email is required|enter an email|valid email/i).should(\"be.visible\");\n  cy.get(\"form\").contains(/phone number is required|enter a phone number/i).should(\"be.visible\");\n\n  // Test specific field validation - Invalid email format\n\n  cy.getBySel(\"user-settings-firstName-input\").clear().type(\"Test\");\n  cy.getBySel(\"user-settings-lastName-input\").clear().type(\"User\");\n  cy.getBySel(\"user-settings-email-input\").clear().type(\"invalid-email\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"6155551212\");\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify invalid email error\n\n  cy.get(\"form\").contains(/valid email|email format/i).should(\"be.visible\");\n\n  // Test specific field validation - Invalid phone number\n\n  cy.getBySel(\"user-settings-firstName-input\").clear().type(\"Test\");\n  cy.getBySel(\"user-settings-lastName-input\").clear().type(\"User\");\n  cy.getBySel(\"user-settings-email-input\").clear().type(\"valid@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"abc\");\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify invalid phone number error\n\n  cy.get(\"form\").contains(/phone number is not valid|invalid phone/i).should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// Define user information for updating\n\n  const userInfo = {\n    firstName: \"New First Name\",\n    lastName: \"New Last Name\",\n    email: \"email@email.com\",\n    phoneNumber: \"6155551212\"\n  };\n\n  // Clear existing field values\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Fill form with new user information\n\n  cy.getBySel(\"user-settings-firstName-input\").type(userInfo.firstName);\n  cy.getBySel(\"user-settings-lastName-input\").type(userInfo.lastName);\n  cy.getBySel(\"user-settings-email-input\").type(userInfo.email);\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(userInfo.phoneNumber);\n\n  // Submit form to update settings\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Wait for update request to complete\n\n  cy.wait(\"@updateUser\");\n\n  // Reload page to verify changes persisted\n\n  cy.reload();\n\n  // Verify form fields show updated values\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", userInfo.firstName);\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", userInfo.lastName);\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", userInfo.email);\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", userInfo.phoneNumber);\n });\r\n});\r\n"
  },
  "claude_sonnet_4": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// should redirect unauthenticated user to signin page\r\r\ncy.visit(\"/\");\r\r\ncy.url().should(\"include\", \"/signin\");\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid login credentials\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify successful login by checking redirection to home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Verify user is logged in by checking for user elements in the sidebar\n\n  cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in login credentials\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Check the remember me checkbox\n\n  cy.getBySel(\"signin-remember-me\").check();\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify successful login by checking we're redirected to home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Verify the session cookie exists and has approximately 30 days expiration\n\n  cy.getCookie(\"connect.sid\").then(cookie => {\n    expect(cookie).to.exist;\n    if (cookie && cookie.expiry) {\n      const cookieExpirationDate = new Date(cookie.expiry * 1000);\n      const now = new Date();\n      const daysDifference = Math.round((cookieExpirationDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n      // The cookie should expire approximately 30 days from now (give or take a day for timing)\n\n      expect(daysDifference).to.be.closeTo(30, 1);\n    }\n  });\n\n  // Reload the page to verify session persistence\n\n  cy.reload();\n\n  // Should still be logged in (not redirected to signin)\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n  cy.getBySel(\"sidenav-user-full-name\").should(\"be.visible\");\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// Step 1: Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Step 2: Fill out the signup form with user information\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n  // Step 3: Submit the signup form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Step 4: Wait for signup request to complete\n\n  cy.wait(\"@signup\");\n\n  // Step 5: Complete onboarding by creating a bank account\n\n  // Navigate through onboarding flow\n\n  cy.getBySel(\"user-onboarding-next\").click();\n\n  // Fill in bank account details\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit bank account form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for bank account creation\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Complete onboarding\n\n  cy.getBySel(\"user-onboarding-next\").click();\n  cy.getBySel(\"user-onboarding-done\").click();\n\n  // Step 6: Verify successful login - should be on home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n  cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\n\n  // Step 7: Logout\n\n  // Handle mobile navigation if needed\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Step 8: Verify logout - should be redirected to signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Test 1: Submit empty form to check required field errors\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert that error messages are displayed for empty fields\n\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Enter your password\");\n\n  // Test 2: Try login with invalid username and valid password\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert error message for invalid credentials\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Test 3: Clear fields and try with valid username but invalid password\n\n  cy.getBySel(\"signin-username\").clear().type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").clear().type(\"invalidPa$word\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert error message for invalid password\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// should display signup errors\r\r\ncy.visit(\"/signup\");\r\r\n\r\r\n// Test submitting empty form - should show required field errors\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.get(\"#firstName-helper-text\").should(\"contain\", \"First Name is required\");\r\r\ncy.get(\"#lastName-helper-text\").should(\"contain\", \"Last Name is required\");\r\r\ncy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\r\r\ncy.get(\"#password-helper-text\").should(\"contain\", \"Enter your password\");\r\r\ncy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Confirm your password\");\r\r\n\r\r\n// Test password mismatch error\r\r\ncy.getBySel(\"signup-first-name\").type(\"Bob\");\r\r\ncy.getBySel(\"signup-last-name\").type(\"Ross\");\r\r\ncy.getBySel(\"signup-username\").type(\"TestUser123\");\r\r\ncy.getBySel(\"signup-password\").type(\"s3cret\");\r\r\ncy.getBySel(\"signup-confirmPassword\").type(\"invalidPa$word\");\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Password does not match\");\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Fill in invalid username with valid password\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Click the sign in button\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// should error for an invalid password for existing user\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid username but invalid password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"INVALID\");\n\n  // Submit the signin form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click the create new bank account button\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill in the bank account form with the provided information\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for the GraphQL mutation to complete\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the bank account was created successfully\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"123456789\");\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click on the \"Create\" button to open the bank account form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Try to submit the form without filling any fields to trigger validation errors\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Assert that error messages are displayed for required fields\n\n  cy.getBySel(\"bankaccount-bankName-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a bank name\");\n  cy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a valid bank routing number\");\n  cy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a valid bank account number\");\n\n  // Test invalid routing number format\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"Test Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"123\"); // Invalid format\n\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"456\");\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Assert routing number error for invalid format\n\n  cy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Must contain a valid routing number\");\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\n// Navigate to bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // First, create a bank account to delete\n\n  cy.getBySel(\"bankaccount-new\").click();\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the bank account appears in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");\n\n  // Find and click the delete button for the bank account\n\n  cy.getBySel(\"bankaccount-delete\").first().click();\n\n  // Wait for the delete mutation to complete\n\n  cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n  // Verify the bank account is no longer visible in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"not.contain\", \"The Best Bank\");\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// Navigate to the bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Wait for the bank account list query to complete\n\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Verify that the bank account list is empty or doesn't exist\n\n  cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\n\n  // Verify that the onboarding modal is visible\n\n  cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n\n  // Verify empty state message or header is displayed\n\n  cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for and select the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact.firstName);\n  cy.wait(\"@usersSearch\");\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out the payment form using the first payment transaction from user info\n\n  cy.getBySel(\"amount-input\").type(\"35\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n  // Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify the transaction was successful\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n\n  // Verify we're redirected to the personal transactions page\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n\n  // Verify the transaction appears in the list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"$35\");\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\nconst requestTransaction = {\n    amount: \"95\",\n    description: \"Fancy Hotel 🏨\"\n  };\n\n  // Navigate to the new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Wait for users to load\n\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the contact user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Switch to request tab (instead of payment)\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Enter the request amount\n\n  cy.getBySel(\"amount-input\").type(requestTransaction.amount);\n\n  // Enter the request description\n\n  cy.getBySel(\"transaction-create-description-input\").type(requestTransaction.description);\n\n  // Submit the request\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify we're redirected to the personal transactions page\n\n  cy.getBySel(\"nav-personal-tab\").should(\"be.visible\");\n\n  // Verify the request transaction appears in the transaction list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", requestTransaction.description);\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", `$${requestTransaction.amount}`);\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Select a user from the list\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Try to submit without entering amount or description\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error messages are displayed for required fields\n\n  cy.getBySel(\"transaction-create-amount-input\").should(\"have.attr\", \"aria-invalid\", \"true\");\n  cy.getBySel(\"transaction-create-description-input\").should(\"have.attr\", \"aria-invalid\", \"true\");\n\n  // Enter invalid amount (0 or negative)\n\n  cy.getBySel(\"transaction-create-amount-input\").type(\"0\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify amount error is still displayed\n\n  cy.getBySel(\"transaction-create-amount-input\").should(\"have.attr\", \"aria-invalid\", \"true\");\n\n  // Clear and enter negative amount\n\n  cy.getBySel(\"transaction-create-amount-input\").clear().type(\"-10\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify amount error is still displayed\n\n  cy.getBySel(\"transaction-create-amount-input\").should(\"have.attr\", \"aria-invalid\", \"true\");\n\n  // Enter valid amount but leave description empty\n\n  cy.getBySel(\"transaction-create-amount-input\").clear().type(\"25\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify description error is displayed\n\n  cy.getBySel(\"transaction-create-description-input\").should(\"have.attr\", \"aria-invalid\", \"true\");\n\n  // Fill in description and verify form can be submitted successfully\n\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for successful transaction creation\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify we're redirected to transactions page or success state\n\n  cy.url().should(\"not.include\", \"/transaction/new\");\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// Get the receiver's initial balance\n\n  let receiverInitialBalance: number;\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then((user: User) => {\n    receiverInitialBalance = user.balance;\n  });\n\n  // Navigate to the new transaction form\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for and select the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter payment details using the first payment transaction\n\n  cy.getBySel(\"amount-input\").type(\"35\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n  // Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify success message appears\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Switch to the receiver's account to verify the deposit\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Navigate to personal transactions to see the received payment\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify the transaction appears in the receiver's transaction list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"Sushi dinner 🍣\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"$35\");\n\n  // Verify the receiver's balance has increased\n\n  cy.database(\"find\", \"users\", {\n    id: ctx.contact!.id\n  }).then((user: User) => {\n    const expectedBalance = receiverInitialBalance + 35 * 100; // Convert dollars to cents\n\n    expect(user.balance).to.equal(expectedBalance);\n  });\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\nconst requestTransaction = {\n    amount: \"95\",\n    description: \"Fancy Hotel 🏨\"\n  };\n\n  // Navigate to new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for and select the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill in the request details\n\n  cy.getBySel(\"amount-input\").type(requestTransaction.amount);\n  cy.getBySel(\"transaction-create-description-input\").type(requestTransaction.description);\n\n  // Submit the request (not payment)\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Verify request was created successfully\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n\n  // Switch to the receiver's account (contact user)\n\n  cy.switchUserByXstate(ctx.contact!.username);\n\n  // Navigate to personal transactions to see the request\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", requestTransaction.description).should(\"contain\", `$${requestTransaction.amount}`).click();\n\n  // Accept the request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction was accepted\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n\n  // Verify the transaction status is updated to completed/accepted\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"paid\").or(\"contain\", \"completed\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// Login as User B to create a transaction\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Create a new transaction from User B to another user\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"25\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get the transaction ID from the URL\n\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Logout User B\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n\n    // Navigate to the transaction and like it\n\n    cy.visit(`/transaction/${transactionId}`);\n    cy.getBySel(\"like-button\").click();\n\n    // Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B to check notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications page\n\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Verify User B received a notification about User A's like\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// First, create a transaction between User A and User B\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to new transaction page\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Select User B as recipient\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Enter transaction details\n\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like notification\");\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get transaction ID from URL\n\n  cy.url().then(url => {\n    const transactionId = url.split(\"/\").pop();\n\n    // Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Visit the transaction page\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Like the transaction\n\n    cy.getBySel(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Logout User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User A and check notifications\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n\n    // Check notification count and content for User A\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n\n    // Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Login as User B and check notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n\n    // Check notification count and content for User B\n\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n  });\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Step 1: Login as User B and create a transaction or find an existing one\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Step 2: Create a new transaction as User B to User A so we have a transaction to comment on\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userA.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userA.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"25\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for comments\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Step 3: Get the transaction ID from the URL\n\n  cy.url().then(url => {\n    const transactionId = url.split(\"/\").pop();\n\n    // Step 4: Logout User B\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 5: Login as User A\n\n    cy.loginByXstate(ctx.userA.username);\n\n    // Step 6: Navigate to the transaction created by User B\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Step 7: Add a comment to the transaction\n\n    const commentText = \"Great transaction!\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Step 8: Verify the comment appears\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText);\n\n    // Step 9: Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 10: Login as User B to check notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Step 11: Navigate to notifications and verify User B received notification about User A's comment\n\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Step 12: Verify the notification exists and contains User A's information\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Step 1: Login as User A and create a transaction with User B\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to create new transaction\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Select User B as recipient\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Fill transaction details\n\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for comments\");\n\n  // Submit payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Get transaction ID from URL\n\n  cy.url().then(url => {\n    const transactionId = url.split(\"/\").pop();\n\n    // Step 2: Logout User A and login as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n    cy.loginByXstate(ctx.userC.username);\n\n    // Step 3: Navigate to the transaction and add a comment\n\n    cy.visit(`/transaction/${transactionId}`);\n\n    // Add comment\n\n    const commentText = \"Great transaction between you two!\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Verify comment appears\n\n    cy.getBySel(\"comments-list\").should(\"contain\", commentText);\n\n    // Step 4: Logout User C and check User A's notifications\n\n    cy.getBySel(\"sidenav-signout\").click();\n    cy.loginByXstate(ctx.userA.username);\n\n    // Navigate to notifications\n\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User A received notification about User C's comment\n\n    cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n\n    // Step 5: Logout User A and check User B's notifications\n\n    cy.getBySel(\"sidenav-signout\").click();\n    cy.loginByXstate(ctx.userB.username);\n\n    // Navigate to notifications\n\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n\n    // Verify User B received notification about User C's comment\n\n    cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// User A sends a payment to User B\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\n\r\r\n// Navigate to create new transaction\r\r\ncy.getBySel(\"new-transaction\").click();\r\r\n\r\r\n// Search for and select User B\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\ncy.getBySel(\"user-list-item\").first().click();\r\r\n\r\r\n// Enter payment amount and description\r\r\ncy.getBySel(\"amount-input\").type(\"50\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Payment from A to B\");\r\r\n\r\r\n// Submit the payment\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Logout User A\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n// Login as User B to check notifications\r\r\ncy.loginByXstate(ctx.userB.username);\r\r\n\r\r\n// Navigate to notifications\r\r\ncy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\r\r\ncy.getBySel(\"sidenav-notifications\").click();\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// Verify User B received notification about the payment\r\r\ncy.getBySel(\"notification-list-item\")\r\r\n    .first()\r\r\n    .should(\"contain\", ctx.userA.firstName)\r\r\n    .and(\"contain\", \"paid\");\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// Login as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to create new transaction\n\n  cy.getBySel(\"new-transaction\").click();\n\n  // Search for and select User C\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Enter transaction details for a request\n\n  cy.getBySel(\"amount-input\").type(\"75\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Payment request from A to C\");\n\n  // Submit the payment request\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n\n  // Wait for the transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Switch to User C to verify notification\n\n  cy.loginByXstate(ctx.userC.username);\n\n  // Navigate to notifications\n\n  cy.visit(\"/notifications\");\n  cy.wait(\"@getNotifications\");\n\n  // Verify that User C received a notification about the payment request\n\n  cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\");\n\n  // Verify notification count is updated\n\n  cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// Create a fresh user with no interactions/notifications\n\n  cy.task(\"db:seed:user\").then((user: User) => {\n    // Login as the new user\n\n    cy.loginByXstate(user.username);\n    cy.wait(\"@getNotifications\");\n\n    // Navigate to notifications page\n\n    if (isMobile()) {\n      cy.getBySel(\"sidenav-toggle\").click();\n    }\n    cy.getBySel(\"sidenav-notifications\").click();\n\n    // Verify empty notifications state is displayed\n\n    cy.getBySel(\"empty-list-header\").should(\"be.visible\");\n    cy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\n\n    // Verify no notification items are present\n\n    cy.getBySel(\"notification-list-item\").should(\"not.exist\");\n  });\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n// Visit the main page where the navigation drawer should be present\n\n  cy.visit(\"/\");\n\n  // Wait for the page to load and transactions to be fetched\n\n  cy.wait(\"@personalTransactions\");\n\n  // Check if we're on mobile or desktop to handle different drawer behaviors\n\n  if (isMobile()) {\n    // On mobile, the drawer should be closed by default\n\n    // Look for the hamburger menu button and click it to open drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify the drawer is now visible/open\n\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n    // Click the toggle again to close the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify the drawer is now hidden/closed\n\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n  } else {\n    // On desktop, the drawer might be open by default\n\n    // Check if drawer is visible initially\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test=sidenav-drawer]\").is(\":visible\")) {\n        // If visible, click to hide it\n\n        cy.getBySel(\"sidenav-toggle\").click();\n        cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n\n        // Click again to show it\n\n        cy.getBySel(\"sidenav-toggle\").click();\n        cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n      } else {\n        // If hidden, click to show it\n\n        cy.getBySel(\"sidenav-toggle\").click();\n        cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n        // Click again to hide it\n\n        cy.getBySel(\"sidenav-toggle\").click();\n        cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n      }\n    });\n  }\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// Navigate to the public feed tab\n\n  cy.getBySel(\"nav-public-tab\").click();\n  cy.wait(`@${feedViews.public.routeAlias}`);\n\n  // Get the user's contacts to verify against\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // If user has no contacts, skip this test\n\n    if (contactIds.length === 0) {\n      cy.log(\"User has no contacts. Skipping test.\");\n      return;\n    }\n\n    // Check the first 5 transaction items (or fewer if less than 5 exist)\n\n    cy.getBySel(\"transaction-item\").then($items => {\n      const itemsToCheck = Math.min(5, $items.length);\n      if (itemsToCheck === 0) {\n        cy.log(\"No transaction items found in public feed.\");\n        return;\n      }\n\n      // Verify each of the first 5 items involves a contact\n\n      for (let i = 0; i < itemsToCheck; i++) {\n        cy.getBySel(\"transaction-item\").eq(i).within(() => {\n          // Check if either sender or receiver is a contact\n\n          cy.get(\"[data-test*='sender-'], [data-test*='receiver-']\").then($elements => {\n            let hasContact = false;\n            $elements.each((index, element) => {\n              const dataTest = Cypress.$(element).attr(\"data-test\");\n              if (dataTest) {\n                const userId = dataTest.split(\"-\")[1];\n                if (contactIds.includes(userId) || userId === ctx.user!.id) {\n                  hasContact = true;\n                }\n              }\n            });\n            expect(hasContact).to.be.true;\n          });\n        });\n      }\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// Get the user's contacts first\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n    ctx.contactIds = contactIds;\n\n    // Navigate to contacts/friends feed\n\n    cy.getBySel(\"nav-contacts-tab\").click();\n    cy.wait(\"@contactsTransactions\");\n\n    // Check if there are any transactions in the friends feed\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test=empty-list-header]\").length > 0) {\n        cy.log(\"No transactions found in friends feed. Test passed - empty state is valid.\");\n        return;\n      }\n\n      // If transactions exist, verify each one involves a contact\n\n      cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\n      cy.getBySel(\"transaction-item\").each($transactionItem => {\n        // Check if this transaction involves any of the user's contacts\n\n        cy.wrap($transactionItem).within(() => {\n          // Look for sender and receiver elements to get their IDs\n\n          cy.get(\"[data-test*='transaction-sender-'], [data-test*='transaction-receiver-']\").should(\"exist\").then($elements => {\n            let involvesContact = false;\n            $elements.each((index, element) => {\n              const dataTest = element.getAttribute(\"data-test\");\n              if (dataTest) {\n                // Extract user ID from data-test attribute\n\n                const userId = dataTest.split(\"-\")[2];\n\n                // Check if this user ID is in our contacts or is the current user\n\n                if (contactIds.includes(userId) || userId === ctx.user!.id) {\n                  involvesContact = true;\n                }\n              }\n            });\n\n            // Assert that this transaction involves at least one contact\n\n            expect(involvesContact).to.be.true;\n          });\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => {\n// Visit the main page to view the default feed\n\n  cy.visit(\"/\");\n  cy.wait(\"@publicTransactions\");\n\n  // Verify that transaction items are rendered\n\n  cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\n\n  // Check for various transaction item elements that should be present\n\n  cy.getBySel(\"transaction-item\").first().within(() => {\n    // Should contain transaction amount\n\n    cy.get(\"[data-test*='transaction-amount']\").should(\"exist\");\n\n    // Should contain transaction description or note\n\n    cy.get(\"[data-test*='transaction']\").should(\"contain.text\");\n\n    // Should show user information (sender/receiver)\n\n    cy.get(\"[data-test*='user']\").should(\"exist\");\n  });\n\n  // Verify different transaction types are displayed if they exist\n\n  cy.getBySel(\"transaction-item\").each($el => {\n    cy.wrap($el).should(\"be.visible\");\n\n    // Each transaction should have readable content\n\n    cy.wrap($el).should(\"not.be.empty\");\n  });\n });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// Navigate to personal feed\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Open date range picker\n\n  cy.getBySel(\"filter-date-range-button\").click();\n\n  // Verify modal is open\n\n  cy.getBySel(\"date-range-picker-modal\").should(\"be.visible\");\n\n  // Close the modal (typically via close button or backdrop click)\n\n  cy.getBySel(\"date-range-picker-close\").click();\n\n  // Verify modal is closed\n\n  cy.getBySel(\"date-range-picker-modal\").should(\"not.exist\");\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by date range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => {\n// Navigate to the personal/mine feed\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify that transactions are displayed\n\n  cy.getBySel(\"transaction-item\").should(\"exist\");\n\n  // Check each transaction item to ensure it involves the current user\n\n  cy.getBySel(\"transaction-item\").each($transactionItem => {\n    // Look for sender and receiver elements within each transaction\n\n    cy.wrap($transactionItem).within(() => {\n      // Check if the current user is either the sender or receiver\n\n      // Using a promise to handle the assertion properly\n\n      cy.get(\"body\").then(() => {\n        const hasSender = $transactionItem.find(`[data-test*=\"sender-${ctx.user!.id}\"]`).length > 0;\n        const hasReceiver = $transactionItem.find(`[data-test*=\"receiver-${ctx.user!.id}\"]`).length > 0;\n\n        // Assert that the user is involved in this transaction\n\n        expect(hasSender || hasReceiver).to.be.true;\n      });\n    });\n  });\n\n  // Verify the personal tab is selected/active\n\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// Verify we're on the personal transactions page initially\n\n  cy.getBySel(\"nav-personal-tab\").should(\"be.visible\");\n  cy.getBySel(\"nav-public-tab\").should(\"be.visible\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"be.visible\");\n\n  // Click on the first transaction to view its details\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for the transaction details page to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're now on a transaction view page by checking for transaction details\n\n  cy.getBySel(\"transaction-detail\").should(\"be.visible\");\n\n  // Verify that the navigation tabs are hidden on the transaction view page\n\n  cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n\n  // Verify that the transaction navigation tabs container is not visible\n\n  cy.getBySel(\"nav-transaction-tabs\").should(\"not.exist\");\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Verify we have a transaction request to work with\n\n  expect(ctx.transactionRequest).to.exist;\n\n  // Find and click on the transaction item to view details\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest.description}\")`).first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on the transaction detail page\n\n  cy.getBySel(\"transaction-detail\").should(\"be.visible\");\n\n  // Find and click the like button\n\n  cy.getBySel(\"transaction-like-button\").click();\n\n  // Verify the like was successful (button should show as liked)\n\n  cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"liked\").or(\"contain\", \"1\"); // Could show like count\n\n  // Verify the transaction shows it has been liked\n\n  cy.getBySel(\"transaction-likes-count\").should(\"be.visible\").and(\"contain\", \"1\");\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// Navigate to the first transaction in the personal transactions list\n\n  cy.getBySel(\"transaction-item\").first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on the transaction view page\n\n  cy.getBySel(\"transaction-detail\").should(\"be.visible\");\n\n  // Add a comment to the transaction\n\n  const commentText = \"This is a test comment on the transaction\";\n  cy.getBySel(\"transaction-comment-input\").type(commentText);\n  cy.getBySel(\"transaction-comment-submit\").click();\n\n  // Wait for the comment to be posted\n\n  cy.wait(\"@postComment\");\n\n  // Verify the comment appears in the transaction comments\n\n  cy.getBySel(\"transaction-comment-list\").should(\"contain\", commentText).and(\"contain\", ctx.authenticatedUser.firstName);\n\n  // Verify comment count is updated\n\n  cy.getBySel(\"transaction-comment-count\").should(\"contain\", \"1\");\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// Verify that we have a pending transaction request in the context\n\n  cy.then(() => {\n    expect(ctx.transactionRequest).to.exist;\n    expect(ctx.transactionRequest.status).to.equal(\"pending\");\n    expect(ctx.transactionRequest.requestStatus).to.equal(\"pending\");\n  });\n\n  // Find and click on the pending transaction request in the personal transactions list\n\n  cy.getBySel(\"transaction-item\").should(\"contain\", ctx.transactionRequest.description).and(\"contain\", \"requested\").first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on the transaction detail page and can see the request details\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n  cy.getBySel(\"transaction-amount\").should(\"contain\", `$${(ctx.transactionRequest.amount / 100).toFixed(2)}`);\n  cy.getBySel(\"transaction-description\").should(\"contain\", ctx.transactionRequest.description);\n\n  // Accept the transaction request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n\n  // Wait for the update request to complete\n\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status has been updated to complete\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"complete\");\n\n  // Verify success message or notification appears\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction request accepted\");\n\n  // Navigate back to personal transactions to verify the change\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify the transaction no longer appears as pending but as completed\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", ctx.transactionRequest.description).and(\"contain\", \"received\").and(\"not.contain\", \"requested\");\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Verify we have a pending transaction request to work with\n\n  cy.then(() => {\n    expect(ctx.transactionRequest).to.exist;\n    expect(ctx.transactionRequest.status).to.equal(\"pending\");\n  });\n\n  // Find and click on the pending transaction request in the personal feed\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest.description}\")`).first().click();\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify we're on the transaction detail page and it shows as pending\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"pending\");\n\n  // Reject the transaction request\n\n  cy.getBySel(\"transaction-reject-request\").click();\n\n  // Wait for the transaction update to complete\n\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is now rejected/declined\n\n  cy.getBySel(\"transaction-detail-header\").should(\"contain\", \"rejected\");\n\n  // Verify success message or status change\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Rejected\");\n\n  // Navigate back to personal transactions to verify the change\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Verify the transaction now shows as rejected in the transaction list\n\n  cy.getBySel(\"transaction-item\").filter(`:contains(\"${ctx.transactionRequest.description}\")`).first().should(\"contain\", \"rejected\");\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// Find a completed transaction in the personal transactions list\n\n  cy.getBySel(\"transaction-item\").should(\"be.visible\").first().click();\n\n  // Wait for transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Verify that the transaction view is displayed\n\n  cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n\n  // Check that accept/reject buttons are not present for completed transactions\n\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n  cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n\n  // Verify that the transaction status shows as complete or settled\n\n  cy.getBySel(\"transaction-status\").should(\"be.visible\").and(\"not.contain\", \"pending\");\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Verify that the user settings form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify that all form input fields are present and visible\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n  // Verify that the submit button is present\n\n  cy.getBySel(\"user-settings-submit\").should(\"be.visible\");\n\n  // Verify that the form fields contain some values (should be pre-filled with user data)\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\").and(\"not.be.empty\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\").and(\"not.be.empty\");\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\").and(\"not.be.empty\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\").and(\"not.be.empty\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// Clear all required fields to trigger validation errors\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Submit the form to trigger validation\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify that validation error messages are displayed for required fields\n\n  cy.contains(\"Enter a first name\").should(\"be.visible\");\n  cy.contains(\"Enter a last name\").should(\"be.visible\");\n  cy.contains(\"Enter an email address\").should(\"be.visible\");\n  cy.contains(\"Enter a phone number\").should(\"be.visible\");\n\n  // Test invalid email format\n\n  cy.getBySel(\"user-settings-firstName-input\").type(\"Test\");\n  cy.getBySel(\"user-settings-lastName-input\").type(\"User\");\n  cy.getBySel(\"user-settings-email-input\").type(\"invalid-email\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(\"123\");\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify email validation error\n\n  cy.contains(\"Must contain a valid email address\").should(\"be.visible\");\n\n  // Test invalid phone number format\n\n  cy.getBySel(\"user-settings-email-input\").clear().type(\"test@example.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"abc\");\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify phone number validation error\n\n  cy.contains(\"Phone number is not valid\").should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// updates first name, last name, email and phone number\r\r\ncy.getBySel(\"user-settings-firstName-input\").clear().type(\"New First Name\");\r\r\ncy.getBySel(\"user-settings-lastName-input\").clear().type(\"New Last Name\");\r\r\ncy.getBySel(\"user-settings-email-input\").clear().type(\"email@email.com\");\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"6155551212\");\r\r\n\r\r\n// Submit the form\r\r\ncy.getBySel(\"user-settings-submit\").click();\r\r\n\r\r\n// Wait for the update request to complete\r\r\ncy.wait(\"@updateUser\");\r\r\n\r\r\n// Verify the form fields still contain the updated values\r\r\ncy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", \"New First Name\");\r\r\ncy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", \"New Last Name\");\r\r\ncy.getBySel(\"user-settings-email-input\").should(\"have.value\", \"email@email.com\");\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", \"6155551212\");\n });\r\n});\r\n"
  },
  "gemini_2_0_flash": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should redirect unauthenticated user to signin page', () => {\n    // Visit the home page\n\n      cy.visit(\"/\");\n\n      // Assert that the current URL includes '/signin'\n\n      cy.location(\"pathname\").should(\"include\", \"/signin\");\n  });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => { });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => { });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => { });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should display login errors', () => {\n    cy.visit(\"/signin\");\n      cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n      cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n      cy.getBySel(\"signin-submit\").click();\n      cy.getBySel(\"signin-error\").should(\"be.visible\");\n  });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => { });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => { });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should error for an invalid password for existing user', () => {\n    // Attempt to log in with an existing username but an invalid password\n\n      cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n      cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n      cy.getBySel(\"signin-submit\").click();\n\n      // Assert that an error message is displayed\n\n      cy.getBySel(\"signin-error\").should(\"be.visible\").contains(\"Incorrect username or password\");\n  });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('creates a new bank account', () => {\n    // Navigate to the bank accounts page\n            cy.getBySel(\"nav-bankaccounts\").click();\n            cy.wait(\"@getNotifications\");\n\n            // Click the \"Create New Bank Account\" button\n            cy.getBySel(\"bankaccount-new\").click();\n\n            // Type in the bank account details\n            cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n            cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n            cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n            // Submit the form\n            cy.getBySel(\"bankaccount-submit\").click();\n\n            // Wait for the create bank account mutation to complete\n            cy.wait(\"@gqlCreateBankAccountMutation\");\n\n            // Assert that the new bank account is displayed in the list\n            cy.contains(\"The Best Bank\").should(\"be.visible\");\n            cy.contains(\"123456789\").should(\"be.visible\");\n  });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('should display bank account form errors', () => {\n    // Navigate to the bank accounts page\n            cy.visit(\"/bankaccounts\");\n\n            // Click the \"Create Bank Account\" button\n            cy.getBySel(\"bankaccount-new\").click();\n\n            // Leave the bank name field empty and submit the form\n            cy.getBySel(\"bankaccount-submit\").click();\n\n            // Assert that an error message is displayed for the bank name field\n            cy.getBySel(\"bankaccount-bankName-error\").should(\"be.visible\");\n\n            // Leave the routing number field empty and submit the form\n            cy.getBySel(\"bankaccount-bankName\").type(\"The Best Bank\");\n            cy.getBySel(\"bankaccount-submit\").click();\n\n            // Assert that an error message is displayed for the routing number field\n            cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\");\n\n            // Leave the account number field empty and submit the form\n            cy.getBySel(\"bankaccount-routingNumber\").type(\"123\");\n            cy.getBySel(\"bankaccount-submit\").click();\n\n            // Assert that an error message is displayed for the account number field\n            cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\");\n\n            // Enter invalid data into the routing number and account number fields\n            cy.getBySel(\"bankaccount-routingNumber\").clear().type(\"invalid\");\n            cy.getBySel(\"bankaccount-accountNumber\").clear().type(\"invalid\");\n            cy.getBySel(\"bankaccount-submit\").click();\n\n            // Assert that an error message is displayed for the routing number and account number fields\n            cy.getBySel(\"bankaccount-routingNumber-error\").should(\"be.visible\");\n            cy.getBySel(\"bankaccount-accountNumber-error\").should(\"be.visible\");\n  });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('soft deletes a bank account', () => {\n    // Navigate to bank accounts page\n\n      cy.getBySel(\"sidenav-bankaccounts\").click();\n\n      // Wait for bank accounts to load\n\n      cy.wait(\"@gqlListBankAccountQuery\");\n\n      // Find the first bank account and click the delete button\n\n      cy.get(\"[data-test*=bankaccount-list-item]\").first().find(\"[data-test*=bankaccount-delete]\").click();\n\n      // Wait for the delete mutation to complete\n\n      cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n      // Assert that the bank account is no longer visible\n\n      cy.get(\"[data-test*=bankaccount-list-item]\").first().should(\"not.exist\");\n  });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it('renders an empty bank account list state with onboarding modal', () => {\n    // Check if the bank account list is empty\n            cy.getBySel(\"bankaccount-list\").should(\"be.empty\");\n\n            // Check if the onboarding modal is displayed\n            cy.getBySel(\"onboarding-modal\").should(\"be.visible\");\n\n            // Check if the \"Add Bank Account\" button is displayed\n            cy.getBySel(\"onboarding-add-bank-account\").should(\"be.visible\");\n  });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction payment', () => {\n    // Click on the new transaction link\n          cy.getBySelLike(\"new-transaction\").click();\n\n          // Wait for the users to load\n          cy.wait(\"@allUsers\");\n\n          // Type in the username of the contact\n          cy.getBySelLike(\"user-list-search-input\").type(ctx.contact.username);\n\n          // Select the contact from the list\n          cy.getBySelLike(\"user-list-item\").first().click();\n\n          // Enter the amount for the transaction\n          cy.getBySelLike(\"amount-input\").type(\"35\");\n\n          // Enter the description for the transaction\n          cy.getBySelLike(\"description-input\").type(\"Sushi dinner 🍣\");\n\n          // Click on the send payment button\n          cy.getBySelLike(\"payment-submit-button\").click();\n\n          // Wait for the transaction to be created\n          cy.wait(\"@createTransaction\");\n\n          // Assert that the transaction was created successfully\n          cy.contains(\"Sushi dinner 🍣\").should(\"be.visible\");\n  });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction request', () => {\n    // Navigate to the new transaction form\n\n      cy.getBySelLike(\"new-transaction\").click();\n\n      // Wait for the users to load\n\n      cy.wait(\"@allUsers\");\n\n      // Select a user from the list\n\n      cy.getBySelLike(\"user-list-item\").first().click();\n\n      // Type in the amount\n\n      cy.get(\"[data-test*=transaction-amount-input]\").type(\"95\");\n\n      // Type in the description\n\n      cy.get(\"[data-test*=transaction-description-input]\").type(\"Fancy Hotel 🏨\");\n\n      // Request a transaction\n\n      cy.getBySelLike(\"request-payment\").click();\n\n      // Wait for the transaction to be created\n\n      cy.wait(\"@createTransaction\").then(interception => {\n        assert.isNotNull(interception.response?.statusCode, '1st API call has response');\n        expect(interception.response?.statusCode).to.eq(200);\n      });\n\n      // Verify that the transaction was created successfully\n\n      cy.contains(\"Requested\").should(\"be.visible\");\n  });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => { });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('submits a transaction payment and verifies the deposit for the receiver', () => {\n    // Navigate to new transaction\n\n      cy.getBySelLike(\"new-transaction\").click();\n      cy.wait(\"@allUsers\");\n\n      // Select a contact\n\n      cy.getBySelLike(\"user-list-item\").first().click();\n\n      // Enter amount and description\n\n      const amount = \"35\";\n      const description = \"Sushi dinner 🍣\";\n      cy.get(\"#amount\").type(amount);\n      cy.get(\"#description\").type(description);\n\n      // Submit payment\n\n      cy.getBySelLike(\"payment-submit-button\").click();\n      cy.wait(\"@createTransaction\").then(interception => {\n        assert.isNotNull(interception?.response?.statusCode, \"POST transactions must have a status code\");\n        expect(interception?.response?.statusCode).to.equal(200);\n      });\n\n      // Verify the transaction\n\n      cy.wait(\"@personalTransactions\");\n      cy.getBySel(\"transaction-list\").should(\"be.visible\");\n  });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => { });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A likes a transaction of User B; User B gets notification that User A liked transaction ', () => {\n    // User A creates a transaction to User B\n                cy.createTransaction({\n                    receiverId: ctx.userB.id,\n                    amount: 10,\n                    description: \"Payment from A to B\",\n  });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction', () => {\n    // 1. User A creates a transaction to User B\n              cy.createTransaction({\n                senderId: ctx.userA.id,\n                receiverId: ctx.userB.id,\n                amount: 10,\n                description: \"Test Transaction\",\n  });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A comments on a transaction of User B; User B gets notification that User A commented on their transaction', () => {\n    // 1. User A creates a comment on a transaction of User B\n                cy.createTransaction({\n                    payer: ctx.userA.username,\n                    receiver: ctx.userB.username,\n                    amount: 5,\n                    note: \"Payment for services\",\n  });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction', () => {\n    // 1. User A creates a transaction with User B\n                cy.createTransaction({\n                    payerId: ctx.userA.id,\n                    receiverId: ctx.userB.id,\n                    amount: 50,\n                    description: \"Test Transaction\",\n  });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment to User B', () => {\n    // Log in as User A\n                 cy.loginByXstate(ctx.userA.username);\n                 // Navigate to the new transaction page\n                 cy.getBySelLike(\"new-transaction\").click();\n                 cy.wait(\"@getNotifications\");\n                 // Search for User B\n                 cy.getBySel(\"user-list-search-input\").type(ctx.userB.username);\n                 cy.wait(500);\n                 // Select User B from the search results\n                 cy.getBySelLike(`user-list-item-${ctx.userB.username}`).click();\n                 // Enter an amount to pay\n                 const amount = \"10.00\";\n                 cy.getBySel(\"transaction-create-amount-input\").type(amount);\n                 // Add a note\n                 const note = \"Payment for services\";\n                 cy.getBySel(\"transaction-create-description-input\").type(note);\n                 // Submit the transaction\n                 cy.getBySel(\"transaction-create-submit-button\").click();\n                 cy.wait(\"@createTransaction\").then((interception) => {\n                     expect(interception.response.statusCode).to.equal(200);\n  });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment request to User C', () => {\n    // Log in as User A\n\n      cy.loginByXstate(ctx.userA.username);\n\n      // Navigate to the new transaction page\n\n      cy.getBySelLike(\"new-transaction\").click();\n\n      // Search for User C\n\n      cy.getBySelLike(\"user-list-search-input\").type(ctx.userC.username);\n      cy.wait(500); // Wait for the search results to load\n\n      // Select User C from the search results\n\n      cy.getBySelLike(\"user-list-item\").contains(ctx.userC.username).click();\n\n      // Enter the payment amount\n\n      const amount = \"5.00\";\n      cy.get(\"#amount\").type(amount);\n\n      // Add a description\n\n      const description = `Payment request from ${ctx.userA.username} to ${ctx.userC.username}`;\n      cy.getBySelLike(\"transaction-create-description-input\").type(description);\n\n      // Request money\n\n      cy.getBySelLike(\"request-money\").click();\n\n      // Verify the transaction is created and a notification is sent to User C\n\n      cy.wait(\"@createTransaction\").then(interception => {\n        expect(interception.response?.statusCode).to.eq(200);\n      });\n\n      //Log out User A\n\n      cy.logoutByXstate();\n\n      //Login as User C\n\n      cy.loginByXstate(ctx.userC.username);\n\n      //Go to notifications\n\n      cy.getBySelLike(\"nav-notifications-tab\").click();\n\n      //Verify that User C has a notification for the payment request\n\n      cy.wait(\"@getNotifications\").then(() => {\n        cy.getBySelLike(\"list-item-single-notification\").should(\"contain\", ctx.userA.username).should(\"contain\", \"requested\");\n      });\n  });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => { });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it('toggles the navigation drawer', () => {\n    // Get the sidenav toggle button and click it\n              cy.getBySel(\"sidenav-toggle\").click();\n  \n              // In mobile view, assert that the side navigation is visible\n              if (isMobile()) {\n                cy.get(\".MuiDrawer-paper\").should(\"be.visible\");\n              }\n  \n              // Get the sidenav toggle button and click it again to close\n              cy.getBySel(\"sidenav-toggle\").click();\n  \n              // In mobile view, assert that the side navigation is not visible\n              if (isMobile()) {\n                cy.get(\".MuiDrawer-paper\").should(\"not.be.visible\");\n              }\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it('first five items belong to contacts in public feed', () => {\n    cy.visit(\"/\");\n      cy.getBySel(\"nav-public-tab\").click();\n      cy.wait(\"@publicTransactions\");\n      cy.getBySelLike(\"transaction-item\").slice(0, 5).each($el => {\n        // Extract sender name from the transaction item\n\n        const senderName = $el.find(\"[data-test^='transaction-sender']\").text();\n\n        // Get the list of contact IDs for the logged-in user\n\n        cy.database(\"filter\", \"contacts\", {\n          userId: ctx.user?.id\n        }).then((contacts: any[]) => {\n          const contactUserIds = contacts.map(contact => contact.contactUserId);\n\n          // Check if the sender name matches any of the contact user's first or last name\n\n          cy.database(\"filter\", \"users\", (user: any) => contactUserIds.includes(user.id)).then((contactUsers: any[]) => {\n            const contactNames = contactUsers.map(user => `${user.firstName} ${user.lastName}`);\n            const isContactTransaction = contactNames.some(contactName => senderName.includes(contactName));\n            expect(isContactTransaction).to.be.true;\n          });\n        });\n      });\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => { });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => { });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('paginates ${feedName} transaction feed', () => {\n    // Navigate to the specified feed tab\n\n      cy.getBySel(`nav-${feed.tab}`).click();\n      cy.wait(`@${feed.routeAlias}`);\n\n      // Get the initial number of transaction items\n\n      cy.getBySelLike(\"transaction-item\").then(initialItems => {\n        const initialCount = initialItems.length;\n\n        // Use the custom command to paginate to the next page\n\n        cy.nextTransactionFeedPage(feed.service, 2).then(() => {\n          // Wait for the transactions to load\n\n          cy.wait(`@${feed.routeAlias}`);\n\n          // Assert that the number of transaction items has increased, indicating pagination\n\n          cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", initialCount);\n        });\n      });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it('closes date range picker modal', () => {\n    //\n                    // Check if the date range picker is open\n                    cy.get('[data-testid=\"date-range-picker-modal\"]').should('be.visible');\n                    // Close the date range picker modal\n                    cy.get('[data-testid=\"date-range-picker-close\"]').click();\n                    // Verify that the date range picker is closed\n                    cy.get('[data-testid=\"date-range-picker-modal\"]').should('not.be.visible');\n                    //\n  });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by date range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => { });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('transactions navigation tabs are hidden on a transaction view page', () => {\n    // Get the transaction view page. The exact route depends on the transaction.\n\n      cy.getBySel(\"transaction-item\").first().click();\n\n      // Assert that the navigation tabs are not visible\n\n      cy.getBySel(\"nav-public-tab\").should('not.exist');\n      cy.getBySel(\"nav-contacts-tab\").should('not.exist');\n      cy.getBySel(\"nav-personal-tab\").should('not.exist');\n  });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('likes a transaction', () => {\n    // Get the first transaction item\n          cy.getBySelLike(\"transaction-item\")\n            .first()\n            .as(\"transactionItem\");\n\n          // Find the like button within the transaction item and click it\n          cy.get(\"@transactionItem\")\n            .find(\"[data-test*=like-button]\")\n            .click();\n\n          // Assert that the like button is now active (or has the expected visual change)\n          // This assertion might need to be adjusted based on how the like button changes visually\n          cy.get(\"@transactionItem\")\n            .find(\"[data-test*=like-button]\")\n            .should(\"have.class\", \"Mui-active\"); // Example assertion, adjust as needed\n\n          // Optionally, assert that the number of likes has increased (if the UI reflects this)\n          // This requires intercepting the API call to get the updated transaction data\n          // and comparing the number of likes before and after clicking the button.\n  });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => { });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => { });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('rejects a transaction request', () => {\n    // Get the transaction request id from the context\n          const transactionId = ctx.transactionRequest.id;\n\n          // Intercept the update transaction request\n          cy.intercept(\"PATCH\", `/transactions/${transactionId}`).as(\"rejectTransaction\");\n\n          // Click on the reject button\n          cy.getBySel(\"transaction-reject-button\").click();\n\n          // Wait for the update transaction request to complete\n          cy.wait(\"@rejectTransaction\").then((interception) => {\n            // Assert that the request was successful (status code 200)\n            expect(interception.response.statusCode).to.equal(200);\n  });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => { });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('renders the user settings form', () => {\n    cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-firstname-input\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-lastname-input\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-phone-input\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-currency-select\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-language-select\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-theme-select\").should(\"be.visible\");\n            cy.getBySel(\"user-settings-save\").should(\"be.visible\");\n  });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('should display user setting form errors', () => {\n    // Assert that the first name input is visible\n\n      cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n\n      // Assert that the last name input is visible\n\n      cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n\n      // Assert that the email input is visible\n\n      cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n\n      // Assert that the phone number input is visible\n\n      cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n      // Assert that the save changes button is visible\n\n      cy.getBySel(\"user-settings-submit\").should(\"be.visible\");\n  });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('updates first name, last name, email and phone number', () => {\n    // Enter new first name\n          cy.getBySel(\"user-settings-firstName-input\").clear().type(\"New First Name\");\n          // Enter new last name\n          cy.getBySel(\"user-settings-lastName-input\").clear().type(\"New Last Name\");\n          // Enter new email\n          cy.getBySel(\"user-settings-email-input\").clear().type(\"email@email.com\");\n          // Enter new phone number\n          cy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"6155551212\");\n          // Save changes\n          cy.getBySel(\"user-settings-submit\").click();\n          // Verify that the user is updated\n          cy.wait(\"@updateUser\").then((interception) => {\n            expect(interception.response.statusCode).to.equal(200);\n            // Verify the updated user details\n            cy.getBySel(\"sidenav-username\").should(\"contain\", \"New First Name\");\n  });\r\n});\r\n"
  },
  "gemini_2_5_pro_preview": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// <generated_code>\n\n  // Attempt to visit a protected page (e.g., the home page)\n\n  cy.visit(\"/\");\n\n  // Assert that the current URL includes '/signin'\n\n  cy.url().should(\"include\", \"/signin\");\n\n  // Assert that the signin form is visible\n\n  cy.getBySel(\"signin-title\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// Test: should redirect to the home page after login\n\n  // <generated_code>\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter username and password from userInfo\n\n  cy.get(\"[data-test='signin-username']\").type(\"PainterJoy90\");\n  cy.get(\"[data-test='signin-password']\").type(\"s3cret\");\n\n  // Click the signin button\n\n  cy.get(\"[data-test='signin-submit']\").click();\n\n  // Assert that the URL is the home page\n\n  cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\n\n  // Assert that the user's username is displayed in the sidenav (or a similar element)\n\n  // This confirms the user is logged in and recognized.\n\n  cy.get(\"[data-test='sidenav-username']\").should(\"contain\", \"PainterJoy90\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// <generated_code>\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter username\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n  // Enter password\n\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Check the remember me checkbox\n\n  cy.getBySel(\"signin-remember-me\").check();\n\n  // Click the signin button\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert redirection to the home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Check cookie expiry (approx. 30 days)\n\n  cy.getCookie(\"connect.sid\").should(\"exist\").then(cookie => {\n    expect(cookie).to.have.property(\"expiry\");\n    const expiryDate = new Date(cookie!.expiry! * 1000);\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n\n    // Allow for a small difference in timing (e.g., 1 day)\n\n    const diffInMilliseconds = Math.abs(expiryDate.getTime() - thirtyDaysFromNow.getTime());\n    const diffInDays = diffInMilliseconds / (1000 * 60 * 60 * 24);\n    expect(diffInDays).to.be.closeTo(0, 1); // Check if the difference is within 1 day\n  });\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// <generated_code>\n\n  // Sign up\n\n  cy.visit(\"/signup\");\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n  cy.getBySel(\"signup-submit\").click();\n  cy.wait(\"@signup\");\n\n  // Login\n\n  // Depending on the app's flow, signup might automatically log the user in\n\n  // or redirect to signin. Assuming redirection to signin or manual navigation.\n\n  cy.visit(\"/signin\");\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert successful login (e.g., redirected to home, username displayed)\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n  cy.getBySel(\"sidenav-username\").should(\"contain\", \"PainterJoy90\");\n\n  // Logout\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Assert successful logout (e.g., redirected to signin)\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// <generated_code>\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Attempt to submit with empty fields\n\n  cy.getBySel(\"signin-submit\").click();\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Password is required\");\n\n  // Attempt to login with an invalid username\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // Clear fields\n\n  cy.getBySel(\"signin-username\").clear();\n  cy.getBySel(\"signin-password\").clear();\n\n  // Attempt to login with a valid username but invalid password\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n  cy.getBySel(\"signin-submit\").click();\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// <generated_code>\n\n  // Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // --- Test required fields ---\n\n  // Click the sign up button without filling in any fields\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Assert that error messages are displayed for all required fields\n\n  cy.get(\"#firstName-helper-text\").should(\"contain\", \"First Name is required\");\n  cy.get(\"#lastName-helper-text\").should(\"contain\", \"Last Name is required\");\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Enter your password\");\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Confirm your password\");\n\n  // --- Test password mismatch ---\n\n  // Fill in the form with valid data except for mismatched passwords\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"INVALID\"); // Use a clearly different password\n\n  // Click the sign up button\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Assert that a password mismatch error is displayed\n\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Password does not match\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// <generated_code>\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter invalid username\n\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n\n  // Enter valid password\n\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n\n  // Click the sign in button\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Verify error message\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// <generated_code>\n\n  // Visit the signin page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid username\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n  // Enter invalid password\n\n  cy.getBySel(\"signin-password\").type(\"invalidPa$$word\");\n\n  // Click the signin button\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert that an error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// <generated_code>\n\n  // Navigate to the bank accounts page if not already there\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Click the \"Create\" button\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill in the bank account form\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(userInfo.bankAccountInfo.bankName);\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(userInfo.bankAccountInfo.routingNumber);\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(userInfo.bankAccountInfo.accountNumber);\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for the mutation to complete\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Verify the new bank account is displayed in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", userInfo.bankAccountInfo.bankName);\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// <generated_code>\n\n  // Click the \"Create\" button to open the new bank account form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Attempt to submit the form with no fields filled\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Verify that error messages are displayed for all required fields\n\n  cy.getBySel(\"bankName-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a bank name\");\n  cy.getBySel(\"routingNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a routing number\");\n  cy.getBySel(\"accountNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter an account number\");\n\n  // Enter an invalid routing number (too short)\n\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"123\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.getBySel(\"routingNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Must contain a valid routing number\");\n\n  // Clear routing number and enter an invalid account number (too short)\n\n  cy.getBySel(\"bankaccount-routingNumber-input\").clear();\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"abc\");\n  cy.getBySel(\"bankaccount-submit\").click();\n  cy.getBySel(\"accountNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Must contain a valid account number\");\n\n  // Fill in bank name to satisfy one requirement\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"Test Bank\");\n\n  // Submit again to check remaining errors\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Bank name error should be gone\n\n  cy.getBySel(\"bankName-input-helper-text\").should(\"not.exist\");\n\n  // Routing number and account number errors should persist\n\n  cy.getBySel(\"routingNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter a routing number\"); // Error changes back as field is now empty\n\n  cy.getBySel(\"accountNumber-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Must contain a valid account number\"); // Error persists for invalid input\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\nconst { bankName, routingNumber, accountNumber } = userInfo.bankAccountInfo;\r\r\n\r\r\n    // 1. Navigate to the Bank Accounts page\r\r\n    cy.visit(\"/bankaccounts\");\r\r\n    cy.wait(\"@gqlListBankAccountQuery\"); // Wait for initial list to load\r\r\n\r\r\n    // 2. Click the 'Create' button to add a new bank account\r\r\n    // This ensures a bank account with known details exists for this test\r\r\n    cy.getBySel(\"bankaccount-new\").click();\r\r\n\r\r\n    // 3. Fill in the bank account form\r\r\n    cy.getBySel(\"bankaccount-bankName-input\").type(bankName);\r\r\n    cy.getBySel(\"bankaccount-routingNumber-input\").type(routingNumber);\r\r\n    cy.getBySel(\"bankaccount-accountNumber-input\").type(accountNumber);\r\r\n    cy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n    // 4. Wait for the creation mutation and verify the bank account is listed\r\r\n    cy.wait(\"@gqlCreateBankAccountMutation\").its(\"response.statusCode\").should(\"eq\", 200);\r\r\n    cy.getBySel(\"bankaccount-list\").should(\"contain\", bankName);\r\r\n\r\r\n    // 5. Find the specific bank account item and click its delete button\r\r\n    // This assumes bank account items are 'li' elements within the 'bankaccount-list'\r\r\n    // and the delete button can be found using a selector like '[data-test*=delete]' within that item.\r\r\n    cy.getBySel(\"bankaccount-list\")\r\r\n      .contains(\"li\", bankName) // Find the list item containing the bank name\r\r\n      .within(() => {\r\r\n        cy.get(\"[data-test*=delete]\").click(); // Click the delete button within this item\r\r\n      });\r\r\n\r\r\n    // 6. Wait for the delete mutation\r\r\n    cy.wait(\"@gqlDeleteBankAccountMutation\").its(\"response.statusCode\").should(\"eq\", 200);\r\r\n\r\r\n    // 7. Verify the bank account is no longer in the list\r\r\n    cy.getBySel(\"bankaccount-list\").should(\"not.contain\", bankName);\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// renders an empty bank account list state with onboarding modal\n\n  // <generated_code>\n\n  // Step 1: Navigate to the bank accounts page.\n\n  // This is typically done by clicking a navigation link.\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Step 2: Wait for the API call that lists bank accounts to complete.\n\n  // This ensures the page has attempted to load data before we make assertions.\n\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Step 3: Assert that the bank account list is not present.\n\n  // This assumes that if no bank accounts exist for the user, the list container itself is not rendered.\n\n  // An alternative or complementary assertion could be to check for a specific empty state message\n\n  // (e.g., cy.getBySel(\"empty-list-header\").should(\"be.visible\");).\n\n  cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\n\n  // Step 4: Assert that the onboarding modal is visible.\n\n  // This assumes 'onboarding-modal' is the correct data-test selector for the modal.\n\n  // Other common selectors could be 'user-onboarding-dialog'.\n\n  cy.getBySel(\"onboarding-modal\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// <generated_code>\n\n  // Navigate to the new transaction page\n\n  cy.getBySelLike(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Select the contact user from the list\n\n  // This assumes ctx.contact is populated and visible in the list.\n\n  // A more robust selector might search by username or name if the list order is not guaranteed.\n\n  if (ctx.contact?.username) {\n    cy.getBySel(\"user-list-item\").contains(ctx.contact.username).click();\n  } else {\n    // Fallback if username is not available, click the first available user (excluding self if possible)\n\n    // This part needs more information on how users are listed to make it robust.\n\n    // For now, clicking the first item, assuming it's a contact.\n\n    cy.getBySelLike(\"user-list-item\").first().click();\n  }\n\n  // Enter amount from userInfo.paymentTransactions[0].amount\n\n  cy.getBySel(\"amount-input\").type(userInfo.paymentTransactions[0].amount);\n\n  // Enter description from userInfo.paymentTransactions[0].description\n\n  cy.getBySel(\"transaction-create-description-input\").type(userInfo.paymentTransactions[0].description);\n\n  // Click Pay button\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Wait for transaction creation\n\n  cy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"equal\", 200);\n\n  // Assert that the user is redirected to the personal transactions page (or home page which defaults to personal)\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n  cy.getBySel(\"nav-personal-tab\").should(\"have.class\", \"Mui-selected\");\n\n  // Assert that the new transaction appears in the list\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.paymentTransactions[0].description).and(\"contain\", `$${userInfo.paymentTransactions[0].amount}`);\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// <generated_code>\n\n  // Navigate to the new transaction page\n\n  cy.getBySelLike(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Select the contact user\n\n  cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n  // Enter transaction request details\n\n  cy.getBySelLike(\"amount-input\").type(userInfo.requestTransactions[0].amount);\n  cy.getBySelLike(\"description-input\").type(userInfo.requestTransactions[0].description);\n\n  // Click the request button\n\n  cy.getBySelLike(\"submit-request\").click();\n\n  // Wait for the transaction to be created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify the transaction appears in the personal feed\n\n  cy.getBySel(\"personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.requestTransactions[0].description).and(\"contain\", `$${userInfo.requestTransactions[0].amount}`);\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// <generated_code>\n\n  // Navigate to the new transaction page\n\n  cy.getBySelLike(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Select a user\n\n  cy.getBySelLike(\"user-list-item\").first().click();\n\n  // Try to submit without entering an amount or description\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n\n  // Verify error messages for amount and description are displayed\n\n  cy.getBySel(\"transaction-create-amount-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n  cy.getBySel(\"transaction-create-description-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Please enter a note\");\n\n  // Enter an invalid amount (e.g., 0)\n\n  cy.getBySel(\"transaction-create-amount-input\").type(\"0\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.getBySel(\"transaction-create-amount-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Please enter a valid amount\");\n\n  // Clear amount and enter a valid amount\n\n  cy.getBySel(\"transaction-create-amount-input\").clear().type(\"50\");\n  cy.getBySel(\"transaction-create-amount-input-helper-text\").should(\"not.exist\");\n\n  // Submit without description (amount is valid now)\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.getBySel(\"transaction-create-description-input-helper-text\").should(\"be.visible\").and(\"contain\", \"Please enter a note\");\n\n  // Enter a description\n\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test description\");\n  cy.getBySel(\"transaction-create-description-input-helper-text\").should(\"not.exist\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// ...existing code...\r\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\r\r\n// <generated_code>\r\r\n        // Define payment details from userInfo\r\r\n        const paymentAmount = userInfo.paymentTransactions[0].amount;\r\r\n        const paymentDescription = userInfo.paymentTransactions[0].description;\r\r\n        let receiverInitialBalance: number;\r\r\n\r\r\n        // Get receiver's initial balance\r\r\n        cy.database(\"find\", \"users\", { id: ctx.contact!.id }).then((user: User) => {\r\r\n            receiverInitialBalance = user.balance;\r\r\n        });\r\r\n\r\r\n        // Navigate to new transaction form\r\r\n        cy.getBySel(\"nav-top-new-transaction\").click();\r\r\n        cy.wait(\"@allUsers\");\r\r\n\r\r\n        // Select the contact user\r\r\n        cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\n        cy.wait(\"@usersSearch\");\r\r\n        cy.getBySel(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n        // Enter payment amount\r\r\n        cy.getBySel(\"amount-input\").type(paymentAmount);\r\r\n\r\r\n        // Enter payment description\r\r\n        cy.getBySel(\"transaction-create-description-input\").type(paymentDescription);\r\r\n\r\r\n        // Submit payment\r\r\n        cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n\r\r\n        // Wait for transaction to be created\r\r\n        cy.wait(\"@createTransaction\");\r\r\n\r\r\n        // Logout as the sender\r\r\n        cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n        // Login as the receiver\r\r\n        cy.loginByXstate(ctx.contact!.username);\r\r\n\r\r\n        // Verify receiver's balance has increased\r\r\n        cy.database(\"find\", \"users\", { id: ctx.contact!.id }).then((user: User) => {\r\r\n            const expectedBalance = receiverInitialBalance + parseFloat(paymentAmount) * 100;\r\r\n            expect(user.balance).to.equal(expectedBalance);\r\r\n        });\r\r\n\r\r\n        // Go to personal transactions\r\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\r\n        cy.wait(\"@personalTransactions\");\r\r\n\r\r\n        // Verify the transaction appears in the receiver's list\r\r\n        cy.getBySel(\"transaction-item\")\r\r\n            .first()\r\r\n            .should(\"contain\", paymentDescription)\r\r\n            .and(\"contain\", `$${paymentAmount}`);\r\r\n// </generated_code>\r\r\n    });\r\r\n});\r\r\n// ...existing code...\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// <generated_code>\n\n  // Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Select the contact user\n\n  cy.getBySel(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n  // Enter request details from userInfo\n\n  cy.getBySel(\"amount\").type(userInfo.requestTransactions[0].amount);\n  cy.getBySel(\"transaction-create-description-input\").type(userInfo.requestTransactions[0].description);\n  cy.getBySel(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Logout as the sender\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Login as the receiver (contact)\n\n  cy.loginByXstate(ctx.contact!.username);\n\n  // Go to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.requestTransactions[0].description).click();\n\n  // Accept the request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is updated (e.g., shows as paid or completed)\n\n  // More information is needed on how the UI indicates an accepted request in the list.\n\n  // For now, we'll check that the \"accept\" button is gone, implying it was actioned.\n\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n  cy.getBySel(\"transaction-status\").should(\"contain\", \"paid\"); // Assuming 'paid' is the status after acceptance\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// ...existing code...\r\r\ndescribe(\"Notifications\", function () {\r\r\n    const ctx = {} as NotificationsCtx;\r\r\n    beforeEach(function () {\r\r\n        cy.task(\"db:seed\");\r\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\r\n        // For robust testing of likes, an intercept for POST /likes/* would be beneficial here.\r\r\n        // e.g., cy.intercept(\"POST\", \"/likes/*\").as(\"postLike\");\r\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\r\n            ctx.userA = users[0];\r\r\n            ctx.userB = users[1];\r\r\n            ctx.userC = users[2];\r\r\n        });\r\r\n    });\r\r\n    describe(\"notifications from user interactions\", function () {\r\r\n        // User A likes a transaction of User B; User B gets notification that User A liked transaction\r\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\r\r\n<generated_code>\r\r\n            // Step 1: User B logs in and creates a transaction (e.g., pays User C)\r\r\n            // This transaction will be \"a transaction of User B\"\r\r\n            cy.loginByXstate(ctx.userB.username);\r\r\n\r\r\n            cy.getBySel(\"new-transaction\").click();\r\r\n            // Select User C as the recipient\r\r\n            cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\r\r\n            cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).click({ force: true }); // Added force true for potential visibility issues\r\r\n            cy.getBySel(\"amount-input\").type(\"25\"); // Amount in dollars\r\r\n            cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction from B to C for A to like\");\r\r\n            cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n            cy.wait(\"@createTransaction\");\r\r\n\r\r\n            // Step 2: Capture the transaction ID from the URL\r\r\n            let transactionId: string;\r\r\n            cy.url().then(url => {\r\r\n                transactionId = url.split(\"/\").pop()!;\r\r\n                expect(transactionId).to.not.be.empty;\r\r\n            });\r\r\n\r\r\n            // Step 3: User B logs out\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Step 4: User A logs in\r\r\n            cy.loginByXstate(ctx.userA.username);\r\r\n\r\r\n            // Step 5: User A visits the transaction created by User B\r\r\n            cy.visit(`/transaction/${transactionId}`);\r\r\n\r\r\n            // Step 6: User A likes the transaction\r\r\n            cy.getBySel(\"like-button\").click();\r\r\n            // Optionally, wait for the like to be processed if cy.intercept(\"POST\", \"/likes/*\").as(\"postLike\"); was added in beforeEach\r\r\n            // cy.wait(\"@postLike\"); \r\r\n            cy.getBySel(\"transaction-like-count\").should(\"contain\", \"1\");\r\r\n\r\r\n            // Step 7: User A logs out\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Step 8: User B logs in again\r\r\n            cy.loginByXstate(ctx.userB.username);\r\r\n\r\r\n            // Step 9: User B checks notifications\r\r\n            // Notifications link could be in sidenav or top nav. Using a common selector.\r\r\n            cy.getBySel(\"sidenav-notifications\").click();\r\r\n            cy.wait(\"@getNotifications\");\r\r\n\r\r\n            // Step 10: Verify User B received a notification about User A's like\r\r\n            // The notification text might vary, adjust if necessary.\r\r\n            cy.getBySel(\"notification-list-item\")\r\r\n                .first()\r\r\n                .should(\"be.visible\")\r\r\n                .and(\"contain\", `${ctx.userA.firstName} ${ctx.userA.lastName} liked your transaction`);\r\r\n</generated_code>\r\r\n        });\r\r\n    });\r\r\n});\r\r\n// ...existing code...\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// <generated_code>\n\n  // Log in as User A and create a transaction with User B\n\n  cy.loginByXstate(ctx.userA.username);\n  cy.getBySel(\"nav-top-new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n  cy.getBySel(\"amount-input\").type(\"15\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test transaction for like\");\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n  let transactionId: string;\n  cy.url().then(url => {\n    transactionId = url.split(\"/\").pop()!;\n\n    // Log out User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User C\n\n    cy.loginByXstate(ctx.userC.username);\n    cy.wait(\"@getNotifications\"); // Wait for initial notifications to load\n\n    // Visit the transaction and like it\n\n    cy.visit(`/transaction/${transactionId}`);\n    cy.getBySelLike(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Log out User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User A and check notifications\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n\n    // Log out User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User B and check notifications\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n  });\n\n  // </generated_code>\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\nlet transactionId: string;\r\r\n\r\r\n  // Step 1: Login as User B and create a transaction (e.g., B to C)\r\r\n  cy.loginByXstate(ctx.userB.username);\r\r\n  cy.visit(\"/transaction/new\");\r\r\n\r\r\n  // Select User C as the recipient\r\r\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\r\r\n  cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).first().click();\r\r\n  \r\r\n  // Fill in transaction details\r\r\n  cy.getBySel(\"amount-input\").type(\"150\");\r\r\n  cy.getBySel(\"transaction-create-description-input\").type(`Transaction from ${ctx.userB.firstName} to ${ctx.userC.firstName} for comment test`);\r\r\n  cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n  cy.wait(\"@createTransaction\");\r\r\n\r\r\n  // Get the transaction ID from the URL\r\r\n  cy.url().should('include', '/transaction/').then(url => {\r\r\n    const parts = url.split('/');\r\r\n    transactionId = parts[parts.length - 1];\r\r\n    expect(transactionId).to.not.be.empty;\r\r\n  });\r\r\n\r\r\n  // Step 2: Logout User B\r\r\n  cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n  // Step 3: Login as User A\r\r\n  cy.loginByXstate(ctx.userA.username);\r\r\n  cy.wait(\"@getNotifications\"); // Wait for initial notifications\r\r\n\r\r\n  // Step 4: User A navigates to the transaction and posts a comment\r\r\n  cy.visit(`/transaction/${transactionId}`);\r\r\n  const commentText = `A test comment by ${ctx.userA.firstName} ${ctx.userA.lastName}.`;\r\r\n  cy.getBySel(\"comment-input\").type(commentText);\r\r\n  cy.getBySel(\"comment-submit\").click();\r\r\n  cy.wait(\"@postComment\");\r\r\n\r\r\n  // Verify the comment appears on the transaction page for User A\r\r\n  cy.contains(commentText).should(\"be.visible\");\r\r\n\r\r\n  // Step 5: Logout User A\r\r\n  cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n  // Step 6: Login as User B\r\r\n  cy.loginByXstate(ctx.userB.username);\r\r\n  cy.wait(\"@getNotifications\"); // Wait for notifications to load for User B\r\r\n\r\r\n  // Step 7: User B checks notifications\r\r\n  // Navigate to home or a page where notification icon is visible, then click it\r\r\n  cy.visit(\"/\"); \r\r\n  cy.wait(\"@getNotifications\"); // Ensure notifications are fetched on home page\r\r\n  cy.getBySel(\"nav-top-notifications-link\").click(); \r\r\n  // Potentially wait again if clicking the link triggers a new fetch or navigation\r\r\n  // cy.wait(\"@getNotifications\"); \r\r\n\r\r\n  // Step 8: Assert User B received the notification from User A\r\r\n  cy.getBySel(\"notification-list-item\")\r\r\n    .first() // Assuming the latest notification is at the top\r\r\n    .should(\"contain\", `${ctx.userA.firstName} ${ctx.userA.lastName}`)\r\r\n    .and(\"contain\", \"commented\"); // Common notification text for comments\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// ...existing code...\r\r\n    describe(\"notifications from user interactions\", function () {\r\r\n        // it: User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\r\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\r\r\n            <generated_code>\r\r\n            const transactionAmount = \"125\";\r\r\n            const transactionDescription = \"Test transaction for comment by User C\";\r\r\n            const commentText = \"User C's insightful comment on this transaction.\";\r\r\n            let transactionId: string;\r\r\n\r\r\n            // Step 1: User A creates a transaction with User B\r\r\n            cy.loginByXstate(ctx.userA.username);\r\r\n            cy.getBySel(\"nav-top-new-transaction\").click();\r\r\n            cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\n            cy.getBySel(\"user-list-item\").contains(`${ctx.userB.firstName} ${ctx.userB.lastName}`).click();\r\r\n            cy.getBySel(\"amount-input\").type(transactionAmount);\r\r\n            cy.getBySel(\"transaction-create-description-input\").type(transactionDescription);\r\r\n            cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n            cy.wait(\"@createTransaction\");\r\r\n\r\r\n            // Capture the transaction ID from the URL\r\r\n            cy.url().then(url => {\r\r\n                transactionId = url.split(\"/\").pop()!;\r\r\n            });\r\r\n\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Step 2: User C logs in and comments on the transaction\r\r\n            cy.loginByXstate(ctx.userC.username);\r\r\n            cy.visit(`/transaction/${transactionId}`);\r\r\n            cy.getBySel(\"comment-input\").type(commentText);\r\r\n            cy.getBySel(\"comment-submit\").click();\r\r\n            cy.wait(\"@postComment\");\r\r\n            cy.getBySel(\"comments-list\").should(\"contain\", commentText);\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Step 3: User A checks for notification from User C\r\r\n            cy.loginByXstate(ctx.userA.username);\r\r\n            cy.visit(\"/\"); \r\r\n            cy.wait(\"@getNotifications\");\r\r\n            cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n            cy.getBySel(\"notification-list-item\")\r\r\n                .first()\r\r\n                .should(\"be.visible\")\r\r\n                .and(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} commented on your transaction`);\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Step 4: User B checks for notification from User C\r\r\n            cy.loginByXstate(ctx.userB.username);\r\r\n            cy.visit(\"/\");\r\r\n            cy.wait(\"@getNotifications\");\r\r\n            cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n            cy.getBySel(\"notification-list-item\")\r\r\n                .first()\r\r\n                .should(\"be.visible\")\r\r\n                .and(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} commented on your transaction`);\r\r\n            </generated_code>\r\r\n        });\r\r\n    });\r\r\n// ...existing code...\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// ...existing code...\r\r\n    describe(\"notifications from user interactions\", function () {\r\r\n        it(\"User A sends a payment to User B\", () => { \r\r\n// <generated_code>\r\r\n            // Log in as User A\r\r\n            cy.loginByXstate(ctx.userA.username);\r\r\n\r\r\n            // Navigate to the new transaction page\r\r\n            cy.getBySel(\"new-transaction\").click();\r\r\n\r\r\n            // Select User B from the list\r\r\n            cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\r\r\n\r\r\n            // Enter payment details\r\r\n            const paymentAmount = \"50\";\r\r\n            const paymentNote = \"Payment for lunch\";\r\r\n            cy.getBySel(\"amount-input\").type(paymentAmount);\r\r\n            cy.getBySel(\"transaction-create-description-input\").type(paymentNote);\r\r\n\r\r\n            // Submit the payment\r\r\n            cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n            cy.wait(\"@createTransaction\");\r\r\n\r\r\n            // Log out User A\r\r\n            cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n            // Log in as User B\r\r\n            cy.loginByXstate(ctx.userB.username);\r\r\n\r\r\n            // Check for notifications\r\r\n            cy.getBySel(\"sidenav-notifications\").click();\r\r\n            cy.wait(\"@getNotifications\");\r\r\n\r\r\n            // Verify the notification content\r\r\n            cy.getBySel(\"notification-list-item\")\r\r\n                .first()\r\r\n                .should(\"be.visible\")\r\r\n                .and(\"contain\", ctx.userA.firstName)\r\r\n                .and(\"contain\", \"paid you\")\r\r\n                .and(\"contain\", `$${paymentAmount}.00`);\r\r\n// </generated_code>\r\r\n        });\r\r\n    });\r\r\n});\r\r\n// ...existing code...\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// User A sends a payment request to User C\n\n  // Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to the new transaction page\n\n  cy.getBySel(\"new-transaction\").click();\n\n  // Select User C from the list\n\n  cy.getBySelLike(\"user-list-search-input\").type(ctx.userC.username);\n  cy.getBySelLike(\"user-list-item\").first().click();\n\n  // Enter amount and description for the request\n\n  cy.getBySelLike(\"amount-input\").type(\"50\");\n  cy.getBySelLike(\"description-input\").type(\"Payment request for dinner\");\n\n  // Click on the request button\n\n  cy.getBySelLike(\"submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Log out User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Log in as User C\n\n  cy.loginByXstate(ctx.userC.username);\n\n  // Navigate to notifications page\n\n  cy.getBySel(\"sidenav-notifications\").click();\n  cy.wait(\"@getNotifications\");\n\n  // Verify notification from User A is present\n\n  cy.getBySel(\"notification-list-item\").should(\"be.visible\").and(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested payment\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// Create a brand new user that won't have notifications to ensure an empty state\r\r\n    cy.task(\"db:seed:user\").then((newUser: User) => {\r\r\n        // Log in as the newly created user\r\r\n        cy.loginByXstate(newUser.username);\r\r\n        cy.wait(\"@getNotifications\"); // Wait for any initial notification fetch\r\r\n\r\r\n        // Navigate to the notifications page\r\r\n        if (isMobile()) {\r\r\n            cy.getBySel(\"sidenav-toggle\").click(); // Toggle sidenav if on mobile\r\r\n        }\r\r\n        cy.getBySel(\"notifications-link\").click(); // Click on the notifications link\r\r\n        \r\r\n        // It's possible notifications are fetched again upon navigation\r\r\n        cy.wait(\"@getNotifications\");\r\r\n\r\r\n        // Verify that the empty state message is displayed\r\r\n        cy.getBySel(\"empty-list-header\").should(\"be.visible\");\r\r\n        cy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\r\r\n\r\r\n        // Additionally, verify that no notification items are present in the list\r\r\n        cy.getBySel(\"notification-list-item\").should(\"not.exist\");\r\r\n    });\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n//<generated_code>\n\n  // Check if running on mobile\n\n  if (isMobile()) {\n    // On mobile, the drawer should be closed initially\n\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n\n    // Open the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n    // Close the drawer by clicking the backdrop\n\n    cy.get(\".MuiBackdrop-root\").click();\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n  } else {\n    // On desktop, the drawer should be open initially\n\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n\n    // Close the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n    cy.getBySel(\"sidenav-drawer\").should(\"not.be.visible\");\n\n    // Open the drawer\n\n    cy.getBySel(\"sidenav-toggle\").click();\n    cy.getBySel(\"sidenav-drawer\").should(\"be.visible\");\n  }\n\n  //</generated_code>\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// it(\"first five items belong to contacts in public feed\", () => {\r\r\n    // Navigate to public feed\r\r\n    cy.getBySel(feedViews.public.selector).click();\r\r\n    cy.wait(`@${feedViews.public.routeAlias}`);\r\r\n\r\r\n    // Get the user's contacts first\r\r\n    cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\r\n        const contactIds = contacts.map(contact => contact.contactUserId);\r\r\n\r\r\n        // Get the first 5 transactions (or fewer if less than 5 exist)\r\r\n        cy.getBySel(\"transaction-item\").then(($items) => {\r\r\n            const numItems = $items.length;\r\r\n            const count = Math.min(5, numItems);\r\r\n\r\r\n            if (count === 0) {\r\r\n                cy.log(\"No transactions in public feed to check.\");\r\r\n                return;\r\r\n            }\r\r\n\r\r\n            for (let i = 0; i < count; i++) {\r\r\n                cy.wrap($items[i]).within(() => {\r\r\n                    // Check if sender or receiver is a contact or the user themselves\r\r\n                    // This requires inspecting the sender/receiver user IDs within the transaction item.\r\r\n                    // The exact selectors for sender/receiver IDs might need adjustment based on actual DOM structure.\r\r\n                    // Assuming data attributes like 'data-sender-id' and 'data-receiver-id' exist on elements within the transaction item.\r\r\n                    let senderId: string | undefined;\r\r\n                    let receiverId: string | undefined;\r\r\n\r\r\n                    cy.get(\"[data-test*='transaction-sender-']\").invoke('attr', 'data-test').then(senderDataTest => {\r\r\n                        senderId = senderDataTest?.split('-')[2];\r\r\n                        cy.get(\"[data-test*='transaction-receiver-']\").invoke('attr', 'data-test').then(receiverDataTest => {\r\r\n                            receiverId = receiverDataTest?.split('-')[2];\r\r\n\r\r\n                            const isSenderContact = contactIds.includes(senderId!);\r\r\n                            const isReceiverContact = contactIds.includes(receiverId!);\r\r\n                            const isSenderUser = senderId === ctx.user!.id;\r\r\n                            const isReceiverUser = receiverId === ctx.user!.id;\r\r\n\r\r\n                            // In the public feed, transactions should ideally be between anyone.\r\r\n                            // If the test intends to check if *these specific first five* involve contacts of the logged-in user,\r\r\n                            // then the assertion should be that at least one party (sender or receiver) is a contact OR the user themselves.\r\r\n                            // However, \"belong to contacts\" usually implies the transaction is *between* a contact and someone else, or between two contacts.\r\r\n                            // Given the context of a \"public\" feed, it's more likely that we are checking if *any* of the involved parties are known to the user (i.e., are contacts).\r\r\n                            // A stricter interpretation \"belong to contacts\" might mean *both* parties are contacts, or one is a contact and the other is not the user.\r\r\n                            // For this, I'll assume \"belong to contacts\" means at least one of the participants is a contact of the logged-in user.\r\r\n                            // Or, if not a contact, it could be a transaction involving the user themselves if that's considered \"belonging\".\r\r\n\r\r\n                            // The original test name \"first five items belong to contacts in public feed\" is a bit ambiguous.\r\r\n                            // A transaction \"belongs\" to a contact if:\r\r\n                            // 1. The contact is the sender.\r\r\n                            // 2. The contact is the receiver.\r\r\n                            // It does not necessarily mean the *other* party is also a contact or the user.\r\r\n                            // The public feed shows transactions from everyone.\r\r\n                            // This test seems to want to verify that among the displayed public transactions,\r\r\n                            // those involving the user's contacts are visible.\r\r\n\r\r\n                            // Let's refine the check: a transaction \"belongs to contacts\" if either the sender or receiver is one of the user's contacts.\r\r\n                            // It's also possible the transaction involves the user themselves, which might also be relevant in some contexts of \"belonging\".\r\r\n                            // For a public feed, it's expected to see transactions not involving the user or their contacts.\r\r\n                            // The test \"first five items belong to contacts\" implies an expectation that these specific items *must* involve contacts.\r\r\n                            // This might be a specific seeding scenario.\r\r\n\r\r\n                            // If the intent is that *each* of the first five items *must* involve a contact:\r\r\n                            expect(isSenderContact || isReceiverContact || isSenderUser || isReceiverUser).to.be.true;\r\r\n                        });\r\r\n                    });\r\r\n                });\r\r\n            }\r\r\n        });\r\r\n    });\r\r\n// });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// Get the current user's contacts\n\n  cy.database(\"filter\", \"contacts\", {\n    userId: ctx.user!.id\n  }).then((contacts: Contact[]) => {\n    const contactIds = contacts.map(contact => contact.contactUserId);\n\n    // Navigate to the friends feed\n\n    cy.getBySel(feedViews.contacts.tab).click();\n    cy.wait(`@${feedViews.contacts.routeAlias}`);\n\n    // Check if the feed is empty\n\n    cy.get(\"body\").then($body => {\n      if ($body.find(\"[data-test=empty-list-header]\").length > 0) {\n        // If the list is empty, the test passes as there are no non-contact transactions\n\n        cy.log(\"Friends feed is empty. Test considered passing.\");\n        return;\n      }\n\n      // Verify each transaction item\n\n      cy.getBySel(\"transaction-item\").each($el => {\n        // Get sender and receiver user IDs from data attributes\n\n        // Assuming sender/receiver id is part of a data-test attribute like 'transaction-sender-USER_ID'\n\n        let senderId: string | undefined;\n        let receiverId: string | undefined;\n        cy.wrap($el).find(\"[data-test*='transaction-sender-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n          senderId = dataTest?.replace(\"transaction-sender-\", \"\");\n        });\n        cy.wrap($el).find(\"[data-test*='transaction-receiver-']\").invoke(\"attr\", \"data-test\").then(dataTest => {\n          receiverId = dataTest?.replace(\"transaction-receiver-\", \"\");\n        }).then(() => {\n          // A transaction is valid if:\n\n          // 1. The current user sent it to a contact\n\n          // 2. The current user received it from a contact\n\n          // 3. It's between two of the current user's contacts\n\n          const isSenderContact = senderId ? contactIds.includes(senderId) : false;\n          const isReceiverContact = receiverId ? contactIds.includes(receiverId) : false;\n          const isSenderCurrentUser = senderId === ctx.user!.id;\n          const isReceiverCurrentUser = receiverId === ctx.user!.id;\n          const isValidFriendTransaction = isSenderCurrentUser && isReceiverContact || isReceiverCurrentUser && isSenderContact || isSenderContact && isReceiverContact;\n          expect(isValidFriendTransaction, `Transaction between ${senderId} and ${receiverId} is valid for friends feed`).to.be.true;\n        });\n      });\n    });\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// Ensure the user is on a page with a transaction feed.\r\r\n  // The beforeEach handles login. Navigating to /personal ensures a consistent starting point.\r\r\n  cy.visit(\"/personal\");\r\r\n  cy.wait(`@${feedViews.personal.routeAlias}`);\r\r\n\r\r\n  // Click the date range filter button to open the picker/modal.\r\r\n  // This assumes a data-test attribute \"date-range-filter\" for the button.\r\r\n  cy.getBySel(\"date-range-filter\").click();\r\r\n\r\r\n  // Assert that the date range picker modal is visible.\r\r\n  // This assumes a data-test attribute \"date-picker-dialog\" for the modal.\r\r\n  cy.getBySel(\"date-picker-dialog\").should(\"be.visible\");\r\r\n\r\r\n  // Click the close/cancel button in the modal.\r\r\n  // This assumes a data-test attribute \"date-picker-cancel-button\" for this button.\r\r\n  cy.getBySel(\"date-picker-cancel-button\").click();\r\r\n\r\r\n  // Assert that the date range picker modal is no longer visible.\r\r\n  // It might become 'not.be.visible' or 'not.exist' depending on implementation.\r\r\n  cy.getBySel(\"date-picker-dialog\").should(\"not.exist\");\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// Click on the first transaction in the list to navigate to its detail page\n\n  cy.getBySelLike(\"transaction-item\").first().click();\n  cy.wait(\"@getTransaction\");\n\n  // Assert that the navigation tabs are not visible\n\n  cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n  cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Ensure a transaction is available\n\n  if (!ctx.transactionRequest) {\n    throw new Error(\"Test requires a transaction to exist.\");\n  }\n\n  // Navigate to the transaction detail page\n\n  cy.getBySel(\"transaction-item\").first().click();\n  cy.wait(\"@getTransaction\");\n\n  // Get the initial like count\n\n  cy.getBySelLike(\"like-count\").invoke(\"text\").then(parseInt).then(initialLikeCount => {\n    // Click the like button\n\n    cy.getBySelLike(\"like-button\").click();\n\n    // Wait for the like transaction to complete\n\n    cy.wait(\"@likeTransaction\");\n\n    // Verify the like count has increased by 1\n\n    cy.getBySelLike(\"like-count\").invoke(\"text\").then(parseInt).should(\"equal\", initialLikeCount + 1);\n\n    // Verify the like button is disabled (or shows an \"un-like\" state if applicable)\n\n    // This assertion might need adjustment based on actual app behavior\n\n    cy.getBySelLike(\"like-button\").should(\"be.disabled\");\n  });\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// Ensure a transaction request is available\n\n  if (!ctx.transactionRequest) {\n    throw new Error(\"Test requires a transaction request to be present in the context.\");\n  }\n\n  // Visit the transaction detail page\n\n  cy.visit(`/transaction/${ctx.transactionRequest.id}`);\n  cy.wait(\"@getTransaction\");\n  const commentText = \"This is a test comment!\";\n\n  // Type a comment\n\n  cy.getBySel(\"transaction-comment-input\").type(commentText);\n\n  // Click the submit comment button\n\n  cy.getBySel(\"transaction-comment-submit\").click();\n\n  // Wait for the comment to be posted (assuming an intercept for comments if it exists, or a reasonable delay)\n\n  // cy.wait(\"@postComment\"); // Add this if you have an intercept for POST /comments/*\n\n  // Verify the comment is displayed\n\n  cy.getBySel(\"comment-list\").should(\"contain\", commentText);\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// ...existing code...\r\r\n    it(\"accepts a transaction request\", () => {\r\r\n        // <generated_code>\r\r\n        // Ensure a transaction request exists\r\r\n        if (!ctx.transactionRequest) {\r\r\n            throw new Error(\"Test setup failed: No transaction request found for the user.\");\r\r\n        }\r\r\n\r\r\n        // Find the transaction request in the list and click on it\r\r\n        // We need a reliable way to select the specific transaction.\r\r\n        // Assuming the description or amount can be used, or it's the first one.\r\r\n        // For this example, let's assume it's identifiable by its ID if possible,\r\r\n        // or by a combination of amount and description if those are unique enough.\r\r\n        // Since we have ctx.transactionRequest, we can use its properties.\r\r\n        cy.contains(\"[data-test^=transaction-item]\", ctx.transactionRequest.description)\r\r\n            .should(\"be.visible\")\r\r\n            .click();\r\r\n\r\r\n        // Wait for the transaction detail to load\r\r\n        cy.wait(\"@getTransaction\");\r\r\n\r\r\n        // Click the accept button\r\r\n        cy.getBySel(\"transaction-accept-request\").click();\r\r\n\r\r\n        // Wait for the update transaction call\r\r\n        cy.wait(\"@updateTransaction\");\r\r\n\r\r\n        // Verify the transaction status is updated to complete or paid\r\r\n        // The exact text might vary based on the application's UI\r\r\n        cy.getBySel(\"transaction-detail-header\") // Or a more specific selector for status\r\r\n            .should(\"contain\", \"complete\", { matchCase: false }); // Or \"paid\" or similar\r\r\n\r\r\n        // Optionally, verify a success notification\r\r\n        cy.get(\".MuiAlert-message\").should(\"contain\", \"Transaction accepted\"); // Adjust selector and text as needed\r\r\n        // </generated_code>\r\r\n    });\r\r\n});\r\r\n// ...existing code...\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Ensure a transaction request exists\n\n  if (!ctx.transactionRequest) {\n    throw new Error(\"Test setup failed: ctx.transactionRequest is undefined\");\n  }\n\n  // Click on the transaction request to open details\n\n  cy.contains(ctx.transactionRequest.description).click({\n    force: true\n  }); // Use force if element is covered or animated\n\n  // Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Click the reject button\n\n  cy.getBySel(\"transaction-reject-request\").click();\n\n  // Wait for the transaction to be updated\n\n  cy.wait(\"@updateTransaction\");\n\n  // Assert the transaction is marked as rejected\n\n  // This assertion might need to be adjusted based on how \"rejected\" status is displayed\n\n  // For example, it might be text on the page, or the item might disappear from a \"pending\" list\n\n  // and appear in a \"completed\" or \"archived\" list with a \"rejected\" status.\n\n  // Assuming the detail view updates to show \"rejected\"\n\n  cy.getBySel(\"transaction-status\").should(\"contain\", \"rejected\");\n\n  // Go back to personal feed to verify it's not in the active list or shows as rejected\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Check if the transaction item now reflects the rejected status or is removed\n\n  // This depends on the application's behavior for rejected requests.\n\n  // Option 1: The item still exists and shows a rejected status\n\n  cy.contains(ctx.transactionRequest.description).closest(\"[data-test^=transaction-item]\").should(\"contain\", \"rejected\"); // Adjust selector and text as needed\n\n  // Option 2: The item is removed from the main list of active/pending requests\n\n  // cy.contains(ctx.transactionRequest.description).should('not.exist');\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Verify that the user settings form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify that all input fields are present and visible\n\n  // Note: To thoroughly test pre-filled values, access to the currently logged-in user's data (from the beforeEach block) would be required here.\n\n  // The provided 'updatedUserInfo' is intended for tests related to updating user information, not for verifying the initial render state of the form.\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-email-input\").should(\"be.visible\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n\n  // Verify that the submit button is present and visible\n\n  cy.getBySel(\"user-settings-submit\").should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// <generated_code>\n\n  // Test: should display user setting form errors\n\n  // Clear First Name field\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n\n  // Clear Last Name field\n\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n\n  // Clear Email field\n\n  cy.getBySel(\"user-settings-email-input\").clear();\n\n  // Clear Phone Number field\n\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Click the save button\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify validation error messages\n\n  cy.contains(\"Enter a first name\").should(\"be.visible\");\n  cy.contains(\"Enter a last name\").should(\"be.visible\");\n  cy.contains(\"Enter an email address\").should(\"be.visible\");\n  cy.contains(\"Enter a phone number\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// <generated_code>\n\n  // Clear and type the new first name\n\n  cy.getBySel(\"user-settings-firstName-input\").clear().type(\"New First Name\");\n\n  // Clear and type the new last name\n\n  cy.getBySel(\"user-settings-lastName-input\").clear().type(\"New Last Name\");\n\n  // Clear and type the new email\n\n  cy.getBySel(\"user-settings-email-input\").clear().type(\"email@email.com\");\n\n  // Clear and type the new phone number\n\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear().type(\"6155551212\");\n\n  // Click the submit button\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Wait for the updateUser API call\n\n  cy.wait(\"@updateUser\");\n\n  // Reload the page to verify persistence\n\n  cy.reload();\n\n  // Assert that the first name input field has the updated value\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", \"New First Name\");\n\n  // Assert that the last name input field has the updated value\n\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", \"New Last Name\");\n\n  // Assert that the email input field has the updated value\n\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", \"email@email.com\");\n\n  // Assert that the phone number input field has the updated value\n\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", \"6155551212\");\n\n  // </generated_code>\n });\r\n});\r\n"
  },
  "gpt_4o": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// it(\"should redirect unauthenticated user to signin page\", () => { });\r\r\n<generated_code>\r\r\n    // Attempt to visit a protected page without authentication\r\r\n    cy.visit(\"/bankaccounts\");\r\r\n\r\r\n    // Assert that the user is redirected to the signin page\r\r\n    cy.url().should(\"include\", \"/signin\");\r\r\n\r\r\n    // Verify that the signin page elements are visible\r\r\n    cy.getBySel(\"signin-title\").should(\"be.visible\");\r\r\n    cy.getBySel(\"signin-username\").should(\"be.visible\");\r\r\n    cy.getBySel(\"signin-password\").should(\"be.visible\");\r\r\n    cy.getBySel(\"signin-submit\").should(\"be.visible\");\r\r\n</generated_code>\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// it(\"should redirect to the home page after login\", () => { });\r\r\n\r\r\n<generated_code>\r\r\n// Test: Redirect to the home page after login\r\r\nit(\"should redirect to the home page after login\", () => {\r\r\n    // Step 1: Visit the sign-in page\r\r\n    cy.visit(\"/signin\");\r\r\n\r\r\n    // Step 2: Fill in valid login credentials\r\r\n    cy.get(\"[data-test='signin-username']\").type(\"PainterJoy90\");\r\r\n    cy.get(\"[data-test='signin-password']\").type(\"s3cret\");\r\r\n\r\r\n    // Step 3: Submit the login form\r\r\n    cy.get(\"[data-test='signin-submit']\").click();\r\r\n\r\r\n    // Step 4: Verify redirection to the home page\r\r\n    cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\r\r\n\r\r\n    // Step 5: Verify that the user's full name is displayed in the sidebar\r\r\n    cy.get(\"[data-test='sidenav-user-full-name']\").should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\r\r\n});\r\r\n</generated_code>\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// <generated_code>\n\n  // Visit the sign-in page\n\n  cy.visit(\"/signin\");\n\n  // Fill in login credentials\n\n  cy.get(\"[data-test=signin-username]\").type(\"PainterJoy90\");\n  cy.get(\"[data-test=signin-password]\").type(\"s3cret\");\n\n  // Check the \"Remember Me\" checkbox\n\n  cy.get(\"[data-test=signin-remember-me]\").check();\n\n  // Submit the login form\n\n  cy.get(\"[data-test=signin-submit]\").click();\n\n  // Verify successful login by checking the URL\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Verify the session cookie exists and has a long expiration date\n\n  cy.getCookie(\"connect.sid\").then(cookie => {\n    const cookieExpirationDate = new Date(cookie!.expiry! * 1000);\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.setDate(now.getDate() + 30));\n\n    // Assert that the cookie expiration date is approximately 30 days from now\n\n    const daysDifference = Math.round((cookieExpirationDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n    expect(daysDifference).to.be.closeTo(30, 1);\n  });\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// <generated_code>\n\n  // Step 1: Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Step 2: Fill out the signup form\n\n  cy.getBySel(\"signup-first-name\").type(\"Bob\");\n  cy.getBySel(\"signup-last-name\").type(\"Ross\");\n  cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signup-password\").type(\"s3cret\");\n  cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n  // Step 3: Submit the signup form\n\n  cy.getBySel(\"signup-submit\").click();\n\n  // Step 4: Verify redirection to the signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n\n  // Step 5: Login with the newly created user credentials\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\n  cy.getBySel(\"signin-submit\").click();\n\n  // Step 6: Verify redirection to the home page\n\n  cy.location(\"pathname\").should(\"equal\", \"/\");\n\n  // Step 7: Logout\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Step 8: Verify redirection back to the signin page\n\n  cy.location(\"pathname\").should(\"equal\", \"/signin\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// <generated_code>\n\n  // Visit the sign-in page\n\n  cy.visit(\"/signin\");\n\n  // Attempt to submit the form without entering any credentials\n\n  cy.get(\"button[type='submit']\").click();\n\n  // Assert that error messages are displayed for missing username and password\n\n  cy.contains(\"Username is required\").should(\"be.visible\");\n  cy.contains(\"Password is required\").should(\"be.visible\");\n\n  // Enter an invalid username and valid password\n\n  cy.get(\"input[name='username']\").type(\"invalidUserName\");\n  cy.get(\"input[name='password']\").type(\"s3cret\");\n  cy.get(\"button[type='submit']\").click();\n\n  // Assert that an error message is displayed for invalid username\n\n  cy.contains(\"Incorrect username or password.\").should(\"be.visible\");\n\n  // Enter a valid username and invalid password\n\n  cy.get(\"input[name='username']\").clear().type(\"PainterJoy90\");\n  cy.get(\"input[name='password']\").clear().type(\"invalidPa$word\");\n  cy.get(\"button[type='submit']\").click();\n\n  // Assert that an error message is displayed for invalid password\n\n  cy.contains(\"Incorrect username or password.\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// <generated_code>\n\n  // Visit the signup page\n\n  cy.visit(\"/signup\");\n\n  // Submit the form without filling any fields\n\n  cy.get(\"[data-test='signup-submit']\").click();\n\n  // Assert error messages for required fields\n\n  cy.get(\"[data-test='signup-first-name']\").should(\"have.class\", \"Mui-error\");\n  cy.get(\"[data-test='signup-last-name']\").should(\"have.class\", \"Mui-error\");\n  cy.get(\"[data-test='signup-username']\").should(\"have.class\", \"Mui-error\");\n  cy.get(\"[data-test='signup-password']\").should(\"have.class\", \"Mui-error\");\n  cy.get(\"[data-test='signup-confirmPassword']\").should(\"have.class\", \"Mui-error\");\n\n  // Enter mismatched passwords\n\n  cy.get(\"[data-test='signup-first-name']\").type(\"Bob\");\n  cy.get(\"[data-test='signup-last-name']\").type(\"Ross\");\n  cy.get(\"[data-test='signup-username']\").type(\"PainterJoy90\");\n  cy.get(\"[data-test='signup-password']\").type(\"s3cret\");\n  cy.get(\"[data-test='signup-confirmPassword']\").type(\"INVALID\");\n  cy.get(\"[data-test='signup-submit']\").click();\n\n  // Assert error message for mismatched passwords\n\n  cy.contains(\"Password does not match\").should(\"be.visible\");\n\n  // Enter a short password\n\n  cy.get(\"[data-test='signup-password']\").clear().type(\"123\");\n  cy.get(\"[data-test='signup-confirmPassword']\").clear().type(\"123\");\n  cy.get(\"[data-test='signup-submit']\").click();\n\n  // Assert error message for password length\n\n  cy.contains(\"Password must contain at least 4 characters\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// <generated_code>\n\n  // Visit the sign-in page\n\n  cy.visit(\"/signin\");\n\n  // Enter invalid username and valid password\n\n  cy.get(\"[data-test=signin-username]\").type(\"invalidUserName\");\n  cy.get(\"[data-test=signin-password]\").type(\"s3cret\");\n\n  // Submit the form\n\n  cy.get(\"[data-test=signin-submit]\").click();\n\n  // Assert that the error message is displayed\n\n  cy.get(\"[data-test=signin-error]\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// <generated_code>\n\n  // Visit the sign-in page\n\n  cy.visit(\"/signin\");\n\n  // Enter valid username but invalid password\n\n  cy.get(\"[data-test='signin-username']\").type(\"PainterJoy90\");\n  cy.get(\"[data-test='signin-password']\").type(\"invalidPa$word\");\n\n  // Submit the login form\n\n  cy.get(\"[data-test='signin-submit']\").click();\n\n  // Verify error message is displayed\n\n  cy.get(\"[data-test='signin-error']\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// <generated_code>\n\n  // Navigate to the Bank Accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Click on the \"Create\" button to open the bank account form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Fill out the bank account form with the provided test data\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Wait for the GraphQL mutation to complete\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n\n  // Assert that the new bank account appears in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// <generated_code>\n\n  // Step 1: Navigate to the bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Step 2: Click on the \"Create\" button to open the bank account form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Step 3: Attempt to submit the form with missing fields\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Step 4: Verify error messages for each required field\n\n  cy.getBySel(\"bankaccount-bankName-input-error\").should(\"be.visible\").and(\"contain\", \"Bank name is required\");\n  cy.getBySel(\"bankaccount-routingNumber-input-error\").should(\"be.visible\").and(\"contain\", \"Routing number is required\");\n  cy.getBySel(\"bankaccount-accountNumber-input-error\").should(\"be.visible\").and(\"contain\", \"Account number is required\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"soft deletes a bank account\", () => {\n// <generated_code>\n\n  // Step 1: Navigate to the bank accounts page\n\n  cy.getBySel(\"sidenav-bankaccounts\").click();\n\n  // Step 2: Wait for the bank accounts list to load\n\n  cy.wait(\"@gqlListBankAccountQuery\");\n\n  // Step 3: Select the first bank account and click the delete button\n\n  cy.getBySel(\"bankaccount-list\").find(\"[data-test='bankaccount-delete']\").first().click();\n\n  // Step 4: Confirm the deletion\n\n  cy.getBySel(\"confirmation-dialog-confirm\").click();\n\n  // Step 5: Wait for the delete mutation to complete\n\n  cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n  // Step 6: Assert that the bank account is no longer visible in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"not.contain\", \"The Best Bank\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// <generated_code>\n\n  // Step 1: Seed the database to reset the state\n\n  cy.task(\"db:seed\");\n\n  // Step 2: Log in with a user who has no bank accounts\n\n  cy.database(\"find\", \"users\").then((user: User) => {\n    cy.loginByXstate(user.username);\n\n    // Step 3: Navigate to the bank accounts page\n\n    cy.getBySel(\"sidenav-bankaccounts\").click();\n\n    // Step 4: Verify that the bank account list is empty\n\n    cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\n\n    // Step 5: Verify that the onboarding modal is displayed\n\n    cy.getBySel(\"onboarding-modal\").should(\"be.visible\");\n  });\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => { });\r\r\n<generated_code>\r\r\n// Navigate to the new transaction form\r\r\ncy.getBySel(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Search for the contact user\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\ncy.wait(\"@usersSearch\");\r\r\n\r\r\n// Select the first user from the search results\r\r\ncy.getBySel(\"user-list-item\").first().click();\r\r\n\r\r\n// Fill out the payment form\r\r\ncy.getBySel(\"amount-input\").type(\"35\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\r\r\n\r\r\n// Submit the payment\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Verify the transaction was created successfully\r\r\ncy.getBySel(\"transaction-success\").should(\"contain\", \"Transaction submitted successfully\");\r\r\n</generated_code>\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// <generated_code>\n\n  // Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for a user by name\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out the request form\n\n  cy.getBySel(\"amount-input\").type(userInfo.requestTransactions[0].amount);\n  cy.getBySel(\"transaction-create-description-input\").type(userInfo.requestTransactions[0].description);\n\n  // Submit the request\n\n  cy.getBySelLike(\"transaction-create-submit-request\").click();\n\n  // Confirm the transaction request was created\n\n  cy.wait(\"@createTransaction\");\n\n  // Verify the request appears in the personal transactions feed\n\n  cy.getBySel(\"personal-tab\").should(\"have.class\", \"Mui-selected\");\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.requestTransactions[0].description);\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", `$${userInfo.requestTransactions[0].amount}`);\n\n  // </generated_code>\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// it(\"displays new transaction errors\", () => { });\r\r\n<generated_code>\r\r\n    it(\"displays new transaction errors\", () => {\r\r\n        // Navigate to the new transaction form\r\r\n        cy.getBySelLike(\"new-transaction\").click();\r\r\n        cy.wait(\"@allUsers\");\r\r\n\r\r\n        // Select a user from the list\r\r\n        cy.getBySelLike(\"user-list-item\").first().click();\r\r\n\r\r\n        // Attempt to submit the form without entering any details\r\r\n        cy.getBySelLike(\"submit-payment\").click();\r\r\n\r\r\n        // Verify error messages for missing amount and description\r\r\n        cy.get(\".MuiFormHelperText-root\")\r\r\n            .should(\"contain\", \"Please enter a valid amount\")\r\r\n            .and(\"contain\", \"Please enter a note\");\r\r\n\r\r\n        // Enter an invalid amount (e.g., 0) and leave the description empty\r\r\n        cy.getBySelLike(\"amount-input\").type(\"0\");\r\r\n        cy.getBySelLike(\"submit-payment\").click();\r\r\n\r\r\n        // Verify error messages for invalid amount and missing description\r\r\n        cy.get(\".MuiFormHelperText-root\")\r\r\n            .should(\"contain\", \"Please enter a valid amount\")\r\r\n            .and(\"contain\", \"Please enter a note\");\r\r\n    });\r\r\n</generated_code>\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// it(\"submits a transaction payment and verifies the deposit for the receiver\", () => { });\r\r\n<generated_code>\r\r\n    // Navigate to the new transaction form\r\r\n    cy.getBySel(\"new-transaction\").click();\r\r\n    cy.wait(\"@allUsers\");\r\r\n\r\r\n    // Search for the contact user\r\r\n    cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\n    cy.wait(\"@usersSearch\");\r\r\n\r\r\n    // Select the first user from the search results\r\r\n    cy.getBySel(\"user-list-item\").first().click();\r\r\n\r\r\n    // Enter payment amount and description\r\r\n    cy.getBySel(\"amount-input\").type(userInfo.paymentTransactions[0].amount);\r\r\n    cy.getBySel(\"transaction-create-description-input\").type(userInfo.paymentTransactions[0].description);\r\r\n\r\r\n    // Submit the payment\r\r\n    cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n    cy.wait(\"@createTransaction\");\r\r\n\r\r\n    // Verify the transaction was created successfully\r\r\n    cy.getBySel(\"transaction-success\").should(\"contain\", \"Transaction submitted successfully\");\r\r\n\r\r\n    // Logout and login as the receiver\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n    cy.loginByXstate(ctx.contact!.username);\r\r\n\r\r\n    // Verify the transaction appears in the receiver's transaction list\r\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\r\n    cy.wait(\"@personalTransactions\");\r\r\n    cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.paymentTransactions[0].description);\r\r\n    cy.getBySel(\"transaction-item\").first().should(\"contain\", `$${userInfo.paymentTransactions[0].amount}`);\r\r\n</generated_code>\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// Navigate to the new transaction form\n\n  cy.getBySel(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Search for the contact user\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n  cy.wait(\"@usersSearch\");\n\n  // Select the first user from the search results\n\n  cy.getBySel(\"user-list-item\").first().click();\n\n  // Fill out the request form\n\n  cy.getBySel(\"amount-input\").type(userInfo.requestTransactions[0].amount);\n  cy.getBySel(\"transaction-create-description-input\").type(userInfo.requestTransactions[0].description);\n\n  // Submit the transaction request\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Log out and log in as the receiver\n\n  cy.getBySel(\"sidenav-signout\").click();\n  cy.loginByXstate(ctx.contact!.username);\n\n  // Navigate to personal transactions\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Find and click on the transaction request\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", userInfo.requestTransactions[0].description).click();\n\n  // Accept the transaction request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n  cy.wait(\"@updateTransaction\");\n\n  // Verify the transaction status is updated\n\n  cy.getBySel(\"transaction-item\").first().should(\"contain\", \"accepted\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// Step 1: Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Step 2: Navigate to a transaction of User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userB.id\n  }).then(transaction => {\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Step 3: Like the transaction\n\n    cy.getBySel(\"like-button\").click();\n\n    // Step 4: Log out User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 5: Log in as User B\n\n    cy.loginByXstate(ctx.userB.username);\n\n    // Step 6: Check for notifications\n\n    cy.getBySel(\"sidenav-notifications\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Step 7: Verify the notification about the like exists\n\n    cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"liked\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// Step 1: Find a transaction between User A and User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userA.id,\n    receiverId: ctx.userB.id\n  }).then((transaction: Transaction) => {\n    // Step 2: Log in as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Step 3: Visit the transaction detail page\n\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Step 4: Like the transaction\n\n    cy.getBySelLike(\"like-button\").click();\n    cy.wait(\"@postLike\");\n\n    // Step 5: Log out as User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 6: Log in as User A and verify notification\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n\n    // Step 7: Log out as User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 8: Log in as User B and verify notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.visit(\"/\");\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\n    cy.getBySel(\"nav-top-notifications-link\").click();\n    cy.getBySelLike(\"notification-list-item\").first().should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n  });\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Find a transaction by User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userB.id\n  }).then(transaction => {\n    // Navigate to the transaction\n\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Add a comment to the transaction\n\n    const commentText = \"This is a test comment from User A\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Log out User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Log in as User B\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // Check for the notification\n\n    cy.getBySel(\"notifications-link\").click();\n    cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Step 1: Find a transaction between User A and User B\n\n  cy.database(\"find\", \"transactions\", {\n    senderId: ctx.userA.id,\n    receiverId: ctx.userB.id\n  }).then((transaction: Transaction) => {\n    // Step 2: Login as User C\n\n    cy.loginByXstate(ctx.userC.username);\n\n    // Step 3: Navigate to the transaction\n\n    cy.visit(`/transaction/${transaction.id}`);\n\n    // Step 4: Comment on the transaction\n\n    const commentText = \"This is a test comment from User C\";\n    cy.getBySel(\"comment-input\").type(commentText);\n    cy.getBySel(\"comment-submit\").click();\n    cy.wait(\"@postComment\");\n\n    // Step 5: Logout User C\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 6: Login as User A and check for notification\n\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"notifications-link\").click();\n    cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n\n    // Step 7: Logout User A\n\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 8: Login as User B and check for notification\n\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n    cy.getBySel(\"notifications-link\").click();\n    cy.getBySel(\"notification-list-item\").should(\"contain\", ctx.userC.firstName).and(\"contain\", \"commented\");\n  });\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to the new transaction page\n\n  cy.getBySel(\"nav-top-new-transaction\").click();\n\n  // Select User B from the user list\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Enter payment details\n\n  cy.getBySel(\"amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Dinner payment\");\n\n  // Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Log out User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Log in as User B\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Check for notifications\n\n  cy.getBySel(\"sidenav-notifications\").click();\n  cy.wait(\"@getNotifications\");\n\n  // Verify the notification about the payment exists\n\n  cy.getBySel(\"notification-list-item\").first().should(\"contain\", ctx.userA.firstName).and(\"contain\", \"paid you\");\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to the new transaction page\n\n  cy.getBySel(\"new-transaction\").click();\n\n  // Search for User C in the user list and select them\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).click();\n\n  // Enter the payment request details\n\n  cy.getBySel(\"amount-input\").type(\"75\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Concert tickets\");\n\n  // Submit the payment request\n\n  cy.getBySel(\"transaction-create-submit-request\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Log out as User A\n\n  cy.getBySel(\"sidenav-signout\").click();\n\n  // Log in as User C\n\n  cy.loginByXstate(ctx.userC.username);\n\n  // Check for the notification\n\n  cy.getBySel(\"sidenav-notifications\").click();\n  cy.getBySel(\"notification-list\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// <generated_code>\n\n  // Seed the database with no interactions\n\n  cy.task(\"db:seed\");\n\n  // Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Navigate to the notifications page\n\n  cy.getBySel(\"nav-notifications\").click();\n\n  // Assert that the notifications list is empty\n\n  cy.getBySelLike(\"notification-item\").should(\"have.length\", 0);\n\n  // Verify the empty state message is displayed\n\n  cy.contains(\"No notifications\").should(\"exist\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it(\"toggles the navigation drawer\", () => {\n// it(\"toggles the navigation drawer\", () => { });\r\r\n<generated_code>\r\r\n// Test to toggle the navigation drawer\r\r\nit(\"toggles the navigation drawer\", () => {\r\r\n    // Open the navigation drawer\r\r\n    cy.getBySel(\"nav-toggle\").click();\r\r\n    \r\r\n    // Assert that the navigation drawer is visible\r\r\n    cy.getBySel(\"sidenav\").should(\"be.visible\");\r\r\n    \r\r\n    // Close the navigation drawer\r\r\n    cy.getBySel(\"nav-toggle\").click();\r\r\n    \r\r\n    // Assert that the navigation drawer is hidden\r\r\n    cy.getBySel(\"sidenav\").should(\"not.be.visible\");\r\r\n});\r\r\n</generated_code>\n });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// it block: \"first five items belong to contacts in public feed\"\r\r\n<generated_code>\r\r\nit(\"first five items belong to contacts in public feed\", () => {\r\r\n    // Navigate to the public feed\r\r\n    cy.getBySel(feedViews.public.tab).click();\r\r\n    cy.wait(`@${feedViews.public.routeAlias}`);\r\r\n\r\r\n    // Fetch the user's contacts\r\r\n    cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\r\n        const contactIds = contacts.map(contact => contact.contactUserId);\r\r\n\r\r\n        // Verify the first 5 transactions in the public feed\r\r\n        cy.getBySel(\"transaction-item\").then($items => {\r\r\n            const numToCheck = Math.min(5, $items.length);\r\r\n            for (let i = 0; i < numToCheck; i++) {\r\r\n                cy.wrap($items[i]).within(() => {\r\r\n                    // Check if the transaction involves a contact\r\r\n                    cy.get(\"[data-test*='sender-'], [data-test*='receiver-']\")\r\r\n                        .invoke(\"attr\", \"data-test\")\r\r\n                        .then(dataTestAttr => {\r\r\n                            const userId = dataTestAttr!.split(\"-\")[1];\r\r\n                            const isContactTransaction = contactIds.includes(userId);\r\r\n                            expect(isContactTransaction).to.be.true;\r\r\n                        });\r\r\n                });\r\r\n            }\r\r\n        });\r\r\n    });\r\r\n});\r\r\n</generated_code>\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// friends feed only shows contact transactions\r\r\n<generated_code>\r\r\nit(\"friends feed only shows contact transactions\", () => {\r\r\n    // Navigate to the friends feed\r\r\n    cy.getBySel(feedViews.contacts.tab).click();\r\r\n    cy.wait(`@${feedViews.contacts.routeAlias}`);\r\r\n\r\r\n    // Fetch the user's contacts from the database\r\r\n    cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\r\n        const contactIds = contacts.map(contact => contact.contactUserId);\r\r\n        ctx.contactIds = contactIds;\r\r\n\r\r\n        // Ensure transactions are loaded\r\r\n        cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\r\r\n\r\r\n        // Verify that each transaction involves a contact\r\r\n        cy.getBySel(\"transaction-item\").each(($el) => {\r\r\n            const senderId = $el.find(\"[data-test^='transaction-sender-']\").attr(\"data-test\")?.split(\"-\")[2];\r\r\n            const receiverId = $el.find(\"[data-test^='transaction-receiver-']\").attr(\"data-test\")?.split(\"-\")[2];\r\r\n\r\r\n            // Assert that either the sender or receiver is a contact\r\r\n            const isContactTransaction = contactIds.includes(senderId!) || contactIds.includes(receiverId!);\r\r\n            expect(isContactTransaction).to.be.true;\r\r\n        });\r\r\n    });\r\r\n});\r\r\n</generated_code>\n });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it(\"renders transactions item variations in feed\", () => {\n// it block: renders transactions item variations in feed\r\r\n<generated_code>\r\r\n// Verify that transaction items are displayed correctly in the feed\r\r\ncy.visit(\"/\");\r\r\ncy.wait(\"@publicTransactions\");\r\r\n\r\r\n// Ensure the public feed tab is active\r\r\ncy.getBySel(feedViews.public.tab).should(\"have.class\", \"Mui-selected\");\r\r\n\r\r\n// Verify that transaction items are visible\r\r\ncy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\r\r\n\r\r\n// Check that each transaction item has the expected structure\r\r\ncy.getBySel(\"transaction-item\").each(($el) => {\r\r\n    cy.wrap($el).within(() => {\r\r\n        cy.get(\"[data-test='transaction-sender']\").should(\"exist\");\r\r\n        cy.get(\"[data-test='transaction-receiver']\").should(\"exist\");\r\r\n        cy.get(\"[data-test='transaction-amount']\").should(\"exist\");\r\r\n    });\r\r\n});\r\r\n</generated_code>\r\r\n\r\r\n// it block: _.each(feedViews, (feed, feedName) => {})\r\r\n<generated_code>\r\r\n// Iterate through each feed view and verify its functionality\r\r\n_.each(feedViews, (feed, feedName) => {\r\r\n    it(`renders and paginates ${feedName} feed`, () => {\r\r\n        // Navigate to the feed tab\r\r\n        cy.getBySel(feed.tab).click();\r\r\n        cy.wait(`@${feed.routeAlias}`);\r\r\n\r\r\n        // Verify that the feed tab is active\r\r\n        cy.getBySel(feed.tab).should(\"have.class\", \"Mui-selected\");\r\r\n\r\r\n        // Ensure transactions are loaded\r\r\n        cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\r\r\n\r\r\n        // Check pagination functionality if applicable\r\r\n        cy.get(\"body\").then(($body) => {\r\r\n            if ($body.find(\"[data-test='pagination-next']\").length > 0) {\r\r\n                cy.get(\"[data-test='pagination-next']\").click();\r\r\n                cy.wait(`@${feed.routeAlias}`);\r\r\n                cy.getBySel(\"transaction-item\").should(\"have.length.at.least\", 1);\r\r\n            }\r\r\n        });\r\r\n    });\r\r\n});\r\r\n</generated_code>\n });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`paginates ${feedName} transaction feed`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it(\"closes date range picker modal\", () => {\n// it block: \"closes date range picker modal\"\r\r\n<generated_code>\r\r\n// Test to verify that the date range picker modal closes on mobile devices\r\r\nit(\"closes date range picker modal\", () => {\r\r\n    // Open the date range picker\r\r\n    cy.getBySel(\"date-range-picker\").click();\r\r\n\r\r\n    // Verify that the modal is visible\r\r\n    cy.getBySel(\"date-range-modal\").should(\"be.visible\");\r\r\n\r\r\n    // Close the modal\r\r\n    cy.getBySel(\"date-range-close-button\").click();\r\r\n\r\r\n    // Verify that the modal is no longer visible\r\r\n    cy.getBySel(\"date-range-modal\").should(\"not.exist\");\r\r\n});\r\r\n</generated_code>\r\r\n\r\r\n// it block: \"filters transaction feeds by date range\"\r\r\n<generated_code>\r\r\n// Test to verify that transaction feeds can be filtered by date range\r\r\n_.each(feedViews, (feed, feedName) => {\r\r\n    it(`filters ${feedName} transaction feed by date range`, () => {\r\r\n        // Navigate to the specific feed tab\r\r\n        cy.getBySel(feed.tab).click();\r\r\n        cy.wait(`@${feed.routeAlias}`);\r\r\n\r\r\n        // Open the date range picker\r\r\n        cy.getBySel(\"date-range-picker\").click();\r\r\n\r\r\n        // Set the start and end dates for the filter\r\r\n        cy.getBySel(\"date-range-start\").type(\"2023-01-01\");\r\r\n        cy.getBySel(\"date-range-end\").type(\"2023-12-31\");\r\r\n\r\r\n        // Apply the date range filter\r\r\n        cy.getBySel(\"date-range-apply\").click();\r\r\n\r\r\n        // Verify that the transactions displayed fall within the selected date range\r\r\n        cy.getBySel(\"transaction-item\").each(($item) => {\r\r\n            cy.wrap($item)\r\r\n                .find(\"[data-test='transaction-date']\")\r\r\n                .invoke(\"text\")\r\r\n                .then((dateText) => {\r\r\n                    const transactionDate = new Date(dateText);\r\r\n                    const startDate = new Date(\"2023-01-01\");\r\r\n                    const endDate = new Date(\"2023-12-31\");\r\r\n                    expect(transactionDate).to.be.within(startDate, endDate);\r\r\n                });\r\r\n        });\r\r\n    });\r\r\n});\r\r\n</generated_code>\n });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by date range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => {\n// mine feed only shows personal transactions\r\r\n<generated_code>\r\r\nit(\"mine feed only shows personal transactions\", () => {\r\r\n    // Navigate to the personal feed\r\r\n    cy.getBySel(feedViews.personal.tab).click();\r\r\n    cy.wait(`@${feedViews.personal.routeAlias}`);\r\r\n\r\r\n    // Verify that all transactions in the personal feed involve the current user\r\r\n    cy.getBySel(\"transaction-item\").each(($el) => {\r\r\n        // For every transaction, it should be either sent or received by the current user\r\r\n        const transactionInvolvesUser =\r\r\n            $el.find(`[data-test=\"transaction-sender-${ctx.user!.id}\"]`).length > 0 ||\r\r\n            $el.find(`[data-test=\"transaction-receiver-${ctx.user!.id}\"]`).length > 0;\r\r\n\r\r\n        expect(transactionInvolvesUser).to.be.true;\r\r\n    });\r\r\n});\r\r\n</generated_code>\n });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// Navigate to a specific transaction view page\n\n  cy.get(\"@testTransaction\").then(transaction => {\n    const transactionId = transaction.id;\n\n    // Visit the transaction view page\n\n    cy.visit(`/transaction/${transactionId}`);\n    cy.wait(\"@getTransaction\");\n\n    // Assert that the navigation tabs are not visible\n\n    cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n\n    // Verify that the transaction details are displayed\n\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\n    cy.getBySel(\"transaction-detail-amount\").should(\"contain\", transaction.amount);\n  });\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// Step 1: Navigate to the transaction details page\n\n  cy.getBySel(\"transaction-item\").first().click(); // Click on the first transaction in the list\n\n  cy.wait(\"@getTransaction\");\n\n  // Step 2: Like the transaction\n\n  cy.getBySel(\"transaction-like-button\").click(); // Click the like button\n\n  // Step 3: Verify the like was successful\n\n  cy.getBySel(\"transaction-like-count\").should(\"contain\", \"1\"); // Assert the like count increased to 1\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// it(\"comments on a transaction\")\r\r\n<generated_code>\r\r\n// Test adding a comment to a transaction\r\r\nit(\"comments on a transaction\", () => {\r\r\n    // Navigate to the first transaction in the personal feed\r\r\n    cy.getBySel(\"transaction-item\").first().click();\r\r\n    cy.wait(\"@getTransaction\");\r\r\n\r\r\n    // Add a comment to the transaction\r\r\n    const commentText = \"This is a test comment.\";\r\r\n    cy.getBySel(\"transaction-comment-input\").type(commentText);\r\r\n    cy.getBySel(\"transaction-comment-submit\").click();\r\r\n\r\r\n    // Wait for the comment to be posted\r\r\n    cy.wait(\"@postComment\");\r\r\n\r\r\n    // Verify the comment appears in the transaction details\r\r\n    cy.getBySel(\"transaction-comment\").should(\"contain\", commentText);\r\r\n});\r\r\n</generated_code>\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// <generated_code>\n\n  // Step 1: Navigate to the transaction request\n\n  cy.getBySel(\"transaction-item\").contains(ctx.transactionRequest!.description).click();\n\n  // Step 2: Wait for the transaction details to load\n\n  cy.wait(\"@getTransaction\");\n\n  // Step 3: Accept the transaction request\n\n  cy.getBySel(\"transaction-accept-request\").click();\n\n  // Step 4: Wait for the transaction update to complete\n\n  cy.wait(\"@updateTransaction\");\n\n  // Step 5: Verify the transaction status is updated to \"complete\"\n\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"Complete\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Step 1: Navigate to the transaction request\r\r\n    cy.getBySel(\"transaction-item\")\r\r\n        .contains(ctx.transactionRequest!.description)\r\r\n        .click();\r\r\n\r\r\n    // Step 2: Wait for the transaction details to load\r\r\n    cy.wait(\"@getTransaction\");\r\r\n\r\r\n    // Step 3: Reject the transaction request\r\r\n    cy.getBySel(\"transaction-reject-request\").click();\r\r\n\r\r\n    // Step 4: Wait for the transaction update to complete\r\r\n    cy.wait(\"@updateTransaction\");\r\r\n\r\r\n    // Step 5: Verify the transaction status is updated to \"rejected\"\r\r\n    cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"Rejected\");\r\r\n\r\r\n    // Step 6: Verify the transaction no longer appears in the pending list\r\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\r\n    cy.wait(\"@personalTransactions\");\r\r\n    cy.getBySel(\"transaction-item\")\r\r\n        .should(\"not.contain\", ctx.transactionRequest!.description);\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// Step 1: Navigate to the personal transactions tab\n\n  cy.getBySel(\"nav-personal-tab\").click();\n  cy.wait(\"@personalTransactions\");\n\n  // Step 2: Locate a completed transaction request\n\n  cy.getBySel(\"transaction-item\").filter(':contains(\"Complete\")').first().click();\n\n  // Step 3: Verify that accept/reject buttons are not visible\n\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n  cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n\n  // Step 4: Assert that the transaction status is displayed as \"Complete\"\n\n  cy.getBySel(\"transaction-payment-status\").should(\"contain\", \"Complete\");\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// <generated_code>\n\n  // Verify that the user settings form is visible\n\n  cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n\n  // Verify that all input fields are present and pre-filled with user information\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", \"New First Name\");\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", \"New Last Name\");\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", \"email@email.com\");\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", \"6155551212\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// <generated_code>\n\n  // Clear all required fields and submit the form\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Verify validation error messages are displayed\n\n  cy.contains(\"Enter a first name\").should(\"be.visible\");\n  cy.contains(\"Enter a last name\").should(\"be.visible\");\n  cy.contains(\"Enter an email address\").should(\"be.visible\");\n  cy.contains(\"Enter a phone number\").should(\"be.visible\");\n\n  // </generated_code>\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// <generated_code>\n\n  // Step 1: Clear existing values in the form fields\n\n  cy.getBySel(\"user-settings-firstName-input\").clear();\n  cy.getBySel(\"user-settings-lastName-input\").clear();\n  cy.getBySel(\"user-settings-email-input\").clear();\n  cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n\n  // Step 2: Enter new user information\n\n  cy.getBySel(\"user-settings-firstName-input\").type(userInfo.firstName);\n  cy.getBySel(\"user-settings-lastName-input\").type(userInfo.lastName);\n  cy.getBySel(\"user-settings-email-input\").type(userInfo.email);\n  cy.getBySel(\"user-settings-phoneNumber-input\").type(userInfo.phoneNumber);\n\n  // Step 3: Submit the form\n\n  cy.getBySel(\"user-settings-submit\").click();\n\n  // Step 4: Wait for the update request to complete\n\n  cy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"equal\", 204);\n\n  // Step 5: Reload the page to verify changes persisted\n\n  cy.reload();\n\n  // Step 6: Verify updated information is displayed in the form\n\n  cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", userInfo.firstName);\n  cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", userInfo.lastName);\n  cy.getBySel(\"user-settings-email-input\").should(\"have.value\", userInfo.email);\n  cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", userInfo.phoneNumber);\n\n  // Step 7: Verify success notification is displayed\n\n  cy.getBySel(\"snackbar-success\").should(\"be.visible\").and(\"contain\", \"User Settings Updated Successfully\");\n\n  // </generated_code>\n });\r\n});\r\n"
  },
  "gpt_4_1": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should redirect unauthenticated user to signin page', () => {\n    // should redirect unauthenticated user to signin page\n    // 1. Visit a protected route (e.g., home page).\n    // 2. Assert that the user is redirected to the signin page.\n    cy.visit(\"/\");\n    cy.location(\"pathname\").should(\"eq\", \"/signin\");\n  });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should redirect to the home page after login', () => {\n    // should redirect to the home page after login\n    // 1. Visit the sign-in page\n    cy.visit(\"/signin\");\n\n    // 2. Fill in the username and password fields with valid credentials\n    cy.get(\"[data-test=signin-username]\").type(\"PainterJoy90\");\n    cy.get(\"[data-test=signin-password]\").type(\"s3cret\");\n\n    // 3. Submit the login form\n    cy.get(\"[data-test=signin-submit]\").click();\n\n    // 4. Assert that the user is redirected to the home page\n    cy.location(\"pathname\").should(\"eq\", \"/\");\n\n    // 5. Assert that the user's name appears in the sidebar (logged in)\n    cy.get(\"[data-test=sidenav-username]\").should(\"contain\", \"PainterJoy90\");\n  });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should remember a user for 30 days after login', () => {\n    // should remember a user for 30 days after login\n    // 1. Sign up a new user\n    cy.visit(\"/signup\");\n    cy.getBySel(\"signup-first-name\").type(\"Bob\");\n    cy.getBySel(\"signup-last-name\").type(\"Ross\");\n    cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n    cy.getBySel(\"signup-password\").type(\"s3cret\");\n    cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.wait(\"@signup\");\n\n    // 2. Create a bank account (required after signup)\n    cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n    cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n    cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n    cy.getBySel(\"bankaccount-submit\").click();\n    cy.wait(\"@gqlCreateBankAccountMutation\");\n\n    // 3. Log out\n    cy.getBySel(\"sidenav-signout\").click();\n    cy.url().should(\"include\", \"/signin\");\n\n    // 4. Log in with \"Remember Me\" checked\n    cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n    cy.getBySel(\"signin-password\").type(\"s3cret\");\n    cy.getBySel(\"signin-remember-me\").find(\"input\").check();\n    cy.getBySel(\"signin-submit\").click();\n\n    // 5. Assert user is redirected to home and session persists\n    cy.url().should(\"eq\", `${window.location.origin}/`);\n    cy.getBySel(\"sidenav-username\").should(\"contain\", \"PainterJoy90\");\n\n    // 6. Simulate browser restart by clearing cookies but keeping localStorage/sessionStorage\n    cy.clearCookies();\n    cy.reload();\n\n    // 7. Assert user is still logged in after reload (session persists)\n    cy.getBySel(\"sidenav-username\").should(\"contain\", \"PainterJoy90\");\n  });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should allow a visitor to sign-up, login, and logout', () => {\n    // should allow a visitor to sign-up, login, and logout\n\n    // Step 1: Visit the sign-up page\n    cy.visit(\"/signup\");\n\n    // Step 2: Fill out the sign-up form with userInfo\n    cy.getBySel(\"signup-first-name\").type(\"Bob\");\n    cy.getBySel(\"signup-last-name\").type(\"Ross\");\n    cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n    cy.getBySel(\"signup-password\").type(\"s3cret\");\n    cy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\n\n    // Step 3: Submit the sign-up form\n    cy.getBySel(\"signup-submit\").click();\n\n    // Step 4: Wait for the signup request and assert successful signup\n    cy.wait(\"@signup\").its(\"response.statusCode\").should(\"eq\", 201);\n\n    // Step 5: Fill out the onboarding bank account form\n    cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n    cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n    cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    // Step 6: Assert that the user is redirected to the home page and is logged in\n    cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\n    cy.getBySel(\"sidenav-username\").should(\"contain\", \"PainterJoy90\");\n\n    // Step 7: Log out\n    if (isMobile()) {\n      cy.getBySel(\"sidenav-toggle\").click();\n    }\n    cy.getBySel(\"sidenav-signout\").click();\n\n    // Step 8: Assert that the user is redirected to the sign-in page\n    cy.url().should(\"include\", \"/signin\");\n    cy.getBySel(\"signin-username\").should(\"be.visible\");\n  });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should display login errors', () => {\n    // should display login errors\n    // 1. Attempt login with invalid username and valid password\n    cy.visit(\"/signin\");\n    cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n    cy.getBySel(\"signin-password\").type(\"s3cret\");\n    cy.getBySel(\"signin-submit\").click();\n    cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n    // 2. Attempt login with valid username and invalid password\n    cy.getBySel(\"signin-username\").clear().type(\"PainterJoy90\");\n    cy.getBySel(\"signin-password\").clear().type(\"invalidPa$word\");\n    cy.getBySel(\"signin-submit\").click();\n    cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n\n    // 3. Attempt login with valid username and another invalid password\n    cy.getBySel(\"signin-username\").clear().type(\"PainterJoy90\");\n    cy.getBySel(\"signin-password\").clear().type(\"INVALID\");\n    cy.getBySel(\"signin-submit\").click();\n    cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n  });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should display signup errors', () => {\n    // should display signup errors\n    // 1. Visit the signup page\n    cy.visit(\"/signup\");\n\n    // 2. Try submitting the form with empty fields\n    cy.getBySel(\"signup-submit\").click();\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n\n    // 3. Fill only some fields and submit\n    cy.getBySel(\"signup-first-name\").type(\"Bob\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n\n    // 4. Fill all fields except password and submit\n    cy.getBySel(\"signup-last-name\").type(\"Ross\");\n    cy.getBySel(\"signup-username\").type(\"PainterJoy90\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n\n    // 5. Use an invalid password (e.g., too short)\n    cy.getBySel(\"signup-password\").type(\"123\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n\n    // 6. Use a valid password but an invalid username (e.g., already taken or invalid format)\n    cy.getBySel(\"signup-password\").clear().type(\"s3cret\");\n    cy.getBySel(\"signup-username\").clear().type(\"in valid username!\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n\n    // 7. Use a username that is already taken (simulate by signing up first, then again)\n    cy.getBySel(\"signup-username\").clear().type(\"PainterJoy90\");\n    cy.getBySel(\"signup-submit\").click();\n    cy.wait(\"@signup\");\n    cy.getBySel(\"signup-error\").should(\"be.visible\");\n  });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should error for an invalid user', () => {\n    // Attempt to log in with an invalid username and a valid password\n\n      cy.visit(\"/signin\");\n      cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n      cy.getBySel(\"signin-password\").type(\"s3cret\");\n      cy.getBySel(\"signin-submit\").click();\n\n      // Assert that an error message is displayed\n\n      cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n  });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should error for an invalid password for existing user', () => {\n    // Visit the sign-in page\n\n      cy.visit(\"/signin\");\n\n      // Fill in the username with a valid user\n\n      cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n      // Fill in the password with an invalid password\n\n      cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n\n      // Submit the login form\n\n      cy.getBySel(\"signin-submit\").click();\n\n      // Assert that an error message is displayed\n\n      cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\n  });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('creates a new bank account', () => {\n    // Step 1: Navigate to the add bank account form\n\n      cy.getBySel(\"bankaccount-new\").click();\n\n      // Step 2: Fill out the bank account form with provided userInfo\n\n      cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n      cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n      cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n      // Step 3: Submit the form\n\n      cy.getBySel(\"bankaccount-submit\").click();\n\n      // Step 4: Wait for the GraphQL mutation and notifications\n\n      cy.wait(\"@gqlCreateBankAccountMutation\");\n      cy.wait(\"@getNotifications\");\n\n      // Step 5: Assert that the new bank account appears in the list\n\n      cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");\n  });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('should display bank account form errors', () => {\n    // should display bank account form errors\n    // 1. Navigate to the bank accounts page.\n    // 2. Click to add a new bank account.\n    // 3. Attempt to submit the form with empty fields and assert validation errors.\n    // 4. Fill in invalid routing/account numbers and assert validation errors.\n    // 5. Fill in only some fields and assert validation errors.\n\n    cy.visit(\"/bankaccounts\");\n\n    // Open the add bank account form\n    cy.getBySel(\"bankaccount-new\").click();\n\n    // Attempt to submit with all fields empty\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    // Assert validation errors for all fields\n    cy.getBySel(\"bankaccount-bankName-input-helper-text\").should(\"contain\", \"Enter a bank name\");\n    cy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank routing number\");\n    cy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank account number\");\n\n    // Enter invalid routing number (too short)\n    cy.getBySel(\"bankaccount-bankName-input\").type(\"A\");\n    cy.getBySel(\"bankaccount-routingNumber-input\").type(\"123\");\n    cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123\");\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    cy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Must contain a valid routing number\");\n    cy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Must contain a valid account number\");\n\n    // Enter valid bank name, valid routing number, but leave account number empty\n    cy.getBySel(\"bankaccount-bankName-input\").clear().type(\"The Best Bank\");\n    cy.getBySel(\"bankaccount-routingNumber-input\").clear().type(\"987654321\");\n    cy.getBySel(\"bankaccount-accountNumber-input\").clear();\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    cy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank account number\");\n\n    // Enter valid account number, but leave routing number empty\n    cy.getBySel(\"bankaccount-routingNumber-input\").clear();\n    cy.getBySel(\"bankaccount-accountNumber-input\").clear().type(\"123456789\");\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    cy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank routing number\");\n  });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('soft deletes a bank account', () => {\n    // \"soft deletes a bank account\"\n    //\n    // This test will:\n    // 1. Create a new bank account for the logged-in user using the provided userInfo.\n    // 2. Soft delete the created bank account.\n    // 3. Assert that the deleted bank account is marked as deleted in the UI.\n\n    const userInfo = {\n      bankName: \"The Best Bank\",\n      routingNumber: \"987654321\",\n      accountNumber: \"123456789\"\n    };\n\n    // Step 1: Create a new bank account\n    cy.getBySel(\"bankaccount-new\").click();\n    cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n    cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n    cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n    cy.getBySel(\"bankaccount-submit\").click();\n\n    // Wait for the bank account to be created and appear in the list\n    cy.wait(\"@gqlCreateBankAccountMutation\");\n    cy.getBySel(\"bankaccount-list-item\")\n      .should(\"contain\", \"The Best Bank\")\n      .and(\"contain\", \"123456789\");\n\n    // Step 2: Soft delete the created bank account\n    cy.getBySel(\"bankaccount-list-item\")\n      .contains(\"The Best Bank\")\n      .parents(\"[data-test=bankaccount-list-item]\")\n      .within(() => {\n        cy.getBySel(\"bankaccount-delete\").click();\n      });\n\n    // Wait for the delete mutation\n    cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n    // Step 3: Assert that the bank account is marked as deleted (should not be visible in the list)\n    cy.getBySel(\"bankaccount-list-item\")\n      .should(\"not.contain\", \"The Best Bank\");\n  });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it('renders an empty bank account list state with onboarding modal', () => {\n    // it(\"renders an empty bank account list state with onboarding modal\", () => { });\n\n    /*\n      Test: renders an empty bank account list state with onboarding modal\n      - Verifies that when the user has no bank accounts, the empty state and onboarding modal are shown.\n    */\n    cy.visit(\"/bankaccounts\");\n\n    // Wait for the bank accounts list to load and ensure it's empty\n    cy.getBySel(\"bankaccount-list\").should(\"exist\");\n    cy.getBySel(\"bankaccount-list-item\").should(\"have.length\", 0);\n\n    // Assert that the onboarding modal is visible\n    cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\n\n    // Optionally, check for onboarding modal content\n    cy.getBySel(\"user-onboarding-dialog-title\").should(\"contain\", \"Get Started\");\n\n    // Close the onboarding modal if needed for further tests\n    cy.getBySel(\"user-onboarding-next\").click();\n    cy.getBySel(\"user-onboarding-dialog\").should(\"not.exist\");\n  });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction payment', () => {\n    // navigates to the new transaction form, selects a user and submits a transaction payment\n    cy.getBySelLike(\"new-transaction\").click(); // Open new transaction form\n    cy.wait(\"@allUsers\");\n\n    // Select the contact user as recipient\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n    // Enter payment amount and description from userInfo\n    cy.getBySel(\"amount-input\").type(\"35\");\n    cy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\n\n    // Select \"Pay\" option (assuming button or tab)\n    cy.getBySel(\"transaction-create-submit-payment\").click();\n\n    // Wait for transaction to be created and assert success\n    cy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 201);\n\n    // Assert that the transaction appears in the personal transactions feed\n    cy.getBySel(\"alert-bar-success\").should(\"be.visible\");\n    cy.getBySelLike(\"transaction-item\").should(\"exist\").and(\"contain\", \"Sushi dinner 🍣\");\n  });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction request', () => {\n    // navigates to the new transaction form, selects a user and submits a transaction request\n    cy.getBySelLike(\"new-transaction\").click(); // Open new transaction form\n    cy.wait(\"@allUsers\");\n\n    // Search for the contact user by username\n    cy.getBySel(\"user-list-search-input\").type(ctx.contact!.username);\n    cy.wait(\"@usersSearch\");\n\n    // Select the contact from the search results\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n    // Fill in the transaction request details using userInfo.requestTransactions[0]\n    cy.getBySel(\"transaction-create-amount-input\").type(\"95\");\n    cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n    // Select \"Request\" tab if not already selected\n    cy.getBySel(\"transaction-create-request\").click();\n\n    // Submit the transaction request\n    cy.getBySel(\"transaction-create-submit-request\").click();\n\n    // Wait for the transaction to be created\n    cy.wait(\"@createTransaction\");\n\n    // Assert that the confirmation message appears\n    cy.getBySel(\"alert-bar-success\").should(\"contain\", \"Requested\");\n\n    // Optionally, verify that the transaction appears in the personal transactions feed\n    cy.getBySel(\"nav-personal-tab\").click();\n    cy.wait(\"@personalTransactions\");\n    cy.getBySelLike(\"transaction-item\").should(\"contain\", \"Fancy Hotel 🏨\").and(\"contain\", \"$95\");\n  });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('displays new transaction errors', () => {\n    // \"displays new transaction errors\"\n    //\n    // This test will attempt to submit a new transaction form with invalid or missing data\n    // and assert that the appropriate error messages are displayed.\n\n    cy.getBySelLike(\"new-transaction\").click();\n    cy.wait(\"@allUsers\");\n\n    // Step 1: Try submitting with no user selected\n    cy.getBySelLike(\"user-list-search-input\").clear();\n    cy.getBySelLike(\"amount-input\").clear();\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"user-list-search-input-helper-text\").should(\"be.visible\");\n\n    // Step 2: Select a user but leave amount empty\n    cy.getBySelLike(\"user-list-search-input\").type(ctx.contact!.firstName);\n    cy.getBySelLike(\"user-list-item\").first().click();\n    cy.getBySelLike(\"amount-input\").clear();\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\n\n    // Step 3: Enter invalid (non-numeric) amount\n    cy.getBySelLike(\"amount-input\").type(\"abc\");\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\n\n    // Step 4: Enter negative amount\n    cy.getBySelLike(\"amount-input\").clear().type(\"-50\");\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\n\n    // Step 5: Enter valid amount but leave description empty\n    cy.getBySelLike(\"amount-input\").clear().type(\"10\");\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"description-input-helper-text\").should(\"be.visible\");\n\n    // Step 6: Enter all valid data, then clear one field and check error\n    cy.getBySelLike(\"description-input\").type(\"Test payment\");\n    cy.getBySelLike(\"amount-input\").clear();\n    cy.getBySelLike(\"transaction-create-submit-payment\").click();\n    cy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\n  });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('submits a transaction payment and verifies the deposit for the receiver', () => {\n    // \"submits a transaction payment and verifies the deposit for the receiver\"\n    //\n    // This test submits a payment transaction from ctx.user to ctx.contact using the first paymentTransactions entry in userInfo,\n    // then verifies that the transaction appears in the receiver's (contact's) transaction feed and that the amount matches.\n\n    cy.getBySelLike(\"new-transaction\").click();\n    cy.wait(\"@allUsers\");\n\n    // Step 1: Search and select the contact (receiver)\n    cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n    // Step 2: Fill out the payment form\n    cy.getBySel(\"amount-input\").type(userInfo.paymentTransactions[0].amount.toString());\n    cy.getBySel(\"transaction-create-description-input\").type(userInfo.paymentTransactions[0].description);\n\n    // Step 3: Submit the payment\n    cy.getBySel(\"transaction-create-submit-payment\").click();\n    cy.wait(\"@createTransaction\");\n\n    // Step 4: Assert success message and redirect to personal transactions\n    cy.getBySel(\"alert-bar-success\").should(\"contain\", \"Transaction Submitted!\");\n    cy.url().should(\"include\", \"/personal\");\n\n    // Step 5: Switch to the receiver and verify the deposit\n    cy.switchUserByXstate(ctx.contact!.username);\n    cy.getBySel(\"nav-personal-tab\").click();\n    cy.wait(\"@personalTransactions\");\n\n    // Step 6: Assert the new transaction appears in the receiver's feed with correct amount and description\n    cy.getBySelLike(\"transaction-item\")\n      .should(\"contain\", userInfo.paymentTransactions[0].description)\n      .and(\"contain\", Dinero({ amount: Number(userInfo.paymentTransactions[0].amount) * 100, currency: \"USD\" }).toFormat());\n  });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('submits a transaction request and accepts the request for the receiver', () => {\n    // it(\"submits a transaction request and accepts the request for the receiver\", () => { ... })\n\n    // 1. Navigate to the new transaction form and select a contact to request money from\n    cy.getBySelLike(\"new-transaction\").click();\n    cy.wait(\"@allUsers\");\n\n    // 2. Search and select the contact (receiver)\n    cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\n\n    // 3. Fill out the transaction request form with provided userInfo.requestTransactions[0]\n    cy.getBySel(\"transaction-create-amount-input\").type(\"95\");\n    cy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\n\n    // 4. Submit the request\n    cy.getBySel(\"transaction-create-submit-request\").click();\n    cy.wait(\"@createTransaction\");\n\n    // 5. Assert that the request was submitted and confirmation is shown\n    cy.getBySel(\"alert-bar-success\").should(\"contain\", \"requested\");\n\n    // 6. Log out and log in as the contact (receiver)\n    cy.logoutByXstate();\n    cy.loginByXstate(ctx.contact!.username);\n\n    // 7. Go to personal transactions and find the pending request\n    cy.getBySel(\"nav-personal-tab\").click();\n    cy.wait(\"@personalTransactions\");\n    cy.getBySelLike(\"transaction-item\")\n      .contains(\"Fancy Hotel 🏨\")\n      .parents(\"[data-test^=transaction-item]\")\n      .as(\"pendingRequest\");\n\n    // 8. Open the transaction details\n    cy.get(\"@pendingRequest\").click();\n    cy.wait(\"@getTransaction\");\n\n    // 9. Accept the request\n    cy.getBySel(\"transaction-accept-request\").click();\n    cy.wait(\"@updateTransaction\");\n\n    // 10. Assert that the transaction status is updated and confirmation is shown\n    cy.getBySel(\"alert-bar-success\").should(\"contain\", \"accepted\");\n    cy.getBySel(\"transaction-detail-status\").should(\"contain\", \"accepted\");\n  });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A likes a transaction of User B; User B gets notification that User A liked transaction ', () => {\n    // User A likes a transaction of User B; User B gets notification that User A liked transaction\n    // 1. User A logs in and sends a payment to User B\n    cy.loginByXstate(ctx.userA.username);\n    cy.getBySel(\"nav-public-tab\").click();\n    cy.wait(\"@getNotifications\");\n\n    // 2. User A creates a payment transaction to User B\n    cy.getBySel(\"nav-new-transaction\").click();\n    cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n    cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\n    cy.getBySel(\"amount-input\").type(\"10\");\n    cy.getBySel(\"transaction-create-description-input\").type(\"Test payment\");\n    cy.getBySel(\"transaction-create-submit-payment\").click();\n    cy.wait(\"@createTransaction\");\n\n    // 3. User A logs out, User B logs in\n    cy.logoutByXstate();\n    cy.loginByXstate(ctx.userB.username);\n    cy.wait(\"@getNotifications\");\n\n    // 4. User B goes to personal transactions and finds the transaction from User A\n    cy.getBySel(\"nav-personal-tab\").click();\n    cy.getBySelLike(\"transaction-item\").contains(\"Test payment\").first().click();\n\n    // 5. User B likes the transaction\n    cy.getBySel(\"like-button\").click();\n\n    // 6. User B logs out, User A logs in\n    cy.logoutByXstate();\n    cy.loginByXstate(ctx.userA.username);\n    cy.wait(\"@getNotifications\");\n\n    // 7. User A checks notifications for a like from User B\n    cy.getBySel(\"nav-notifications-tab\").click();\n    cy.wait(\"@getNotifications\");\n    cy.getBySelLike(\"notification-list-item\")\n      .should(\"contain\", ctx.userB.firstName)\n      .and(\"contain\", \"liked your transaction\");\n  });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction', () => {\n    // User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\n\n    // 1. User A logs in and sends a payment to User B\n    cy.loginByXstate(ctx.userA.username);\n    cy.getBySelLike(\"new-transaction\").click();\n    cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n    cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\n    cy.getBySel(\"amount-input\").type(\"10\");\n    cy.getBySel(\"transaction-create-submit-payment\").click();\n    cy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 201);\n\n    // 2. Get the transaction ID of the new transaction between User A and User B\n    cy.wait(\"@personalTransactions\");\n    cy.getBySel(\"transaction-item\").first().invoke(\"attr\", \"data-test\").then((transactionTestAttr) => {\n      const transactionId = transactionTestAttr?.replace(\"transaction-item-\", \"\");\n      expect(transactionId).to.exist;\n\n      // 3. User C logs in and likes the transaction\n      cy.switchUserByXstate(ctx.userC.username);\n      cy.getBySel(\"nav-personal-tab\").click();\n      cy.getBySel(`transaction-item-${transactionId}`).click();\n      cy.getBySel(\"like-button\").click();\n\n      // 4. User A logs in and checks for notification\n      cy.switchUserByXstate(ctx.userA.username);\n      cy.getBySel(\"nav-notifications-tab\").click();\n      cy.wait(\"@getNotifications\");\n      cy.getBySel(\"notification-list\").should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n\n      // 5. User B logs in and checks for notification\n      cy.switchUserByXstate(ctx.userB.username);\n      cy.getBySel(\"nav-notifications-tab\").click();\n      cy.wait(\"@getNotifications\");\n      cy.getBySel(\"notification-list\").should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A comments on a transaction of User B; User B gets notification that User A commented on their transaction', () => {\n    // User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\n\n    // 1. User A logs in\n    cy.loginByXstate(ctx.userA.username);\n\n    // 2. User A navigates to User B's profile or finds a transaction where User B is the receiver\n    cy.database(\"filter\", \"transactions\", { receiverId: ctx.userB.id }).then((transactions: Transaction[]) => {\n      const transaction = transactions[0];\n      expect(transaction).to.exist;\n\n      // 3. User A comments on the transaction\n      cy.visit(`/transaction/${transaction.id}`);\n      cy.getBySel(\"transaction-comment-input\").type(\"Nice transaction, User B!\");\n      cy.getBySel(\"transaction-comment-submit\").click();\n      cy.wait(\"@postComment\");\n\n      // 4. User A logs out\n      cy.logoutByXstate();\n\n      // 5. User B logs in\n      cy.loginByXstate(ctx.userB.username);\n\n      // 6. User B checks notifications\n      cy.visit(\"/notifications\");\n      cy.wait(\"@getNotifications\");\n\n      // 7. Assert that User B received a notification about User A's comment\n      cy.getBySel(\"notification-list\")\n        .contains(`${ctx.userA.firstName} ${ctx.userA.lastName}`)\n        .should(\"exist\")\n        .and(\"contain\", \"commented on your transaction\");\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction', () => {\n    // User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\n    cy.loginByXstate(ctx.userC.username);\n    // Step 1: User C creates a transaction with User B (User B as receiver)\n    cy.getBySelLike(\"new-transaction\").click();\n    cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n    cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\n    cy.getBySel(\"amount-input\").type(\"50\");\n    cy.getBySel(\"transaction-create-submit-payment\").click();\n    cy.wait(\"@createTransaction\").then((interception) => {\n      const transactionId = interception.response?.body.id;\n      // Step 2: User C logs out, User A logs in\n      cy.switchUserByXstate(ctx.userA.username);\n      // Step 3: User A comments on the transaction (simulate User C commenting on a transaction between A and B)\n      cy.visit(`/transaction/${transactionId}`);\n      cy.getBySel(\"transaction-comment-input\").type(\"Nice transaction from C!\");\n      cy.getBySel(\"transaction-comment-submit\").click();\n      cy.wait(\"@postComment\");\n      // Step 4: User B logs in and checks notifications\n      cy.switchUserByXstate(ctx.userB.username);\n      cy.getBySel(\"nav-notifications-tab\").click();\n      cy.wait(\"@getNotifications\");\n      cy.getBySelLike(\"notification-list-item\")\n        .should(\"contain\", ctx.userC.firstName)\n        .and(\"contain\", \"commented on your transaction\");\n      // Step 5: User A checks notifications\n      cy.switchUserByXstate(ctx.userA.username);\n      cy.getBySel(\"nav-notifications-tab\").click();\n      cy.wait(\"@getNotifications\");\n      cy.getBySelLike(\"notification-list-item\")\n        .should(\"contain\", ctx.userC.firstName)\n        .and(\"contain\", \"commented on your transaction\");\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment to User B', () => {\n    // Step 1: Log in as User A\n\n      cy.loginByXstate(ctx.userA.username);\n\n      // Step 2: Start a new transaction\n\n      cy.getBySelLike(\"new-transaction\").click();\n      cy.wait(\"@allUsers\");\n\n      // Step 3: Search and select User B as the recipient\n\n      cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n      cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n      // Step 4: Enter payment details\n\n      cy.getBySel(\"amount-input\").type(\"25\");\n      cy.getBySel(\"transaction-create-description-input\").type(\"Test payment from User A to User B\");\n\n      // Step 5: Submit the payment\n\n      cy.getBySel(\"transaction-create-submit-payment\").click();\n      cy.wait(\"@createTransaction\");\n\n      // Step 6: Assert that the transaction was successful\n\n      cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n      // Step 7: Log out User A\n\n      cy.logoutByXstate();\n\n      // Step 8: Log in as User B to check for notification\n\n      cy.loginByXstate(ctx.userB.username);\n\n      // Step 9: Open notifications\n\n      if (isMobile()) {\n        cy.getBySel(\"sidenav-toggle\").click();\n      }\n      cy.getBySel(\"nav-top-notifications-link\").click();\n      cy.wait(\"@getNotifications\");\n\n      // Step 10: Assert that User B received a notification about the payment from User A\n\n      cy.getBySelLike(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"paid you\").and(\"contain\", \"25\");\n  });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment request to User C', () => {\n    // Step 1: Log in as User A\n\n      cy.loginByXstate(ctx.userA.username);\n\n      // Step 2: Start a new transaction (request) to User C\n\n      cy.getBySelLike(\"new-transaction\").click();\n      cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n      cy.getBySelLike(\"user-list-item\").contains(ctx.userC.firstName).click();\n\n      // Step 3: Fill out the request form\n\n      cy.getBySel(\"transaction-create-amount-input\").type(\"50\");\n      cy.getBySel(\"transaction-create-description-input\").type(\"Request from A to C\");\n      cy.getBySel(\"transaction-create-request-button\").click();\n\n      // Step 4: Wait for transaction to be created and notifications to be fetched\n\n      cy.wait(\"@createTransaction\");\n      cy.wait(\"@getNotifications\");\n\n      // Step 5: Log out User A and log in as User C to check notification\n\n      cy.logoutByXstate();\n      cy.loginByXstate(ctx.userC.username);\n\n      // Step 6: Open notifications and assert that a new request notification exists from User A\n\n      cy.getBySel(\"nav-notifications-tab\").click();\n      cy.wait(\"@getNotifications\");\n      cy.getBySelLike(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\").and(\"contain\", \"50\");\n  });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it('renders an empty notifications state', () => {\n    // renders an empty notifications state\n    // This test verifies that when a user with no notifications logs in, the empty state is shown.\n\n    cy.loginByXstate(ctx.userA.username);\n    // Navigate to notifications page\n    if (isMobile()) {\n      cy.getBySel(\"sidenav-toggle\").click();\n    }\n    cy.getBySel(\"nav-notifications-tab\").click();\n    cy.wait(\"@getNotifications\");\n\n    // Assert that the empty notifications state is rendered\n    cy.getBySel(\"empty-notifications-header\").should(\"be.visible\");\n    cy.getBySel(\"empty-notifications-message\").should(\"contain\", \"You have no notifications\");\n  });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it('toggles the navigation drawer', () => {\n    // Open the navigation drawer\n\n      if (isMobile()) {\n        cy.getBySel(\"sidenav-toggle\").click();\n        cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n        // Close the navigation drawer\n\n        cy.getBySel(\"sidenav-toggle\").click({\n          force: true\n        });\n        cy.getBySel(\"sidenav\").should(\"not.be.visible\");\n      } else {\n        // On desktop, sidenav should always be visible\n\n        cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n        // Optionally, check that sidenav-username is present\n\n        cy.getBySel(\"sidenav-username\").should(\"contain\", ctx.user.username);\n      }\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it('first five items belong to contacts in public feed', () => {\n    // first five items belong to contacts in public feed\n    cy.getBySel(feedViews.public.tab).click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n\n    // Wait for the feed to load and ensure at least 5 items are present\n    cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 4);\n\n    // Get the user's contact IDs from the database\n    cy.database(\"filter\", \"contacts\", { userId: ctx.user.id }).then((contacts: Contact[]) => {\n      const contactIds = contacts.map((c) => c.contactUserId);\n\n      // For the first five transaction items, assert that either the sender or receiver is a contact\n      cy.getBySelLike(\"transaction-item\").each(($el, idx) => {\n        if (idx  {\n              cy.wrap($el)\n                .invoke(\"attr\", \"data-test-transaction-receiver-id\")\n                .then((receiverId) => {\n                  expect(\n                    contactIds.includes(senderId) || contactIds.includes(receiverId),\n                    `Transaction ${idx + 1} sender or receiver should be a contact`\n                  ).to.be.true;\n                });\n            });\n        }\n      });\n    });\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it('friends feed only shows contact transactions', () => {\n    // friends feed only shows contact transactions\n    // This test verifies that the \"friends\" feed only displays transactions involving the user's contacts.\n\n    cy.getBySel(feedViews.contacts.tab).click(); // Click on the \"friends\" tab\n    cy.wait(`@${feedViews.contacts.routeAlias}`); // Wait for the contacts transactions API call\n\n    // Get all transaction items in the feed\n    cy.getBySelLike(\"transaction-item\").each(($el) => {\n      // For each transaction, check that the sender or receiver is in the user's contacts\n      cy.wrap($el)\n        .invoke(\"attr\", \"data-test-transaction-id\")\n        .then((transactionId) => {\n          // Fetch transaction details from the backend via Cypress task or API if needed\n          // Here, we assume the UI displays the contact's name or username in the transaction item\n          cy.wrap($el)\n            .find('[data-test=\"transaction-participant\"]')\n            .invoke(\"text\")\n            .then((participantText) => {\n              // The participant should be one of the user's contacts\n              // ctx.user is the logged-in user, ctx.allUsers contains all users\n              // Find the contact IDs for the user\n              cy.task(\"getContactsByUserId\", ctx.user.id).then((contacts: Contact[]) => {\n                const contactUserIds = contacts.map((c) => c.contactUserId);\n                // The participantText should match one of the contact users' names or usernames\n                const contactUsers = ctx.allUsers.filter((u) => contactUserIds.includes(u.id));\n                const matchesContact = contactUsers.some(\n                  (u) =>\n                    participantText.includes(u.firstName) ||\n                    participantText.includes(u.lastName) ||\n                    participantText.includes(u.username)\n                );\n                expect(matchesContact, \"transaction is with a contact\").to.be.true;\n              });\n            });\n        });\n    });\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it('renders transactions item variations in feed', () => {\n    // renders transactions item variations in feed\n    // This test will check that different transaction item types (payment, request, completed, pending, etc.) are rendered in the feed.\n\n    cy.getBySel(\"public-tab\").click();\n    cy.wait(\"@publicTransactions\");\n\n    // Assert at least one transaction item is rendered\n    cy.getBySelLike(\"transaction-item\").should(\"exist\");\n\n    // Check for payment and request transaction types in the feed\n    cy.getBySelLike(\"transaction-item\").each(($el) => {\n      cy.wrap($el).within(() => {\n        cy.get(\"[data-test^='transaction-type-']\").should(\"exist\");\n      });\n    });\n\n    // Optionally, check for at least one completed and one pending transaction\n    cy.getBySelLike(\"transaction-item\")\n      .filter(\":contains('completed')\")\n      .should(\"exist\");\n\n    cy.getBySelLike(\"transaction-item\")\n      .filter(\":contains('pending')\")\n      .should(\"exist\");\n  });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('paginates ${feedName} transaction feed', () => {\n    // paginates public transaction feed\n    cy.getBySel(feedViews.public.tab).click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n    // Assert that at least one transaction item is visible\n    cy.getBySelLike(\"transaction-item\").should(\"exist\");\n    // Scroll to bottom to trigger pagination\n    cy.get(\"body\").then(($body) => {\n      if ($body.find('[data-test=\"transaction-list-pagination\"]').length) {\n        cy.getBySel(\"transaction-list-pagination\").scrollIntoView();\n        cy.getBySel(\"transaction-list-pagination\").should(\"be.visible\");\n        // Click next page if pagination button exists\n        cy.getBySel(\"transaction-list-pagination\").click();\n        cy.wait(`@${feedViews.public.routeAlias}`);\n        // Assert more items loaded\n        cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 1);\n      }\n    });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it('closes date range picker modal', () => {\n    // Open the date range picker\n\n      cy.getBySel(\"date-range-picker\").click();\n\n      // Close the modal (simulate clicking the close button or outside the modal)\n\n      cy.get(\"body\").click(0, 0);\n\n      // Assert that the modal is closed\n\n      cy.getBySel(\"date-range-picker-modal\").should(\"not.exist\");\n  });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('filters ${feedName} transaction feed by date range', () => {\n    // Select the public feed tab\n\n      cy.getBySel(\"public-tab\").click();\n      cy.wait(\"@publicTransactions\");\n\n      // Open the date range picker\n\n      cy.getBySel(\"date-range-picker\").click();\n\n      // Pick a date range (e.g., last 7 days)\n\n      const today = new Date();\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(today.getDate() - 7);\n      cy.pickDateRange(sevenDaysAgo, today);\n\n      // Assert that all visible transactions are within the selected date range\n\n      cy.getBySelLike(\"transaction-item\").each($el => {\n        cy.wrap($el).find(\"[data-test=transaction-date]\").invoke(\"text\").then(dateText => {\n          const txDate = new Date(dateText);\n          expect(txDate >= sevenDaysAgo && txDate <= today).to.be.true;\n        });\n      });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('does not show ${feedName} transactions for out of range date limits', () => {\n    // does not show public transactions for out of range date limits\n    // This test verifies that when a date range is selected that does not include any transactions, the feed is empty.\n    cy.getBySel(feedViews.public.tab).click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n\n    // Pick a date range far in the past to ensure no transactions are shown\n    const startDate = new Date(\"2000-01-01\");\n    const endDate = new Date(\"2000-01-02\");\n    cy.pickDateRange(startDate, endDate);\n\n    // Assert that no transaction items are visible\n    cy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('filters ${feedName} transaction feed by amount range', () => {\n    // Select the public feed tab\n\n      cy.getBySel(feedViews.public.tab).click();\n      cy.wait(`@${feedViews.public.routeAlias}`);\n\n      // Open the amount range filter UI (assume a button or input exists)\n\n      cy.getBySel(\"transaction-amount-range-min\").clear().type(dollarAmountRange.min);\n      cy.getBySel(\"transaction-amount-range-max\").clear().type(dollarAmountRange.max);\n\n      // Apply the filter\n\n      cy.getBySel(\"apply-amount-range-filter\").click();\n\n      // Assert that all visible transactions have amounts within the specified range\n\n      cy.getBySelLike(\"transaction-item\").each($el => {\n        cy.wrap($el).find(\"[data-test=transaction-amount]\").invoke(\"text\").then(amountText => {\n          // Remove currency symbol and commas, then parse as float\n\n          const amount = parseFloat(amountText.replace(/[^0-9.-]+/g, \"\"));\n          expect(amount).to.be.at.least(dollarAmountRange.min);\n          expect(amount).to.be.at.most(dollarAmountRange.max);\n        });\n      });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('does not show ${feedName} transactions for out of range amount limits', () => {\n    // does not show public transactions for out of range amount limits\n    cy.getBySel(feedViews.public.tab).click();\n    cy.wait(`@${feedViews.public.routeAlias}`);\n    // Set amount range filter to be outside the range of any transaction\n    cy.setTransactionAmountRange(10000, 20000);\n    // Assert that no transactions are shown in the feed\n    cy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it('mine feed only shows personal transactions', () => {\n    // Go to the \"mine\" feed tab\n\n      cy.getBySel(feedViews.personal.tab).click();\n      cy.wait(`@${feedViews.personal.routeAlias}`);\n\n      // Assert that each transaction item in the feed belongs to the logged-in user\n\n      cy.getBySelLike(\"transaction-item\").each($el => {\n        cy.wrap($el).find('[data-test=\"transaction-participants\"]').invoke(\"text\").then(text => {\n          // The user's full name should appear in the participants text\n\n          expect(text).to.include(ctx.user.firstName);\n          expect(text).to.include(ctx.user.lastName);\n        });\n      });\n\n      // Optionally, assert that the feed is not empty\n\n      cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 0);\n  });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('transactions navigation tabs are hidden on a transaction view page', () => {\n    // transactions navigation tabs are hidden on a transaction view page\n    // 1. Visit a transaction detail page.\n    // 2. Assert that the navigation tabs are not visible.\n\n    cy.wrap(ctx.transactionRequest).should(\"exist\");\n\n    // Visit the transaction detail page for the pending request\n    cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n    cy.wait(\"@getTransaction\");\n\n    // Assert that the navigation tabs are not visible on the transaction view page\n    cy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\n    cy.getBySel(\"nav-public-tab\").should(\"not.exist\");\n  });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('likes a transaction', () => {\n    // likes a transaction\n    // 1. Visit a transaction detail page\n    // 2. Click the like button\n    // 3. Assert that the like count increases and the button is active\n\n    cy.database(\"find\", \"transactions\", { receiverId: ctx.authenticatedUser!.id }).then((transaction: Transaction) => {\n      // Visit the transaction detail page\n      cy.visit(`/transaction/${transaction.id}`);\n      cy.wait(\"@getTransaction\");\n\n      // Get the initial like count\n      cy.getBySel(\"transaction-like-count\")\n        .invoke(\"text\")\n        .then((initialLikeCountText) => {\n          const initialLikeCount = parseInt(initialLikeCountText, 10) || 0;\n\n          // Click the like button\n          cy.getBySel(\"transaction-like-button\").click();\n\n          // Assert the like button is active\n          cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"MuiIconButton-colorPrimary\");\n\n          // Assert the like count increases by 1\n          cy.getBySel(\"transaction-like-count\").should(($span) => {\n            const newCount = parseInt($span.text(), 10) || 0;\n            expect(newCount).to.eq(initialLikeCount + 1);\n          });\n        });\n    });\n  });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('comments on a transaction', () => {\n    // Ensure a transaction request is available\n\n      expect(ctx.transactionRequest).to.exist;\n\n      // Visit the transaction view page\n\n      cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n      cy.wait(\"@getTransaction\");\n\n      // Wait for the comment input to be visible\n\n      cy.getBySel(\"transaction-comment-input\").should(\"be.visible\");\n\n      // Type a comment and submit\n\n      const commentText = \"This is a Cypress test comment\";\n      cy.getBySel(\"transaction-comment-input\").type(commentText);\n      cy.getBySel(\"transaction-comment-submit\").click();\n\n      // Assert the comment appears in the comment list\n\n      cy.getBySel(\"transaction-comments-list\").should(\"contain.text\", commentText).and(\"contain.text\", ctx.authenticatedUser!.firstName);\n\n      // Optionally, ensure the input is cleared after submit\n\n      cy.getBySel(\"transaction-comment-input\").should(\"have.value\", \"\");\n  });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('accepts a transaction request', () => {\n    // accepts a transaction request\n    // 1. Visit the transaction request details page\n    // 2. Click the \"Accept\" button\n    // 3. Wait for the transaction update API call\n    // 4. Assert that the transaction status is updated and accept/reject buttons are no longer visible\n    cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n    cy.wait(\"@getTransaction\");\n\n    // Click the \"Accept\" button to accept the transaction request\n    cy.getBySel(\"accept-request\").should(\"be.visible\").click();\n\n    // Wait for the PATCH request to update the transaction\n    cy.wait(\"@updateTransaction\");\n\n    // Assert that the accept/reject buttons are no longer visible\n    cy.getBySel(\"accept-request\").should(\"not.exist\");\n    cy.getBySel(\"reject-request\").should(\"not.exist\");\n\n    // Assert that the transaction status is updated to \"accepted\"\n    cy.getBySel(\"transaction-status\").should(\"contain.text\", \"accepted\");\n  });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('rejects a transaction request', () => {\n    // \"rejects a transaction request\"\n    //\n    // This test simulates the user rejecting a pending transaction request and verifies the UI and backend update.\n\n    cy.getBySelLike(\"transaction-item\")\n      .contains(ctx.transactionRequest!.description)\n      .click(); // Open the transaction request\n\n    cy.wait(\"@getTransaction\");\n\n    // Click the \"Reject\" button\n    cy.getBySel(\"transaction-reject-request\").should(\"be.visible\").click();\n\n    // Wait for the PATCH request to update the transaction\n    cy.wait(\"@updateTransaction\").its(\"response.statusCode\").should(\"eq\", 200);\n\n    // Assert that the transaction status is updated in the UI\n    cy.getBySel(\"transaction-request-status\")\n      .should(\"contain\", \"rejected\")\n      .and(\"be.visible\");\n\n    // Optionally, verify that accept/reject buttons are no longer visible\n    cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n    cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n  });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('does not display accept/reject buttons on completed request', () => {\n    // does not display accept/reject buttons on completed request\n    // 1. Mark the transaction request as completed (simulate accepting or rejecting).\n    // 2. Visit the transaction view page for the completed request.\n    // 3. Assert that accept/reject buttons are not visible.\n\n    cy.wrap(ctx.transactionRequest).should(\"exist\");\n\n    // Complete the transaction request by updating its status\n    cy.request(\"PATCH\", `/transactions/${ctx.transactionRequest!.id}`, {\n      status: \"complete\",\n      requestStatus: \"accepted\",\n      requestResolvedAt: new Date().toISOString(),\n    }).then(() => {\n      // Visit the transaction view page\n      cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n      cy.wait(\"@getTransaction\");\n\n      // Assert that accept/reject buttons are not present\n      cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\n      cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n    });\n  });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('renders the user settings form', () => {\n    // renders the user settings form\n    cy.getBySel(\"user-settings-form\").should(\"be.visible\");\n    // Check that the form fields are populated with the current user's info\n    cy.getBySel(\"user-settings-firstName\").should(\"have.value\").and(\"not.be.empty\");\n    cy.getBySel(\"user-settings-lastName\").should(\"have.value\").and(\"not.be.empty\");\n    cy.getBySel(\"user-settings-email\").should(\"have.value\").and(\"not.be.empty\");\n    cy.getBySel(\"user-settings-phoneNumber\").should(\"have.value\").and(\"not.be.empty\");\n    cy.getBySel(\"user-settings-save\").should(\"be.enabled\");\n  });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('should display user setting form errors', () => {\n    // \"should display user setting form errors\"\n    //\n    // This test will:\n    // 1. Clear required fields and attempt to submit.\n    // 2. Assert that error messages are displayed for each required field.\n    // 3. Enter invalid email and phone number, submit, and assert error messages.\n\n    const userInfo = {\n      firstName: \"New First Name\",\n      lastName: \"New Last Name\",\n      email: \"email@email.com\",\n      phoneNumber: \"6155551212\"\n    };\n\n    // Step 1: Clear all required fields and submit\n    cy.getBySel(\"user-settings-firstName-input\").clear();\n    cy.getBySel(\"user-settings-lastName-input\").clear();\n    cy.getBySel(\"user-settings-email-input\").clear();\n    cy.getBySel(\"user-settings-phoneNumber-input\").clear();\n    cy.getBySel(\"user-settings-submit\").click();\n\n    // Step 2: Assert error messages for required fields\n    cy.getBySel(\"user-settings-firstName-input\")\n      .parent()\n      .contains(/required/i);\n    cy.getBySel(\"user-settings-lastName-input\")\n      .parent()\n      .contains(/required/i);\n    cy.getBySel(\"user-settings-email-input\")\n      .parent()\n      .contains(/required/i);\n    cy.getBySel(\"user-settings-phoneNumber-input\")\n      .parent()\n      .contains(/required/i);\n\n    // Step 3: Enter invalid email and phone number, submit, and assert error messages\n    cy.getBySel(\"user-settings-firstName-input\").type(userInfo.firstName);\n    cy.getBySel(\"user-settings-lastName-input\").type(userInfo.lastName);\n    cy.getBySel(\"user-settings-email-input\").type(\"invalid-email\");\n    cy.getBySel(\"user-settings-phoneNumber-input\").type(\"abcde\");\n    cy.getBySel(\"user-settings-submit\").click();\n\n    cy.getBySel(\"user-settings-email-input\")\n      .parent()\n      .contains(/invalid email/i);\n    cy.getBySel(\"user-settings-phoneNumber-input\")\n      .parent()\n      .contains(/invalid phone/i);\n  });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('updates first name, last name, email and phone number', () => {\n    // \"updates first name, last name, email and phone number\"\n    const userInfo = {\n      firstName: \"New First Name\",\n      lastName: \"New Last Name\",\n      email: \"email@email.com\",\n      phoneNumber: \"6155551212\",\n    };\n\n    // Step 1: Fill out the user settings form with new values\n    cy.getBySel(\"user-settings-firstName-input\")\n      .clear()\n      .type(userInfo.firstName);\n    cy.getBySel(\"user-settings-lastName-input\")\n      .clear()\n      .type(userInfo.lastName);\n    cy.getBySel(\"user-settings-email-input\")\n      .clear()\n      .type(userInfo.email);\n    cy.getBySel(\"user-settings-phoneNumber-input\")\n      .clear()\n      .type(userInfo.phoneNumber);\n\n    // Step 2: Submit the form\n    cy.getBySel(\"user-settings-submit\").click();\n\n    // Step 3: Wait for the PATCH request and assert it was successful\n    cy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"eq\", 200);\n\n    // Step 4: Assert that the form fields now show the updated values\n    cy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", userInfo.firstName);\n    cy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", userInfo.lastName);\n    cy.getBySel(\"user-settings-email-input\").should(\"have.value\", userInfo.email);\n    cy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", userInfo.phoneNumber);\n\n    // Step 5: Optionally, check for a success notification or message\n    cy.contains(/settings updated|success/i).should(\"exist\");\n  });\r\n});\r\n"
  },
  "o3_mini": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should redirect unauthenticated user to signin page', () => {\n    // it(\"should redirect unauthenticated user to signin page\")\n    //\n    // 1. Clear any stored session data\n    // 2. Visit a protected page (assuming the home page is protected)\n    // 3. Assert that the URL redirects to the signin page and the signin form is visible\n    cy.clearCookies();\n    cy.clearLocalStorage();\n    cy.visit(\"/\");\n\n    // Verify that the user is redirected to '/signin'\n    cy.url().should(\"include\", \"/signin\");\n\n    // Verify that the sign in form appears (using data-test attribute as an example)\n    cy.get('[data-test=\"signin-username\"]').should(\"be.visible\");\n  });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should redirect to the home page after login', () => {\n    // should redirect to the home page after login\n\n    // Step 1: Visit the sign-in page\n    cy.visit(\"/signin\");\n\n    // Step 2: Fill in the login form with valid credentials using \"userInfo\" provided\n    cy.get('input[name=\"username\"]').type(\"PainterJoy90\");\n    cy.get('input[name=\"password\"]').type(\"s3cret\", { log: false });\n\n    // Step 3: Submit the login form\n    cy.get('button[type=\"submit\"]').click();\n\n    // Step 4: Wait for the sign-up API (intercepted as \"signup\") and login related network calls if any\n    cy.wait(\"@signup\");\n\n    // Step 5: Assert that the URL redirects to the home page (assumes home page is at \"/\")\n    cy.url().should(\"eq\", Cypress.config().baseUrl + \"/\");\n\n    // Optionally, verify presence of a home page element (e.g., a navigation bar or welcome message)\n    cy.get(\"[data-test='home-banner']\").should(\"be.visible\");\n  });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should remember a user for 30 days after login', () => {\n    // Test: should remember a user for 30 days after login\n\n    // Using provided user information\n    const userInfo = {\n        firstName: \"Bob\",\n        lastName: \"Ross\",\n        username: \"PainterJoy90\",\n        password: \"s3cret\"\n    };\n\n    // 1. Sign-up steps\n    // Visit the sign-up page and fill in the registration form.\n    cy.visit(\"/signup\");\n    cy.get('[data-test=\"signup-firstName\"]').type(\"Bob\");\n    cy.get('[data-test=\"signup-lastName\"]').type(\"Ross\");\n    cy.get('[data-test=\"signup-username\"]').type(\"PainterJoy90\");\n    cy.get('[data-test=\"signup-password\"]').type(\"s3cret\");\n    cy.get('[data-test=\"signup-submit\"]').click();\n\n    // Wait for the sign-up request to complete.\n    cy.wait(\"@signup\");\n\n    // 2. Login steps with \"Remember Me\" checked for persistent session\n    cy.visit(\"/login\");\n    cy.get('[data-test=\"login-username\"]').type(\"PainterJoy90\");\n    cy.get('[data-test=\"login-password\"]').type(\"s3cret\");\n    // Check the \"Remember Me\" option (assumes a corresponding selector).\n    cy.get('[data-test=\"login-remember\"]').check();\n    cy.get('[data-test=\"login-submit\"]').click();\n\n    // 3. Verify successful login by checking that the dashboard is visible.\n    // Adjust the URL/path or selector based on your app's behavior.\n    cy.url().should(\"not.include\", \"/login\");\n    cy.get('[data-test=\"dashboard\"]').should(\"be.visible\");\n\n    // 4. Validate that a persistent session cookie is set with an expiration near 30 days.\n    // This assumes your app sets a \"session\" cookie with expiry as a Unix timestamp.\n    cy.getCookie(\"session\").should(\"exist\").then((cookie) => {\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        const thirtyDaysInSeconds = 30 * 24 * 60 * 60;\n        // Allow a tolerance of +/-1 day.\n        expect(cookie.expiry).to.be.within(nowInSeconds + 29 * 24 * 60 * 60, nowInSeconds + 31 * 24 * 60 * 60);\n    });\n  });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should allow a visitor to sign-up, login, and logout', () => {\n    // Test: should allow a visitor to sign-up, login, and logout\n\n    // Step 1: Sign-up\n    cy.visit('/signup'); // Visit the sign-up page\n    cy.get('[data-test=\"signup-firstname\"]').type(\"Bob\"); // Enter first name\n    cy.get('[data-test=\"signup-lastname\"]').type(\"Ross\"); // Enter last name\n    cy.get('[data-test=\"signup-username\"]').type(\"PainterJoy90\"); // Enter username\n    cy.get('[data-test=\"signup-password\"]').type(\"s3cret\"); // Enter password\n    cy.get('[data-test=\"signup-submit\"]').click(); // Submit sign-up form\n\n    // Wait for the sign-up API call to complete and verify success status (assumed 201)\n    cy.wait('@signup').its('response.statusCode').should('eq', 201);\n\n    // Verify sign-up success (example: welcome message or redirection)\n    cy.contains(`Welcome, ${\"Bob\"}`).should('be.visible');\n\n    // Step 2: Logout after sign-up (if the app auto-signs in)\n    cy.get('[data-test=\"logout\"]').click();\n    cy.url().should('include', '/signin');\n\n    // Step 3: Login with valid credentials\n    cy.get('[data-test=\"signin-username\"]').type(\"PainterJoy90\"); // Enter username\n    cy.get('[data-test=\"signin-password\"]').type(\"s3cret\"); // Enter password\n    cy.get('[data-test=\"signin-submit\"]').click(); // Submit login form\n\n    // Verify that the login was successful (e.g., redirected to dashboard)\n    cy.url().should('include', '/dashboard');\n    cy.contains(`Hello, ${\"Bob\"}`).should('be.visible');\n\n    // Step 4: Logout after login\n    cy.get('[data-test=\"logout\"]').click();\n    cy.url().should('include', '/signin');\n  });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should display login errors', () => {\n    // Scenario 1: Invalid Username\n\n      // Step 1: Visit the sign-in page\n\n      cy.visit(\"/signin\");\n\n      // Step 2: Attempt login with an invalid username\n\n      cy.get('[data-test=\"signin-username\"]').clear().type(\"invalidUserName\");\n      cy.get('[data-test=\"signin-password\"]').clear().type(\"s3cret\");\n      cy.get('[data-test=\"signin-submit\"]').click();\n\n      // Step 3: Verify that an error message is displayed\n\n      cy.get('[data-test=\"signin-error\"]').should(\"be.visible\").and(\"contain\", \"Invalid username or password\");\n\n      // Scenario 2: Invalid Password\n\n      // Step 4: Visit the sign-in page again\n\n      cy.visit(\"/signin\");\n\n      // Step 5: Attempt login with a valid username and an invalid password\n\n      cy.get('[data-test=\"signin-username\"]').clear().type(\"PainterJoy90\");\n      cy.get('[data-test=\"signin-password\"]').clear().type(\"invalidPa$word\");\n      cy.get('[data-test=\"signin-submit\"]').click();\n\n      // Step 6: Verify that an error message is displayed\n\n      cy.get('[data-test=\"signin-error\"]').should(\"be.visible\").and(\"contain\", \"Invalid username or password\");\n  });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should display signup errors', () => {\n    // \"should display signup errors\"\n\n    // Use provided userInfo and loginCredentials as test data\n    const userInfo = {\n        firstName: \"Bob\",\n        lastName: \"Ross\",\n        username: \"PainterJoy90\",\n        password: \"s3cret\"\n    };\n\n    const loginCredentials = {\n        validPassword: \"s3cret\",\n        invalidUsername: \"invalidUserName\",\n        invalidPassword: \"invalidPa$word\",\n        anotherInvalidPassword: \"INVALID\"\n    };\n\n    // STEP 1: Visit the signup page\n    // (Assuming the signup page is at \"/signup\". Update the URL if needed.)\n    cy.visit(\"/signup\");\n\n    // Test Case 1: Missing first name\n    // Fill out the form leaving the first name empty\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear().type(\"Ross\");\n    cy.get('input[name=\"username\"]').clear().type(\"PainterJoy90\");\n    cy.get('input[name=\"password\"]').clear().type(\"s3cret\");\n    cy.get('input[name=\"confirmPassword\"]').clear().type(\"s3cret\");\n    cy.get('button[type=\"submit\"]').click();\n\n    // Assert an error message related to the required first name is displayed\n    cy.contains(/first name is required/i).should(\"be.visible\");\n\n    // Test Case 2: Invalid username format\n    cy.reload();  // Reset the form by reloading the page\n    cy.get('input[name=\"firstName\"]').clear().type(\"Bob\");\n    cy.get('input[name=\"lastName\"]').clear().type(\"Ross\");\n    cy.get('input[name=\"username\"]').clear().type(\"invalidUserName\");\n    cy.get('input[name=\"password\"]').clear().type(\"s3cret\");\n    cy.get('input[name=\"confirmPassword\"]').clear().type(\"s3cret\");\n    cy.get('button[type=\"submit\"]').click();\n\n    // Assert an error message indicating invalid username is displayed\n    cy.contains(/invalid username/i).should(\"be.visible\");\n\n    // Test Case 3: Password and confirmation mismatch\n    cy.reload();  // Reset the form again\n    cy.get('input[name=\"firstName\"]').clear().type(\"Bob\");\n    cy.get('input[name=\"lastName\"]').clear().type(\"Ross\");\n    cy.get('input[name=\"username\"]').clear().type(\"PainterJoy90\");\n    cy.get('input[name=\"password\"]').clear().type(\"s3cret\");\n    cy.get('input[name=\"confirmPassword\"]').clear().type(\"INVALID\");\n    cy.get('button[type=\"submit\"]').click();\n\n    // Assert an error message for password mismatch is displayed\n    cy.contains(/passwords do not match/i).should(\"be.visible\");\n  });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should error for an invalid user', () => {\n    // it(\"should error for an invalid user\")\n    // Step 1: Visit the sign-up page (adjust the URL selector if needed)\n    cy.visit(\"/signup\");\n\n    // Step 2: Fill in the sign-up form using valid data for first name, last name\n    // but use an invalid username and an invalid password from the provided loginCredentials.\n    cy.get('[data-test=\"signup-firstName\"]').type(\"Bob\");\n    cy.get('[data-test=\"signup-lastName\"]').type(\"Ross\");\n    cy.get('[data-test=\"signup-username\"]').type(\"invalidUserName\");\n    cy.get('[data-test=\"signup-password\"]').type(\"invalidPa$word\");\n\n    // Step 3: Submit the form to trigger the signup endpoint\n    cy.get('[data-test=\"signup-submit\"]').click();\n\n    // Step 4: Wait for the signup request alias to complete and verify that it fails\n    cy.wait(\"@signup\").then((interception) => {\n      // Assert that the response status indicates an error, e.g., 400 Bad Request\n      expect(interception.response.statusCode).to.be.oneOf([400, 422]);\n    });\n\n    // Step 5: Verify that an appropriate error message is displayed on the UI\n    cy.get('[data-test=\"signup-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Invalid user credentials\"); // adjust message based on actual implementation\n  });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it('should error for an invalid password for existing user', () => {\n    // Assume the login page is at \"/signin\"\n\n      cy.visit(\"/signin\");\n\n      // Enter the valid username from userInfo and an invalid password from loginCredentials\n\n      cy.get(\"[data-test=signin-username]\").type(\"PainterJoy90\");\n      cy.get(\"[data-test=signin-password]\").type(\"invalidPa$word\", {\n        log: false\n      });\n\n      // Submit the login form\n\n      cy.get(\"[data-test=signin-submit]\").click();\n\n      // Assert that an error message is displayed indicating login failure\n\n      cy.get(\"[data-test=signin-error]\").should(\"be.visible\").and(\"contain\", \"Incorrect username or password\");\n  });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('creates a new bank account', () => {\n    // Test: creates a new bank account\n\n    // Step 1: Navigate to the bank accounts page\n    cy.visit(\"/bankaccounts\");\n\n    // Step 2: Click the button to open the new bank account form\n    cy.get('[data-test=\"new-bank-account\"]').click();\n\n    // Step 3: Fill in the bank account form using provided user information\n    cy.get('[data-test=\"bank-name\"]').type(userInfo.bankAccountInfo.bankName);\n    cy.get('[data-test=\"routing-number\"]').type(userInfo.bankAccountInfo.routingNumber);\n    cy.get('[data-test=\"account-number\"]').type(userInfo.bankAccountInfo.accountNumber);\n\n    // Step 4: Submit the form\n    cy.get('[data-test=\"submit-bank-account\"]').click();\n\n    // Step 5: Wait for the GraphQL mutation intercept alias for account creation\n    cy.wait(\"@gqlCreateBankAccountMutation\").its(\"response.statusCode\").should(\"eq\", 200);\n\n    // Step 6: Assert that the newly created bank account is displayed in the list\n    cy.get('[data-test=\"bank-account-item\"]').should(\"contain\", userInfo.bankAccountInfo.bankName);\n  });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('should display bank account form errors', () => {\n    // Test: should display bank account form errors\n    // Step 1: Navigate to the bank account creation page\n    cy.visit(\"/bankaccounts/new\");\n\n    // Step 2: Fill in the bank account form with invalid data\n    // Using empty or clearly invalid values to trigger validation error messages\n    cy.get('input[name=\"bankName\"]').clear().type(\"\"); // Empty bank name should be flagged\n    cy.get('input[name=\"routingNumber\"]').clear().type(\"abcde\"); // Invalid routing number (non-numeric)\n    cy.get('input[name=\"accountNumber\"]').clear().type(\"\"); // Empty account number should be flagged\n\n    // Step 3: Attempt to submit the form\n    cy.get('form').submit();\n\n    // Step 4: Assert that error messages are displayed for each field\n    cy.get('[data-test=\"bankName-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Bank name is required\");\n\n    cy.get('[data-test=\"routingNumber-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Routing number is invalid\");\n\n    cy.get('[data-test=\"accountNumber-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Account number is required\");\n  });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('soft deletes a bank account', () => {\n    // it(\"soft deletes a bank account\", () => { })\n    //\n    // Step 1: Create a bank account using the provided bankAccountInfo.\n    cy.log(\"Creating a bank account using provided info\");\n    cy.request({\n        method: \"POST\",\n        url: `${Cypress.env(\"apiUrl\")}/bankAccounts`,\n        body: {\n            bankName: userInfo.bankAccountInfo.bankName,\n            routingNumber: userInfo.bankAccountInfo.routingNumber,\n            accountNumber: userInfo.bankAccountInfo.accountNumber,\n        },\n    }).then((createRes) => {\n        // Assert that the bank account was created successfully.\n        expect(createRes.status).to.eq(201);\n        const bankAccountId = createRes.body.id;\n        cy.log(\"Bank account created with id: \" + bankAccountId);\n\n        // Step 2: Perform the UI action to soft delete the bank account.\n        // Assume that the bank account is rendered with a data-test attribute in the format:\n        // \"bank-account-\", and the soft delete is triggered with an element having\n        // the data-test \"delete-bank-account\".\n        cy.get(`[data-test=\"bank-account-${bankAccountId}\"]`)\n          .find('[data-test=\"delete-bank-account\"]')\n          .click();\n\n        // Step 3: Wait for the deletion GraphQL mutation to complete.\n        cy.wait(\"@gqlDeleteBankAccountMutation\");\n\n        // Step 4: Assert that the bank account now reflects a soft deleted state.\n        // This might be indicated by a CSS class (e.g. \"deleted\") in the UI.\n        cy.get(`[data-test=\"bank-account-${bankAccountId}\"]`)\n          .should(\"have.class\", \"deleted\");\n\n        // Optionally, verify via API that the bank account is marked as deleted.\n        cy.request({\n            method: \"GET\",\n            url: `${Cypress.env(\"apiUrl\")}/bankAccounts/${bankAccountId}`,\n        }).then((getRes) => {\n            expect(getRes.body.isDeleted).to.be.true;\n        });\n    });\n  });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it('renders an empty bank account list state with onboarding modal', () => {\n    // Test: renders an empty bank account list state with onboarding modal\n    // Verify empty bank account list and the onboarding modal appear\n    cy.get('[data-test=\"bank-account-list\"]').should('exist');\n    cy.get('[data-test=\"bank-account-list\"]')\n      .find('[data-test=\"bank-account-item\"]')\n      .should('have.length', 0);\n    cy.get('[data-test=\"onboarding-modal\"]').should('be.visible');\n\n    // (Optional) Click a button within the onboarding modal to start creating a bank account\n    cy.get('[data-test=\"onboarding-modal\"]').within(() => {\n      cy.contains('Add Bank Account').click();\n    });\n\n    // Confirm the bank account form is displayed\n    cy.get('[data-test=\"bank-account-form\"]').should('be.visible');\n\n    // Fill in the bank account form fields using the provided userInfo.bankAccountInfo values\n    cy.get('[data-test=\"bank-name\"]').type(userInfo.bankAccountInfo.bankName);\n    cy.get('[data-test=\"routing-number\"]').type(userInfo.bankAccountInfo.routingNumber);\n    cy.get('[data-test=\"account-number\"]').type(userInfo.bankAccountInfo.accountNumber);\n\n    // Submit the bank account creation form\n    cy.get('[data-test=\"submit-bank-account\"]').click();\n\n    // Wait for the GraphQL mutation to create the bank account to finish\n    cy.wait('@gqlCreateBankAccountMutation');\n\n    // Verify that the new bank account now appears in the list\n    cy.get('[data-test=\"bank-account-list\"]')\n      .find('[data-test=\"bank-account-item\"]')\n      .should('have.length', 1)\n      .and('contain', userInfo.bankAccountInfo.bankName);\n  });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction payment', () => {\n    // it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => { });\n        // Navigate to the new transaction form and submit a payment transaction using userInfo.paymentTransactions[0]\n        const { user, contact } = ctx;\n    \n        // Click button to open the new transaction form\n        cy.getBySel(\"new-transaction-button\").click();\n    \n        // Verify that the new transaction form is visible\n        cy.getBySel(\"new-transaction-form\").should(\"be.visible\");\n    \n        // Use the first payment transaction data from userInfo\n        const paymentTx = userInfo.paymentTransactions[0];\n    \n        // Fill the transaction amount and description inputs\n        cy.get('[data-test=\"transaction-amount\"]').clear().type(paymentTx.amount);\n        cy.get('[data-test=\"transaction-description\"]').clear().type(paymentTx.description);\n    \n        // Assume the receiver selection is a dropdown: select the contact's username as the receiver\n        // (This step might vary depending on how your UI handles receiver selection)\n        cy.get('[data-test=\"transaction-receiver\"]').select(contact.username);\n    \n        // Submit the new transaction\n        cy.get('[data-test=\"submit-transaction\"]').click();\n    \n        // Wait for the create transaction API call and assert it returned success\n        cy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 200);\n    \n        // Verify that the new transaction appears in the transaction list\n        cy.get('[data-test=\"transaction-item\"]')\n          .should(\"contain\", paymentTx.description)\n          .and(\"contain\", paymentTx.amount);\n  });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('navigates to the new transaction form, selects a user and submits a transaction request', () => {\n    // Test: navigates to the new transaction form, selects a user and submits a transaction request\n    // 1. Open the new transaction form\n    cy.get('[data-test=\"new-transaction\"]').click();\n    cy.get('[data-test=\"new-transaction-form\"]').should(\"be.visible\");\n\n    // 2. Select a contact user from the available list\n    // (Assumes that each user is rendered with a data-test attribute \"user-select-option\"\n    // and that the contact's username is displayed)\n    cy.get('[data-test=\"user-select\"]').click();\n    cy.get('[data-test=\"user-select-option\"]')\n      .contains(ctx.contact.username)\n      .click();\n\n    // 3. Fill out the transaction request fields using the provided userInfo.requestTransactions data\n    // Using the first request transaction in the provided list\n    cy.get('[data-test=\"transaction-amount\"]')\n      .clear()\n      .type(userInfo.requestTransactions[0].amount.toString());\n    cy.get('[data-test=\"transaction-description\"]')\n      .clear()\n      .type(userInfo.requestTransactions[0].description);\n\n    // 4. Submit the transaction request form\n    cy.get('[data-test=\"submit-transaction\"]').click();\n\n    // 5. Wait for the transaction request call to complete and verify a positive response\n    cy.wait(\"@createTransaction\")\n      .its(\"response.statusCode\")\n      .should(\"eq\", 200);\n\n    // 6. Assert that the newly created transaction request appears in the UI (e.g. in the personal transactions list)\n    cy.get('[data-test=\"transaction-item\"]')\n      .should(\"contain\", userInfo.requestTransactions[0].description);\n  });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('displays new transaction errors', () => {\n    // Test: displays new transaction errors\n    // 1. Navigate to the new transaction page\n    cy.visit(\"/new-transaction\");\n\n    // 2. Attempt to submit the form with invalid data:\n    //    - Enter an invalid (non-numeric) amount\n    //    - Leave the description empty\n    cy.get('[data-test=\"transaction-amount\"]').clear().type(\"abc\");\n    cy.get('[data-test=\"transaction-description\"]').clear();\n\n    // 3. Submit the form\n    cy.get('[data-test=\"transaction-submit\"]').click();\n\n    // 4. Verify that appropriate error messages are shown\n    cy.get('[data-test=\"transaction-amount-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Amount must be a number\");\n\n    cy.get('[data-test=\"transaction-description-error\"]')\n      .should(\"be.visible\")\n      .and(\"contain\", \"Description is required\");\n  });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('submits a transaction payment and verifies the deposit for the receiver', () => {\n    // it(\"submits a transaction payment and verifies the deposit for the receiver\", () => { \n      // Use the first payment transaction from the provided userInfo data\n      // Assume that the transaction form has fields with data-test attributes:\n      //   - \"transaction-amount\" for the amount input\n      //   - \"transaction-description\" for the description input\n      //   - \"transaction-type\" for selecting the transaction type (“payment”)\n      //   - \"transaction-receiver\" for selecting the receiver (our ctx.contact)\n      //   - \"submit-transaction\" for the submit button\n  \n      // Log the start of the payment submission process\n      cy.log(\"Submitting transaction payment\");\n\n      // Retrieve the payment details from the provided userInfo data\n      const payment = userInfo.paymentTransactions[0]; // { amount: \"35\", description: \"Sushi dinner 🍣\" }\n\n      // Fill in the transaction form with the payment data\n      cy.get('[data-test=\"transaction-amount\"]')\n        .clear()\n        .type(payment.amount);\n      cy.get('[data-test=\"transaction-description\"]')\n        .clear()\n        .type(payment.description);\n      cy.get('[data-test=\"transaction-type\"]')\n        .select(\"payment\");\n\n      // Select the receiver (ctx.contact) from a dropdown or list\n      // We assume that the receiver's username is shown as an option\n      cy.get('[data-test=\"transaction-receiver\"]').click();\n      cy.contains(ctx.contact.username).click();\n\n      // Submit the transaction payment\n      cy.get('[data-test=\"submit-transaction\"]').click();\n\n      // Wait for the transaction creation API call to complete and assert its status\n      cy.wait(\"@createTransaction\").then((interception) => {\n        expect(interception.response.statusCode).to.eq(200);\n      });\n\n      // Wait for the personal transactions to update so that the new transaction appears\n      cy.wait(\"@personalTransactions\");\n\n      // Verify that the receiver has received a deposit for the payment\n      // For example, query the backend (via cy.database) to ensure a transaction exists with the receiver's id and matching amount\n      cy.database(\"find\", \"transactions\").then((transactions) => {\n        const newTransaction = transactions.find(\n          (t) => t.receiverId === ctx.contact.id && Number(t.amount) === Number(payment.amount)\n        );\n        expect(newTransaction, \"New payment transaction for receiver exists\").to.exist;\n      });\n\n      // Optionally, verify the UI display of the receiver's updated balance\n      cy.get('[data-test=\"receiver-balance\"]')\n        .invoke('text')\n        .then((balanceText) => {\n          const balance = parseFloat(balanceText);\n          // Assert that the balance is a number greater than 0 (assumes deposit increased the balance)\n          expect(balance, \"Receiver balance should be increased\").to.be.greaterThan(0);\n        });\n    // });\n  });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it('submits a transaction request and accepts the request for the receiver', () => {\n    // \"submits a transaction request and accepts the request for the receiver\"\n\n    // Use the first request transaction from provided user info\n    const request = userInfo.requestTransactions[0]; // e.g., { amount: \"95\", description: \"Fancy Hotel 🏨\" }\n\n    // Step 1: Navigate to the new transaction form and select \"request\" type\n    cy.get('[data-test=\"new-transaction-btn\"]').click();\n    cy.get('[data-test=\"transaction-type-request\"]').click();\n\n    // Step 2: Fill in the transaction form with the request details\n    cy.get('[data-test=\"transaction-amount\"]')\n      .clear()\n      .type(request.amount);\n    cy.get('[data-test=\"transaction-description\"]')\n      .clear()\n      .type(request.description);\n\n    // Step 3: Select the receiver (using ctx.contact)\n    // Type into the user search input to find the receiver by username\n    cy.get('[data-test=\"user-search-input\"]').type(ctx.contact.username);\n    cy.wait('@usersSearch');\n    // Select the intended receiver from the search results\n    cy.get('[data-test=\"user-search-result\"]')\n      .contains(ctx.contact.username)\n      .click();\n\n    // Step 4: Submit the transaction request\n    cy.get('[data-test=\"submit-transaction\"]').click();\n    cy.wait('@createTransaction')\n      .its('response.statusCode')\n      .should('eq', 200);\n\n    // Step 5: Verify the request appears in the sender's personal transaction list\n    cy.get('[data-test=\"transaction-item\"]')\n      .should('contain', request.description)\n      .and('contain', 'pending');\n\n    // Step 6: Simulate the receiver accepting the transaction request\n    // Log out the sender and log in as the receiver\n    cy.logout().then(() => {\n      cy.loginByXstate(ctx.contact.username);\n    });\n    cy.wait('@personalTransactions');\n\n    // Step 7: Locate the pending transaction request and click the \"accept\" button\n    cy.get('[data-test=\"transaction-item\"]')\n      .contains(request.description)\n      .parents('[data-test=\"transaction-item\"]')\n      .within(() => {\n        cy.get('[data-test=\"accept-transaction\"]').click();\n      });\n    cy.wait('@updateTransaction')\n      .its('response.statusCode')\n      .should('eq', 200);\n\n    // Step 8: Assert that the transaction status is updated to \"accepted\"\n    cy.get('[data-test=\"transaction-item\"]')\n      .contains(request.description)\n      .should('contain', 'accepted');\n  });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A likes a transaction of User B; User B gets notification that User A liked transaction ', () => {\n    // \"User A likes a transaction of User B; User B gets notification that User A liked transaction\"\n\n    // Step 1: Simulate that User B has a transaction available.\n    // (This would normally be set up via the backend or a helper command; here we assign a dummy transaction id.)\n    const transactionId = \"tx-123\"; // Placeholder transaction ID for User B's transaction\n\n    // Step 2: Simulate User A liking the transaction.\n    // Here we send a POST request to the (assumed) likes endpoint.\n    cy.request({\n        method: \"POST\",\n        url: \"/api/likes\", // Assumed endpoint for liking a transaction\n        body: {\n            transactionId,\n            likedBy: ctx.userA.username // Use User A's username\n        }\n    }).then((response) => {\n        // Assert that the like request was successful.\n        expect(response.status).to.equal(200);\n    });\n\n    // Step 3: Wait for the notifications API call to complete.\n    cy.wait(\"@getNotifications\");\n\n    // Step 4: Retrieve notifications for User B to verify that User A's like has been recorded.\n    cy.request({\n        method: \"GET\",\n        url: `/api/notifications?userId=${ctx.userB.id}` // Assumed query parameter to filter User B's notifications\n    }).then((res) => {\n        expect(res.status).to.equal(200);\n        const notifications = res.body;\n        // Assert that there exists a notification indicating that User A liked the transaction.\n        const likeNotification = notifications.find((n) =>\n            n.type === \"like\" &&\n            n.from === ctx.userA.username &&\n            n.transactionId === transactionId\n        );\n        expect(likeNotification, \"User B should receive a like notification from User A\").to.exist;\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction', () => {\n    // \"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\"\n\n    // Step 1: Log in as User C (using API login for speed; adjust credentials as needed)\n    cy.loginByApi(ctx.userC.username, \"s3cret\");\n\n    // Step 2: Set up a transaction between User A and User B.\n    // We simulate creating a transaction via a POST request.\n    cy.request({\n        method: \"POST\",\n        url: \"/transactions\",\n        body: {\n            senderId: ctx.userA.id,\n            receiverId: ctx.userB.id,\n            description: \"Test Transaction between User A and User B\",\n            amount: 100,\n            type: \"payment\"\n        }\n    }).then((transactionResp) => {\n        const transaction = transactionResp.body;\n        expect(transaction).to.have.property(\"id\");\n\n        // Step 3: Simulate User C liking the transaction.\n        cy.request({\n            method: \"POST\",\n            url: \"/likes\",\n            body: {\n                userId: ctx.userC.id,\n                transactionId: transaction.id\n            }\n        }).then((likeResp) => {\n            expect(likeResp.status).to.eq(200);\n\n            // Step 4: Wait for the notifications request to run.\n            cy.wait(\"@getNotifications\");\n\n            // Step 5: Verify that User A received a notification about the like.\n            cy.request({\n                method: \"GET\",\n                url: `/notifications?userId=${ctx.userA.id}`\n            }).then((notifRespA) => {\n                expect(notifRespA.body).to.be.an(\"array\");\n                const userANotif = notifRespA.body.find(notif => \n                    notif.transactionId === transaction.id &&\n                    notif.message && notif.message.includes(ctx.userC.username)\n                );\n                expect(userANotif).to.exist;\n            });\n\n            // Step 6: Verify that User B received a notification about the like.\n            cy.request({\n                method: \"GET\",\n                url: `/notifications?userId=${ctx.userB.id}`\n            }).then((notifRespB) => {\n                expect(notifRespB.body).to.be.an(\"array\");\n                const userBNotif = notifRespB.body.find(notif => \n                    notif.transactionId === transaction.id &&\n                    notif.message && notif.message.includes(ctx.userC.username)\n                );\n                expect(userBNotif).to.exist;\n            });\n        });\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A comments on a transaction of User B; User B gets notification that User A commented on their transaction', () => {\n    // User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\n\n    // Log the beginning of the test\n    cy.log(\"Test: User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\");\n\n    // Step 1: Retrieve a transaction where User B is the receiver using our database helper\n    cy.database(\"filter\", \"transactions\").then((transactions: any[]) => {\n      // Find a transaction that belongs to User B\n      const transaction = transactions.find(t => t.receiverId === ctx.userB.id);\n      expect(transaction, \"Found transaction for User B\").to.be.ok;\n\n      // Step 2: User A posts a comment on the found transaction\n      const commentContent = \"Awesome transaction!\";\n      cy.request({\n        method: \"POST\",\n        url: `/comments/${transaction.id}`, // Assumes comment endpoint includes the transaction id in the URL\n        body: {\n          userId: ctx.userA.id,\n          transactionId: transaction.id,\n          content: commentContent\n        }\n      }).then((response) => {\n        expect(response.status).to.equal(200);\n      });\n\n      // Wait for the intercept of the POST /comments/* request\n      cy.wait(\"@postComment\");\n\n      // Step 3: Fetch notifications for User B to verify the notification for the comment exists\n      cy.request({\n        method: \"GET\",\n        url: `/notifications?userId=${ctx.userB.id}`\n      }).then((res) => {\n        expect(res.status).to.equal(200);\n        // Look for a notification that indicates a comment by User A on the specific transaction\n        const notifications = res.body;\n        const notification = notifications.find(n =>\n          n.transactionId === transaction.id &&\n          n.type === \"comment\" &&\n          n.commentContent === commentContent\n        );\n        expect(notification, \"Notification for comment exists\").to.be.ok;\n      });\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction', () => {\n    // First, log in as User C (using a custom command; adjust as needed)\n    cy.loginByXstate(ctx.userC.username);\n\n    // Retrieve a transaction between User A and User B from the seeded database\n    cy.database(\"find\", \"transactions\").then((transactions: any[]) => {\n      // Find a transaction where User A is the sender and User B is the receiver\n      const transaction = transactions.find(\n        (t) => t.senderId === ctx.userA.id && t.receiverId === ctx.userB.id\n      );\n      // Ensure the transaction exists\n      expect(transaction, \"Transaction between User A and User B exists\").to.exist;\n  \n      // Log the transaction id for debugging\n      cy.log(\"Found transaction with id: \" + transaction.id);\n  \n      // Simulate User C adding a comment on the transaction via an API request\n      // (Assuming the backend accepts a POST request to the comments endpoint)\n      cy.request({\n        method: \"POST\",\n        url: `/comments/${transaction.id}`,\n        body: {\n          userId: ctx.userC.id,\n          content: \"This is a comment from User C.\",\n        },\n      }).then((response) => {\n        // Expect the comment to be created successfully (HTTP 201 Created)\n        expect(response.status).to.eq(201);\n      });\n  \n      // Wait for the comment POST request to complete (using the alias set in beforeEach if applicable)\n      cy.wait(\"@postComment\");\n\n      // Verify that User A receives a notification for the new comment\n      cy.request({\n        method: \"GET\",\n        url: `/notifications?userId=${ctx.userA.id}`,\n      }).then((resA: any) => {\n        expect(resA.status).to.eq(200);\n        // Assert that at least one notification for the transaction contains a commentId\n        const notificationForA = resA.body.find(\n          (n: any) => n.commentId && n.transactionId === transaction.id\n        );\n        expect(notificationForA, \"User A received a comment notification\").to.exist;\n      });\n\n      // Verify that User B receives a notification for the new comment\n      cy.request({\n        method: \"GET\",\n        url: `/notifications?userId=${ctx.userB.id}`,\n      }).then((resB: any) => {\n        expect(resB.status).to.eq(200);\n        const notificationForB = resB.body.find(\n          (n: any) => n.commentId && n.transactionId === transaction.id\n        );\n        expect(notificationForB, \"User B received a comment notification\").to.exist;\n      });\n    });\n  });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment to User B', () => {\n    // \"User A sends a payment to User B\"\n\n    // Step 1: Log in as User A\n    cy.loginByXstate(ctx.userA.username);\n\n    // Step 2: Navigate to the new transaction form (assumed route)\n    cy.visit(\"/new-transaction\");\n\n    // Step 3: Fill out the payment form\n    // Assuming there are form fields with data-test attributes for recipient and amount\n    cy.get('[data-test=\"recipient-input\"]').type(ctx.userB.username); // using User B's username as recipient\n    cy.get('[data-test=\"amount-input\"]').type(\"100\"); // example amount – adjust as needed\n\n    // Submit the payment\n    cy.get('[data-test=\"send-payment\"]').click();\n\n    // Step 4: Wait for the payment transaction to be created successfully\n    cy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 200);\n\n    // Step 5: Log out as User A (assuming a logout command exists)\n    cy.logout();\n\n    // Step 6: Log in as User B to verify that the notification has been received\n    cy.loginByXstate(ctx.userB.username);\n\n    // Step 7: Navigate to the notifications page\n    cy.visit(\"/notifications\");\n\n    // Step 8: Assert that a notification reflecting the payment from User A exists\n    cy.get('[data-test=\"notification\"]')\n      .should(\"contain\", \"payment\")\n      .and(\"contain\", ctx.userA.username);\n  });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it('User A sends a payment request to User C', () => {\n    // Step 1: Log in as User A\n\n      cy.loginByXstate(ctx.userA.username);\n\n      // Step 2: Navigate to the new transaction form\n\n      cy.get('[data-test=\"new-transaction\"]').click();\n\n      // Step 3: Fill in the payment request details\n\n      // Using User C's username as the recipient identifier\n\n      cy.get('[data-test=\"transaction-recipient\"]').type(ctx.userC.username);\n\n      // Set a payment amount (for example, $100.00)\n\n      const paymentAmount = \"100.00\";\n      cy.get('[data-test=\"transaction-amount\"]').type(paymentAmount);\n\n      // Provide a description that identifies the transaction as a payment request\n\n      cy.get('[data-test=\"transaction-description\"]').type(`Payment request from ${ctx.userA.username} to ${ctx.userC.username}`);\n\n      // Step 4: Select the \"payment request\" option if applicable (assuming a radio button exists)\n\n      cy.get('[data-test=\"transaction-type-request\"]').click();\n\n      // Step 5: Submit the transaction form\n\n      cy.get('[data-test=\"transaction-submit\"]').click();\n\n      // Step 6: Wait for the POST /transactions call and assert success\n\n      cy.wait('@createTransaction').then(interception => {\n        expect(interception.response.statusCode).to.eq(200);\n\n        // Assert that the transaction has an id property\n\n        expect(interception.response.body).to.have.property('id');\n      });\n\n      // Step 7: Verify that a notification is created for User C regarding the payment request\n\n      // (Assuming a helper command \"cy.database\" returns the current notifications)\n\n      cy.database('filter', 'notifications').then(notifications => {\n        const notificationForUserC = notifications.find(n => n.userId === ctx.userC.id && n.transactionId);\n        expect(notificationForUserC).to.exist;\n      });\n  });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it('renders an empty notifications state', () => {\n    // Test: renders an empty notifications state\n    // Step 1: Visit the notifications view (adjust URL as needed)\n    cy.visit(\"/notifications\");\n\n    // Step 2: Wait for the notifications API call to complete\n    cy.wait(\"@getNotifications\");\n\n    // Step 3: Verify that the notifications container is present and empty\n    // (Assuming the notifications list has a data-test attribute \"notifications-list\")\n    cy.get('[data-test=\"notifications-list\"]').should(\"exist\").and(\"be.empty\");\n\n    // Alternatively, check for a 'no notifications' message\n    cy.contains(\"No notifications\").should(\"be.visible\");\n  });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"app layout and responsiveness\", function () {\r\n        it('toggles the navigation drawer', () => {\n    // Test: toggles the navigation drawer\n\n    // Click the toggle button to open the navigation drawer\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify that the navigation drawer becomes visible\n    cy.getBySel(\"navigation-drawer\").should(\"be.visible\");\n\n    // Click the toggle button again to close the navigation drawer\n    cy.getBySel(\"sidenav-toggle\").click();\n\n    // Verify that the navigation drawer is hidden\n    cy.getBySel(\"navigation-drawer\").should(\"not.be.visible\");\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => { });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it('friends feed only shows contact transactions', () => {\n    // it(\"friends feed only shows contact transactions\", () => { });\n        // Wait for the contacts transactions API call to complete\n        cy.wait(`@${feedViews.contacts.routeAlias}`).then((interception) => {\n            // Assert that the API response was successful\n            expect(interception.response.statusCode).to.eq(200);\n            // Optionally verify that the returned transactions belong to contacts\n            // (Additional logic might be needed here based on your data structure)\n        });\n  \n        // Verify the UI shows only transactions marked as contact transactions.\n        // This example assumes that each transaction item has a data attribute \"data-test\" equal to \"contact-transaction\".\n        // Adjust the selector and assertions based on your application implementation.\n        cy.get('[data-test=\"transaction-item\"]').each(($el) => {\n            // Verify the transaction element indicates it is from a contact.\n            // For example, checking for a badge or label containing \"Contact\".\n            cy.wrap($el).should('contain.text', 'Contact');\n        });\n  });\r\n    });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        it('renders transactions item variations in feed', () => {\n    // \n    // Original test: it(\"renders transactions item variations in feed\", () => { });\n    //\n    // Step 1: Wait for the personal transactions alias to ensure data has loaded\n    cy.wait(\"@personalTransactions\");\n\n    // Step 2: Verify that at least one transaction item is rendered\n    cy.get(\"[data-test=transaction-item]\").should(\"have.length.greaterThan\", 0);\n\n    // Step 3: Check that each transaction item displays expected variation elements (e.g. description, amount)\n    cy.get(\"[data-test=transaction-item]\").each(($el) => {\n      cy.wrap($el).find(\".transaction-description\").should(\"be.visible\");\n      cy.wrap($el).find(\".transaction-amount\").should(\"be.visible\");\n    });\n    //\n  });\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"renders and paginates all transaction feeds\", function () {\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('paginates ${feedName} transaction feed', () => {\n    // Test description: paginates public transaction feed\n    // Wait for the public transactions to load\n    cy.wait(\"@publicTransactions\");\n\n    // Assert that at least one transaction item is visible\n    cy.getBySelLike(\"transaction-item\")\n      .should(\"have.length.greaterThan\", 0)\n      .then((initialItems) => {\n        const initialCount = initialItems.length;\n\n        // Scroll to the bottom to trigger pagination\n        cy.get(\"body\").scrollTo(\"bottom\", { duration: 500 });\n\n        // Optionally wait for the next page call (if it re-fires the intercept)\n        cy.wait(1000); // adjust waiting time as needed\n\n        // Assert that more items have loaded after scrolling\n        cy.getBySelLike(\"transaction-item\")\n          .its(\"length\")\n          .should(\"be.greaterThan\", initialCount);\n\n        // Optionally check that any loading spinner is no longer visible\n        cy.getBySel(\"loading-spinner\").should(\"not.exist\");\n      });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {\r\n            it('closes date range picker modal', () => {\n    // Original it block: // it(\"closes date range picker modal\", () => { });\n\n    // For mobile devices, the date range picker modal should appear and be closable\n    // Step 1: Verify the modal is visible\n    cy.get('[data-cy=\"date-range-picker\"]').should(\"be.visible\");\n\n    // Step 2: Click the close button on the modal (update the selector as needed)\n    cy.get('[data-cy=\"date-range-picker-close\"]').click();\n\n    // Step 3: Assert that the modal is no longer visible\n    cy.get('[data-cy=\"date-range-picker\"]').should(\"not.exist\");\n\n\n    // Original _.each block over feedViews:\n    _.each(feedViews, (feed, feedName) => {\n      // Here we assume that for each feed view, the date range filter functionality should work.\n      // The following code simulates selecting a date range and asserting that the feed is correctly filtered.\n      // NOTE: Update the data-cy selectors and date input formats as needed.\n\n      // Log the feed view being tested for clarity\n      cy.log(`Testing date range filtering for the ${feedName} feed`);\n\n      // Step 1: Open the date range picker via the filter button\n      cy.get('[data-cy=\"date-filter-button\"]').click();\n\n      // Step 2: Define a start and end date for the filter.\n      // Using today's date and one week later for demonstration purposes.\n      const today = new Date();\n      const startDate = today;\n      const endDate = Cypress._.addDays(today, 7);\n\n      // Step 3: Fill in the start date (assuming an input format like \"YYYY-MM-DD\")\n      cy.get('[data-cy=\"start-date-input\"]')\n        .clear()\n        .type(startDate.toISOString().split(\"T\")[0]);\n\n      // Step 4: Fill in the end date\n      cy.get('[data-cy=\"end-date-input\"]')\n        .clear()\n        .type(endDate.toISOString().split(\"T\")[0]);\n\n      // Step 5: Apply the date filter\n      cy.get('[data-cy=\"apply-date-filter\"]').click();\n\n      // Step 6: Wait for the network response and reload of transactions in this feed view\n      cy.wait(`@${feed.routeAlias}`);\n\n      // Step 7: Assert that each transaction item in the feed has a date within the expected range.\n      // This assumes each transaction element has a 'data-transaction-date' attribute.\n      cy.get('[data-cy=\"transaction-item\"]').each(($el) => {\n        const dateStr = $el.attr(\"data-transaction-date\");\n        if (dateStr) {\n          const transactionDate = new Date(dateStr);\n          // Use the provided utility functions to normalize the dates if necessary\n          expect(\n            transactionDate >= startOfDayUTC(startDate) &&\n              transactionDate <= endOfDayUTC(endDate)\n          ).to.be.true;\n        } else {\n          // If no date attribute is found, flag the inconsistency.\n          throw new Error(\"Transaction item is missing the 'data-transaction-date' attribute\");\n        }\n      });\n    });\n  });\r\n        }\r\n        _.each(feedViews, (feed, feedName) => {});\r\n    });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('filters ${feedName} transaction feed by date range', () => {\n    // ─── filters [feedName] transaction feed by date range ─────────────────────────\n    // Define a date range for filtering\n    const startDate = new Date(); \n    const endDate = addDays(startDate, 7);\n\n    // Use the custom Cypress command to pick the date range\n    cy.pickDateRange(startDate, endDate); \n\n    // Wait for the API call associated with this feed to complete\n    cy.wait(`@${feed.routeAlias}`);\n\n    // Log the feed being verified (for debugging purposes)\n    cy.log(`Verifying ${feedName} transaction feed within date range`, {\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n    });\n\n    // Verify that each transaction item’s date is within the selected range.\n    // (Assumes that each transaction item has a data attribute \"data-transaction-date\" with an ISO date string.)\n    cy.getBySel(\"transaction-item\").each(($el) => {\n      // Get the transaction date from the element's attribute.\n      const transactionDateStr = $el.attr(\"data-transaction-date\");\n      expect(transactionDateStr, \"Transaction date should exist\").to.exist;\n      const transactionDate = new Date(transactionDateStr);\n  \n      // Use date-fns to get the start and end of the day for comparison.\n      const dayStart = startOfDay(transactionDate);\n      const dayEnd = endOfDayUTC(transactionDate);\n  \n      // Assert that the transaction date falls within our selected date range.\n      expect(\n        isWithinInterval(transactionDate, { start: startOfDay(startDate), end: endOfDayUTC(endDate) }),\n        `Transaction date ${transactionDateStr} for ${feedName} feed is within the range`\n      ).to.be.true;\n    });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('does not show ${feedName} transactions for out of range date limits', () => {\n    // Test: does not show public transactions for out of range date limits\n    // Step 1: Navigate to the app (assuming the user has been logged in in beforeEach)\n    // Step 2: Set an out‐of‐range date range (e.g. a month far in the past)\n    const pastStartDate = new Date('2000-01-01');\n    const pastEndDate = new Date('2000-01-02');\n    cy.pickDateRange(pastStartDate, pastEndDate);\n    // Wait for the public transactions network call\n    cy.wait(\"@publicTransactions\");\n    // Assert that no public transaction items are visible for the 'public-tab'\n    // (Assumes a data-test attribute like \"public-tab-transaction-item\" exists)\n    cy.getBySel(\"public-tab-transaction-item\").should(\"not.exist\");\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`filters ${feedName} transaction feed by amount range`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it('does not show ${feedName} transactions for out of range amount limits', () => {\n    // it block: does not show public transactions for out of range amount limits\n    // Set the transaction amount range filter\n    cy.setTransactionAmountRange(dollarAmountRange.min, dollarAmountRange.max);\n    // Wait for the public feed response to complete\n    cy.wait(`@${feedViews.public.routeAlias}`);\n    // Verify that each visible transaction’s amount is within the valid range\n    cy.getBySelLike(\"transaction-item\").each(($el) => {\n      const amountText = $el.find(\".transaction-amount\").text();\n      const amount = parseFloat(amountText.replace(/[^0-9.]/g, \"\"));\n      expect(amount).to.be.within(dollarAmountRange.min, dollarAmountRange.max);\n    });\n  });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"mine feed only shows personal transactions\", () => { });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('transactions navigation tabs are hidden on a transaction view page', () => {\n    // Click on the first transaction item to navigate to its details view  \n        cy.getBySel(\"transaction-item\").first().click();\n\n        // Wait for the transaction details to load  \n        cy.wait(\"@getTransaction\");\n\n        // Assert that the transaction detail container is visible (indicating we’re in the view)  \n        cy.getBySel(\"transaction-detail\").should(\"be.visible\");\n\n        // Assert that the navigation tabs container does not exist on the transaction view page  \n        cy.getBySel(\"transaction-nav-tabs\").should(\"not.exist\");\n\n        // Optionally, verify that other navigation elements (if any exist normally) are not visible  \n        cy.get(\"nav\").within(() => {\n            cy.contains(\"Transactions\").should(\"not.exist\");\n            cy.contains(\"Home\").should(\"not.exist\");\n        });\n  });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('likes a transaction', () => {\n    /* it(\"likes a transaction\") */\n    // Step 1: Verify that the transaction item is visible\n    cy.getBySel(\"transaction-item\").should(\"exist\");\n\n    // Step 2: Click on the like button within the first transaction item\n    cy.getBySel(\"transaction-item\")\n      .first()\n      .within(() => {\n        cy.getBySel(\"like-button\").click();\n      });\n\n    // Step 3: Assert that the like count has increased (greater than 0)\n    cy.getBySel(\"transaction-item\")\n      .first()\n      .within(() => {\n        cy.getBySel(\"like-count\").invoke(\"text\").then((text) => {\n          const currentLikes = parseInt(text);\n          expect(currentLikes).to.be.greaterThan(0);\n        });\n      });\n\n    // Log success\n    cy.log(\"Transaction liked successfully\");\n  });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => { });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('accepts a transaction request', () => {\n    // Check that a pending transaction request is available from context\n        cy.wrap(ctx.transactionRequest).should('exist');\n\n        // Simulate clicking the \"Accept\" button for the transaction request.\n        // (Assuming there is a button with a data-test attribute \"accept-transaction\" inside the transaction request item)\n        cy.getBySel('transaction-request')\n          .find('[data-test=\"accept-transaction\"]')\n          .click();\n\n        // Wait for the PATCH call to complete and assert a 200 OK response.\n        cy.wait('@updateTransaction').its('response.statusCode').should('eq', 200);\n\n        // Optionally, verify that the UI shows the transaction request as accepted.\n        // (Assuming there is an element with a data-test attribute \"transaction-request-status\" that displays the status.)\n        cy.getBySel('transaction-request-status')\n          .should('contain.text', 'accepted');\n\n        // You may add more assertions if additional elements should change (e.g. user's updated balance)\n  });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('rejects a transaction request', () => {\n    // it(\"rejects a transaction request\")\n\n    // Step 1: Click the \"reject\" button on the transaction request view\n    cy.getBySel(\"transaction-reject-button\").click();\n\n    // Step 2: Wait for the PATCH request to update the transaction request\n    cy.wait(\"@updateTransaction\").then((interception) => {\n      // Assert that the update was successful\n      expect(interception.response.statusCode).to.equal(200);\n    });\n\n    // Step 3: Assert that the UI reflects the transaction request as rejected\n    cy.getBySel(\"transaction-status\").should(\"contain.text\", \"rejected\");\n\n    // Optional: Verify in the backend (if accessible) that the transaction's requestStatus is updated\n    // cy.database(\"find\", \"transactions\", { id: ctx.transactionRequest.id }).then((updatedTransaction) => {\n    //   expect(updatedTransaction.requestStatus).to.equal(\"rejected\");\n    // });\n  });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it('does not display accept/reject buttons on completed request', () => {\n    // It block: \"does not display accept/reject buttons on completed request\"\n\n    // First, update the transaction request to mark it as complete.\n    // Note: This step assumes an existing backend command or API to update the transaction.\n    // If such a command isn't available, additional implementation is needed.\n    cy.then(() => {\n      if (ctx.transactionRequest && ctx.transactionRequest.id) {\n        // Simulate updating the transaction to a completed state.\n        // This can be done via a backend task or API call.\n        // For demonstration purposes, we'll use cy.request to patch the transaction.\n        return cy.request({\n          method: \"PATCH\",\n          url: `/transactions/${ctx.transactionRequest.id}`,\n          body: { status: \"complete\", requestStatus: \"accepted\" },\n        });\n      } else {\n        throw new Error(\"No transaction request available in context\");\n      }\n    })\n    .then(() => {\n      // Reload the transaction view page for the updated transaction.\n      cy.visit(`/transactions/${ctx.transactionRequest.id}`);\n      cy.wait(\"@getTransaction\");\n\n      // Verify that accept and reject buttons are not visible on a completed request.\n      cy.get('[data-test=\"accept-button\"]').should(\"not.exist\");\n      cy.get('[data-test=\"reject-button\"]').should(\"not.exist\");\n\n      // Optionally assert that a completed status indicator is visible.\n      cy.get('[data-test=\"transaction-status\"]').should(\"contain.text\", \"complete\");\n    });\n  });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('renders the user settings form', () => {\n    // it(\"renders the user settings form\", () => { \n      // Verify that user settings form fields are visible\n      cy.getBySel(\"settings-firstName\").should(\"be.visible\");\n      cy.getBySel(\"settings-lastName\").should(\"be.visible\");\n      cy.getBySel(\"settings-email\").should(\"be.visible\");\n      cy.getBySel(\"settings-phoneNumber\").should(\"be.visible\");\n\n      // Clear and update form fields with the new user information\n      cy.getBySel(\"settings-firstName\").clear().type(userInfo.firstName);\n      cy.getBySel(\"settings-lastName\").clear().type(userInfo.lastName);\n      cy.getBySel(\"settings-email\").clear().type(userInfo.email);\n      cy.getBySel(\"settings-phoneNumber\").clear().type(userInfo.phoneNumber);\n\n      // Submit the settings form\n      cy.getBySel(\"settings-submit\").click();\n\n      // Wait for the \"updateUser\" API call and assert it responds with a success status\n      cy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"eq\", 200);\n\n      // Verify that a success notification is displayed\n      cy.getBySel(\"settings-success-msg\").should(\"contain\", \"Settings updated\");\n\n      // Re-fetch form values to confirm the updates are reflected\n      cy.getBySel(\"settings-firstName\").should(\"have.value\", userInfo.firstName);\n      cy.getBySel(\"settings-lastName\").should(\"have.value\", userInfo.lastName);\n      cy.getBySel(\"settings-email\").should(\"have.value\", userInfo.email);\n      cy.getBySel(\"settings-phoneNumber\").should(\"have.value\", userInfo.phoneNumber);\n    // });\n  });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('should display user setting form errors', () => {\n    // Test invalid email format by entering an incorrect email\n\n      cy.getBySel(\"user-settings-email\").clear().type(\"invalid-email\");\n      cy.getBySel(\"user-settings-email\").blur();\n      cy.getBySel(\"user-settings-email-error\").should(\"be.visible\").and(\"contain\", \"Invalid email\");\n\n      // Test empty first name field\n\n      cy.getBySel(\"user-settings-firstName\").clear();\n      cy.getBySel(\"user-settings-firstName\").blur();\n      cy.getBySel(\"user-settings-firstName-error\").should(\"be.visible\").and(\"contain\", \"First name is required\");\n\n      // Test empty last name field\n\n      cy.getBySel(\"user-settings-lastName\").clear();\n      cy.getBySel(\"user-settings-lastName\").blur();\n      cy.getBySel(\"user-settings-lastName-error\").should(\"be.visible\").and(\"contain\", \"Last name is required\");\n\n      // Test invalid phone number by entering alphabetic characters\n\n      cy.getBySel(\"user-settings-phoneNumber\").clear().type(\"abc123\");\n      cy.getBySel(\"user-settings-phoneNumber\").blur();\n      cy.getBySel(\"user-settings-phoneNumber-error\").should(\"be.visible\").and(\"contain\", \"Invalid phone number\");\n\n      // Attempt to submit the form\n\n      cy.getBySel(\"user-settings-submit\").click();\n\n      // Verify that the form is not submitted by staying on the same page\n\n      cy.url().should(\"include\", \"/user-settings\");\n  });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it('updates first name, last name, email and phone number', () => {\n    // it(\"updates first name, last name, email and phone number\", () => { });\n    const userInfo = {\n        firstName: \"New First Name\",\n        lastName: \"New Last Name\",\n        email: \"email@email.com\",\n        phoneNumber: \"6155551212\"\n    };\n\n    // Step 1: Clear and update each field\n    cy.get('[data-test=\"user-settings-firstName\"]')\n      .clear()\n      .type(userInfo.firstName);\n\n    cy.get('[data-test=\"user-settings-lastName\"]')\n      .clear()\n      .type(userInfo.lastName);\n\n    cy.get('[data-test=\"user-settings-email\"]')\n      .clear()\n      .type(userInfo.email);\n\n    cy.get('[data-test=\"user-settings-phoneNumber\"]')\n      .clear()\n      .type(userInfo.phoneNumber);\n\n    // Step 2: Submit the update form\n    cy.get('[data-test=\"user-settings-submit\"]').click();\n\n    // Step 3: Wait for the PATCH request to complete and assert success\n    cy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"eq\", 200);\n\n    // Step 4: Verify that a success message is displayed (assuming such an element exists)\n    cy.get('[data-test=\"user-settings-success\"]').should(\"be.visible\");\n\n    // Step 5: Reload page and re-check that form fields contain the updated information\n    cy.reload();\n\n    cy.get('[data-test=\"user-settings-firstName\"]').should(\"have.value\", userInfo.firstName);\n    cy.get('[data-test=\"user-settings-lastName\"]').should(\"have.value\", userInfo.lastName);\n    cy.get('[data-test=\"user-settings-email\"]').should(\"have.value\", userInfo.email);\n    cy.get('[data-test=\"user-settings-phoneNumber\"]').should(\"have.value\", userInfo.phoneNumber);\n  });\r\n});\r\n"
  },
  "o4_mini_preview": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect unauthenticated user to signin page\", () => {\n// Attempt to visit the protected home page\r\r\n  cy.visit('/')\r\r\n\r\r\n  // Should be redirected to the sign-in page\r\r\n  cy.location('pathname').should('equal', '/signin')\r\r\n\r\r\n  // Verify the sign-in form is displayed\r\r\n  cy.get('form').should('be.visible').and('contain', 'Username')\n });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should redirect to the home page after login\", () => {\n// Visit the sign-in page\r\r\ncy.visit('/signin');\r\r\n\r\r\n// Fill in the username and password fields\r\r\ncy.get('[data-test=\"signin-username\"]').type(\"PainterJoy90\");\r\r\ncy.get('[data-test=\"signin-password\"]').type(\"s3cret\");\r\r\n\r\r\n// Submit the login form\r\r\ncy.get('[data-test=\"signin-submit\"]').click();\r\r\n\r\r\n// Verify that after login we land on the home page\r\r\ncy.location('pathname').should('equal', '/');\n });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should remember a user for 30 days after login\", () => {\n// Visit the sign-in page\r\r\n  cy.visit('/signin');\r\r\n\r\r\n  // Fill in credentials and enable \"Remember me\"\r\r\n  cy.getBySel('signin-username').type(\"PainterJoy90\");\r\r\n  cy.getBySel('signin-password').type(\"s3cret\");\r\r\n  cy.getBySel('signin-remember-me').check();\r\r\n\r\r\n  // Submit the form\r\r\n  cy.getBySel('signin-submit').click();\r\r\n\r\r\n  // Verify redirection to the home page\r\r\n  cy.location('pathname').should('equal', '/');\r\r\n\r\r\n  // Confirm the session cookie expires in ~30 days\r\r\n  cy.getCookie('connect.sid').should('exist').then((cookie) => {\r\r\n    const nowSec = Date.now() / 1000;\r\r\n    const expirySec = cookie!.expiry!;\r\r\n    const daysUntilExpiry = (expirySec - nowSec) / (60 * 60 * 24);\r\r\n\r\r\n    // Assert that the expiry is approximately 30 days (±1 day)\r\r\n    expect(daysUntilExpiry).to.be.closeTo(30, 1);\r\r\n  });\n });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should allow a visitor to sign-up, login, and logout\", () => {\n// Visit the sign-up page\r\r\ncy.visit(\"/signup\");\r\r\n\r\r\n// Fill out the sign-up form\r\r\ncy.getBySel(\"signup-first-name\").type(\"Bob\");\r\r\ncy.getBySel(\"signup-last-name\").type(\"Ross\");\r\r\ncy.getBySel(\"signup-username\").type(\"PainterJoy90\");\r\r\ncy.getBySel(\"signup-password\").type(\"s3cret\");\r\r\ncy.getBySel(\"signup-confirmPassword\").type(\"s3cret\");\r\r\n\r\r\n// Submit and wait for the REST signup call\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.wait(\"@signup\");\r\r\n\r\r\n// Assert redirection to the sign-in page\r\r\ncy.location(\"pathname\").should(\"equal\", \"/signin\");\r\r\n\r\r\n// Visit the sign-in page (in case the redirect didn’t navigate)\r\r\ncy.visit(\"/signin\");\r\r\n\r\r\n// Fill out the login form\r\r\ncy.getBySel(\"signin-username\").type(\"PainterJoy90\");\r\r\ncy.getBySel(\"signin-password\").type(\"s3cret\");\r\r\n\r\r\n// Submit and verify successful login UI\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\ncy.getBySel(\"sidenav-user-full-name\")\r\r\n  .should(\"contain\", `${\"Bob\"} ${\"Ross\"}`);\r\r\n\r\r\n// Log out\r\r\nif (isMobile()) {\r\r\n  cy.getBySel(\"sidenav-toggle\").click();\r\r\n}\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n// Assert redirection back to the sign-in page\r\r\ncy.location(\"pathname\").should(\"equal\", \"/signin\");\n });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display login errors\", () => {\n// Visit the sign-in page without any credentials\n\n  cy.visit(\"/signin\");\n\n  // 1) Empty form submission → required‐field errors\n\n  cy.get(\"button[type='submit']\").click();\n  cy.contains(\"Username is required\").should(\"be.visible\");\n  cy.contains(\"Enter your password\").should(\"be.visible\");\n\n  // 2) Invalid username → non-existent user error\n\n  cy.get(\"input[name='username']\").clear().type(\"invalidUserName\");\n  cy.get(\"input[name='password']\").clear().type(\"s3cret\");\n  cy.get(\"button[type='submit']\").click();\n  cy.contains(/user not found|invalid username or password/i).should(\"be.visible\");\n\n  // 3) Invalid password for existing user → incorrect-password error\n\n  cy.get(\"input[name='username']\").clear().type(\"PainterJoy90\");\n  cy.get(\"input[name='password']\").clear().type(\"invalidPa$word\");\n  cy.get(\"button[type='submit']\").click();\n  cy.contains(/incorrect password|invalid username or password/i).should(\"be.visible\");\n });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should display signup errors\", () => {\n// Visit the signup page\r\r\n  cy.visit(\"/signup\");\r\r\n\r\r\n  // 1) Submit empty form and assert required-field errors\r\r\n  cy.get('button[type=\"submit\"]').click();\r\r\n  cy.get(\"#firstName-helper-text\").should(\"contain\", \"First Name is required\");\r\r\n  cy.get(\"#lastName-helper-text\").should(\"contain\", \"Last Name is required\");\r\r\n  cy.get(\"#username-helper-text\").should(\"contain\", \"Username is required\");\r\r\n  cy.get(\"#password-helper-text\").should(\"contain\", \"Enter your password\");\r\r\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Confirm your password\");\r\r\n\r\r\n  // 2) Fill in all fields but use mismatched passwords, then assert mismatch error\r\r\n  cy.get(\"#firstName\").type(\"Bob\");\r\r\n  cy.get(\"#lastName\").type(\"Ross\");\r\r\n  cy.get(\"#username\").type(\"PainterJoy90\");\r\r\n  cy.get(\"#password\").type(\"s3cret\");\r\r\n  cy.get(\"#confirmPassword\").type(\"INVALID\");\r\r\n  cy.get('button[type=\"submit\"]').click();\r\r\n  cy.get(\"#confirmPassword-helper-text\").should(\"contain\", \"Password does not match\");\n });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid user\", () => {\n// Visit the sign-in page\r\r\n  cy.visit(\"/signin\");\r\r\n  \r\r\n  // Enter an invalid username and a valid password\r\r\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\r\r\n  cy.getBySel(\"signin-password\").type(\"s3cret\");\r\r\n  \r\r\n  // Submit the form\r\r\n  cy.getBySel(\"signin-submit\").click();\r\r\n  \r\r\n  // Verify that an error is shown\r\r\n  cy.getBySel(\"signin-error\")\r\r\n    .should(\"be.visible\");\n });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ndescribe(\"User Sign-up and Login\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const { body } = req;\r\n            if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n                req.alias = \"gqlCreateBankAccountMutation\";\r\n            }\r\n        });\r\n    });\r\n    it(\"should error for an invalid password for existing user\", () => {\n// ...existing code...\r\r\n    it(\"should error for an invalid password for existing user\", () => {\r\r\n        <generated_code>\r\r\n        // Attempt to login with valid username but invalid password\r\r\n        cy.visit(\"/signin\");\r\r\n        cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\r\r\n        cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\r\r\n        cy.getBySel(\"signin-submit\").click();\r\r\n        // Verify that an error notification is shown\r\r\n        cy.getBySel(\"signin-error\").should(\"be.visible\");\r\r\n        // TODO: once the exact error message is known, assert its text:\r\r\n        // cy.getBySel(\"signin-error\").should(\"contain\", \"EXPECTED ERROR TEXT\");\r\r\n        </generated_code>\r\r\n    });\r\r\n// ...existing code...\n });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"creates a new bank account\", () => {\n// Step 1: Navigate to the Bank Accounts page\r\r\ncy.getBySel(\"sidenav-bankaccounts\").click();\r\r\n\r\r\n// Step 2: Wait for the list query to finish loading existing accounts\r\r\ncy.wait(\"@gqlListBankAccountQuery\");\r\r\n\r\r\n// Step 3: Open the \"New Bank Account\" form\r\r\ncy.getBySel(\"bankaccount-new\").click();\r\r\n\r\r\n// Step 4: Fill out the bank account form using provided test data\r\r\ncy.getBySel(\"bankaccount-bankName-input\")\r\r\n  .type(\"The Best Bank\");\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\")\r\r\n  .type(\"987654321\");\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\")\r\r\n  .type(\"123456789\");\r\r\n\r\r\n// Step 5: Submit the form\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n// Step 6: Wait for the GraphQL mutation to complete\r\r\ncy.wait(\"@gqlCreateBankAccountMutation\");\r\r\n\r\r\n// Step 7: Assert that the new account appears in the list\r\r\ncy.getBySel(\"bankaccount-list\")\r\r\n  .should(\"contain\", \"The Best Bank\")\r\r\n  .and(\"contain\", \"123456789\");\n });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"should display bank account form errors\", () => {\n// 1. Navigate to the Bank Accounts page\r\r\n  cy.getBySel(\"sidenav-bankaccounts\").click();\r\r\n  cy.wait(\"@gqlListBankAccountQuery\");\r\r\n\r\r\n  // 2. Open the \"Create Bank Account\" form\r\r\n  cy.getBySel(\"bankaccount-new\").click();\r\r\n\r\r\n  // 3. Submit the form without entering any data\r\r\n  cy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n  // 4. Verify that validation errors appear for each required field\r\r\n  cy.getBySel(\"bankaccount-bankName-input\")\r\r\n    .should(\"have.attr\", \"aria-invalid\", \"true\");\r\r\n  cy.contains(\"Bank name is required\").should(\"be.visible\");\r\r\n\r\r\n  cy.getBySel(\"bankaccount-routingNumber-input\")\r\r\n    .should(\"have.attr\", \"aria-invalid\", \"true\");\r\r\n  cy.contains(\"Routing number is required\").should(\"be.visible\");\r\r\n\r\r\n  cy.getBySel(\"bankaccount-accountNumber-input\")\r\r\n    .should(\"have.attr\", \"aria-invalid\", \"true\");\r\r\n  cy.contains(\"Account number is required\").should(\"be.visible\");\n });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\ntype BankAccountsTestCtx = {\r\n    user?: User;\r\n};\r\ndescribe(\"Bank Accounts\", function () {\r\n    const ctx: BankAccountsTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n            const operationAliases: Record<string, string> = {\r\n                ListBankAccount: \"gqlListBankAccountQuery\",\r\n                CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n                DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n            };\r\n            const { body } = req;\r\n            const operationName = body?.operationName;\r\n            if (body.hasOwnProperty(\"operationName\") &&\r\n                operationName &&\r\n                operationAliases[operationName]) {\r\n                req.alias = operationAliases[operationName];\r\n            }\r\n        });\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.user = user;\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n    it(\"renders an empty bank account list state with onboarding modal\", () => {\n// 1. Navigate to the Bank Accounts page\r\r\n  cy.getBySel(\"sidenav-bankaccounts\").click();\r\r\n  \r\r\n  // 2. Assert that no bank accounts are listed\r\r\n  cy.getBySel(\"bankaccounts-list\").should(\"not.exist\");\r\r\n  \r\r\n  // 3. Assert that the onboarding modal is shown\r\r\n  cy.getBySel(\"onboarding-modal\").should(\"be.visible\");\n });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", () => {\n// Open the new transaction form\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\n// Wait for the list of users to load\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Select the first contact in the list\r\r\ncy.getBySel(\"user-list-item\").first().click();\r\r\n\r\r\n// Enter the payment amount from userInfo\r\r\ncy.getBySel(\"amount-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.paymentTransactions[0].amount);\r\r\n\r\r\n// Enter the payment description from userInfo\r\r\ncy.getBySel(\"description-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.paymentTransactions[0].description);\r\r\n\r\r\n// Submit the payment transaction\r\r\ncy.getBySelLike(\"submit-payment\").click();\r\r\n\r\r\n// Wait for the POST /transactions request to complete\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Assert that a success notification is shown\r\r\ncy.getBySel(\"alert-bar-success\")\r\r\n  .should(\"be.visible\")\r\r\n  .and(\"contain\", \"Transaction Submitted!\");\n });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"navigates to the new transaction form, selects a user and submits a transaction request\", () => {\n// Open the new transaction form\r\r\n  cy.getBySel(\"new-transaction\").click();\r\r\n  cy.wait(\"@allUsers\");\r\r\n\r\r\n  // Search for the contact user\r\r\n  cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\n  cy.wait(\"@usersSearch\");\r\r\n\r\r\n  // Select the user from results\r\r\n  cy.getBySel(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n  // Switch to request mode\r\r\n  cy.getBySel(\"request-tab\").click();\r\r\n\r\r\n  // Fill out the request form\r\r\n  cy.getBySel(\"amount-input\").type(userInfo.requestTransactions[0].amount);\r\r\n  cy.getBySel(\"transaction-create-description-input\").type(userInfo.requestTransactions[0].description);\r\r\n\r\r\n  // Submit the request\r\r\n  cy.getBySel(\"submit-request\").click();\r\r\n  cy.wait(\"@createTransaction\");\r\r\n\r\r\n  // Verify the new request appears in personal feed\r\r\n  cy.getBySel(\"nav-personal-tab\").click();\r\r\n  cy.wait(\"@personalTransactions\");\r\r\n  cy.getBySel(\"transaction-item\")\r\r\n    .first()\r\r\n    .should(\"contain\", userInfo.requestTransactions[0].description);\n });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"displays new transaction errors\", () => {\n// it(\"displays new transaction errors\")\r\r\n//\r\r\n// Open the new transaction form\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Select a recipient to enable the form\r\r\ncy.getBySelLike(\"user-list-item\").first().click();\r\r\n\r\r\n// Attempt to submit a payment without entering any details\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n\r\r\n// Assert that the amount and description error messages are visible\r\r\ncy.getBySel(\"transaction-create-amount-error\")\r\r\n  .should(\"be.visible\")\r\r\n  .and(\"contain\", \"Please enter a valid amount\");\r\r\ncy.getBySel(\"transaction-create-description-error\")\r\r\n  .should(\"be.visible\")\r\r\n  .and(\"contain\", \"Please enter a note\");\r\r\n\r\r\n// If your app supports request mode, switch tabs and repeat assertions\r\r\n// cy.getBySel(\"transaction-create-request-tab\").click();\r\r\n// cy.getBySel(\"transaction-create-submit-request\").click();\r\r\n// cy.getBySel(\"transaction-create-amount-error\")\r\r\n//   .should(\"be.visible\")\r\r\n//   .and(\"contain\", \"Please enter a valid amount\");\r\r\n// cy.getBySel(\"transaction-create-description-error\")\r\r\n//   .should(\"be.visible\")\r\r\n//   .and(\"contain\", \"Please enter a note\");\n });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\n// it(\"submits a transaction payment and verifies the deposit for the receiver\", () => {\r\r\n<generated_code>\r\r\n// 1. grab the receiver's initial balance from the database\r\r\nlet initialBalance: number;\r\r\ncy.database(\"find\", \"users\", { id: ctx.contact!.id }).then((user) => {\r\r\n  initialBalance = user.balance;\r\r\n});\r\r\n\r\r\n// 2. open the \"New Transaction\" form\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// 3. search for and select the contact\r\r\ncy.getBySelLike(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\ncy.wait(\"@usersSearch\");\r\r\ncy.getBySelLike(\"user-list-item\").first().click();\r\r\n\r\r\n// 4. fill out the payment using the first paymentTransactions entry\r\r\ncy.getBySelLike(\"amount-input\").clear().type(userInfo.paymentTransactions[0].amount);\r\r\ncy.getBySelLike(\"description-input\").clear().type(userInfo.paymentTransactions[0].description);\r\r\n\r\r\n// 5. submit the payment\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// 6. logout the sender and log back in as the receiver\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\ncy.loginByXstate(ctx.contact!.username);\r\r\n\r\r\n// 7. verify the new transaction appears in the receiver’s feed\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.wait(\"@personalTransactions\");\r\r\ncy.getBySel(\"transaction-item\").first()\r\r\n  .should(\"contain\", userInfo.paymentTransactions[0].description)\r\r\n  .and(\"contain\", `$${userInfo.paymentTransactions[0].amount}`);\r\r\n\r\r\n// 8. verify the receiver’s balance in the DB increased by the payment amount\r\r\ncy.database(\"find\", \"users\", { id: ctx.contact!.id }).then((userAfter) => {\r\r\n  expect(userAfter.balance)\r\r\n    .to.equal(initialBalance + Number(userInfo.paymentTransactions[0].amount) * 100);\r\r\n});\r\r\n</generated_code>\n });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    it(\"submits a transaction request and accepts the request for the receiver\", () => {\n// submits a transaction request and accepts the request for the receiver\r\r\n\r\r\n// Pick the first request payload\r\r\nconst request = userInfo.requestTransactions[0];\r\r\n\r\r\n// Open the “New Transaction” form\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Search and select the contact user\r\r\ncy.getBySelLike(\"user-list-search-input\")\r\r\n  .type(ctx.contact!.firstName);\r\r\ncy.wait(\"@usersSearch\");\r\r\ncy.getBySelLike(\"user-list-item\").first().click();\r\r\n\r\r\n// Switch to “Request” mode (if tabbed)\r\r\ncy.getBySelLike(\"request-tab\").click();\r\r\n\r\r\n// Fill in the request details\r\r\ncy.getBySelLike(\"amount-input\")\r\r\n  .clear()\r\r\n  .type(request.amount.toString());\r\r\ncy.getBySelLike(\"description-input\")\r\r\n  .clear()\r\r\n  .type(request.description);\r\r\n\r\r\n// Submit the request\r\r\ncy.getBySelLike(\"submit-request\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Log out as the requester\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n// Log in as the receiver\r\r\ncy.loginByXstate(ctx.contact!.username);\r\r\n\r\r\n// View personal transactions\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.wait(\"@personalTransactions\");\r\r\n\r\r\n// Open the incoming request\r\r\ncy.getBySel(\"transaction-item\")\r\r\n  .contains(request.description)\r\r\n  .click();\r\r\n\r\r\n// Accept the request\r\r\ncy.getBySel(\"transaction-accept-request\").click();\r\r\ncy.wait(\"@updateTransaction\");\r\r\n\r\r\n// Verify that the transaction status was updated for the receiver\r\r\ncy.getBySel(\"transaction-item\")\r\r\n  .first()\r\r\n  .should(\"contain\", \"accepted\");\n });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ntype NewTransactionTestCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contact?: User;\r\n};\r\ndescribe(\"New Transaction\", function () {\r\n    const ctx: NewTransactionTestCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n        cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.allUsers = users;\r\n            ctx.user = users[0];\r\n            ctx.contact = users[1];\r\n            return cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    context(\"searches for a user by attribute\", function () {\r\n        const searchAttrs: (keyof User)[] = [\r\n            \"firstName\",\r\n            \"lastName\",\r\n            \"username\",\r\n            \"email\",\r\n            \"phoneNumber\",\r\n        ];\r\n        beforeEach(function () {\r\n            cy.getBySelLike(\"new-transaction\").click();\r\n            cy.wait(\"@allUsers\");\r\n        });\r\n        searchAttrs.forEach((attr: keyof User) => {\r\n            it(attr, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\n// User A likes a transaction of User B; User B gets notification that User A liked transaction\r\r\nit(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", () => {\r\r\n  <generated_code>\r\r\n  // 1. Log in as User B and create a transaction (need route & selectors):\r\r\n  //    cy.loginByXstate(ctx.userB.username);\r\r\n  //    cy.visit(\"/transaction/new\");\r\r\n  //    cy.getBySel(\"user-list-item\").contains(ctx.userC.firstName).click();\r\r\n  //    cy.getBySel(\"amount-input\").type(\"50\");\r\r\n  //    cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n  //    cy.wait(\"@createTransaction\");\r\r\n  //    cy.url().then(url => { transactionId = url.split(\"/\").pop()!; });\r\r\n\r\r\n  // 2. Log out and log in as User A then like that transaction (need like-button selector):\r\r\n  //    cy.getBySel(\"sidenav-signout\").click();\r\r\n  //    cy.loginByXstate(ctx.userA.username);\r\r\n  //    cy.visit(`/transaction/${transactionId}`);\r\r\n  //    cy.getBySel(\"like-button\").click();\r\r\n\r\r\n  // 3. Log out and log back in as User B to verify notification (need notification selector/text):\r\r\n  //    cy.getBySel(\"sidenav-signout\").click();\r\r\n  //    cy.loginByXstate(ctx.userB.username);\r\r\n  //    cy.visit(\"/\");\r\r\n  //    cy.wait(\"@getNotifications\");\r\r\n  //    cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n  //    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n  //    cy.getBySelLike(\"notification-list-item\")\r\r\n  //      .first()\r\r\n  //      .should(\"contain\", `${ctx.userA.firstName} liked your transaction`);\r\r\n  </generated_code>\r\r\n});\n });\r\n    });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", () => {\n// Create a transaction between User A and User B via DB\r\r\n  cy.database('create', 'transaction', {\r\r\n    senderId: ctx.userA.id,\r\r\n    receiverId: ctx.userB.id,\r\r\n    amount: 1000, // amount in cents\r\r\n    description: 'Auto-generated transaction for like test',\r\r\n    requestStatus: 'paid',\r\r\n    status: 'complete',\r\r\n  }).then((transaction: Transaction) => {\r\r\n    // Login as User C and like the transaction\r\r\n    cy.loginByXstate(ctx.userC.username);\r\r\n    cy.visit(`/transaction/${transaction.id}`);\r\r\n    cy.getBySelLike('like-button').click();\r\r\n\r\r\n    // Verify User A receives a like notification\r\r\n    cy.loginByXstate(ctx.userA.username);\r\r\n    cy.visit('/notifications');\r\r\n    cy.wait('@getNotifications');\r\r\n    cy.getBySelLike('notification-list-item')\r\r\n      .first()\r\r\n      .should('contain', `${ctx.userC.firstName} ${ctx.userC.lastName}`)\r\r\n      .and('contain', 'liked your transaction');\r\r\n\r\r\n    // Verify User B receives a like notification\r\r\n    cy.loginByXstate(ctx.userB.username);\r\r\n    cy.visit('/notifications');\r\r\n    cy.wait('@getNotifications');\r\r\n    cy.getBySelLike('notification-list-item')\r\r\n      .first()\r\r\n      .should('contain', `${ctx.userC.firstName} ${ctx.userC.lastName}`)\r\r\n      .and('contain', 'liked your transaction');\r\r\n  });\n });\r\n    });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", () => {\n// Create a transaction authored by User B\r\r\n  cy.database(\"create\", \"transaction\", {\r\r\n    senderId: ctx.userB.id,\r\r\n    receiverId: ctx.userA.id,\r\r\n    amount: 5000,\r\r\n    description: \"Transaction by User B\"\r\r\n  }).then((tx: Transaction) => {\r\r\n    // Log in as User A to comment\r\r\n    cy.loginByXstate(ctx.userA.username);\r\r\n    cy.visit(`/transaction/${tx.id}`);\r\r\n    \r\r\n    // Post a comment on the transaction\r\r\n    const commentText = \"Looks good!\";\r\r\n    cy.getBySel(\"comment-input\").type(`${commentText}{enter}`);\r\r\n    cy.wait(\"@postComment\");\r\r\n    \r\r\n    // Log out User A\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n    \r\r\n    // Log in as User B and verify notification\r\r\n    cy.loginByXstate(ctx.userB.username);\r\r\n    cy.visit(\"/notifications\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.contains(`${ctx.userA.firstName} commented on your transaction`).should(\"be.visible\");\r\r\n  });\n });\r\n    });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", () => {\n// Find an existing transaction between User A and User B\r\r\n  cy.database(\"find\", \"transactions\", {\r\r\n    senderId: ctx.userA.id,\r\r\n    receiverId: ctx.userB.id\r\r\n  }).then((transaction: Transaction) => {\r\r\n    const commentText = \"Great transaction!\";\r\r\n\r\r\n    // Login as User C and post a comment\r\r\n    cy.loginByXstate(ctx.userC.username);\r\r\n    cy.visit(`/transaction/${transaction.id}`);\r\r\n    cy.getBySel(\"comment-input\").type(`${commentText}{enter}`);\r\r\n    cy.wait(\"@postComment\");\r\r\n    // Logout User C\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n    // Switch to User A and verify notification\r\r\n    cy.switchUser(ctx.userA.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n      .first()\r\r\n      .should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} commented on your transaction`);\r\r\n    cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n    // Switch to User B and verify notification\r\r\n    cy.switchUser(ctx.userB.username);\r\r\n    cy.visit(\"/\");\r\r\n    cy.wait(\"@getNotifications\");\r\r\n    cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n    cy.getBySelLike(\"notification-list-item\")\r\r\n      .first()\r\r\n      .should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} commented on your transaction`);\r\r\n  });\n });\r\n    });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment to User B\", () => {\n// Log in as User A\r\r\n  cy.loginByXstate(ctx.userA.username);\r\r\n\r\r\n  // Create a new payment to User B\r\r\n  cy.getBySel(\"nav-top-new-transaction\").click();\r\r\n  // search and select User B\r\r\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.username);\r\r\n  cy.getBySelLike(\"user-list-item\").contains(ctx.userB.username).click();\r\r\n  // enter amount and description\r\r\n  cy.getBySel(\"amount-input\").type(\"50\");\r\r\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test payment from A to B\");\r\r\n  // submit payment\r\r\n  cy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n  cy.wait(\"@createTransaction\");\r\r\n\r\r\n  // Log out User A\r\r\n  cy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n  // Log in as User B and verify notification\r\r\n  cy.loginByXstate(ctx.userB.username);\r\r\n  // wait for notifications to load\r\r\n  cy.wait(\"@getNotifications\");\r\r\n  // badge shows 1 new notification\r\r\n  cy.getBySel(\"nav-top-notifications-count\").should(\"contain\", \"1\");\r\r\n  // open notifications list\r\r\n  cy.getBySel(\"nav-top-notifications-link\").click();\r\r\n  // first item mentions User A paid you\r\r\n  cy.getBySelLike(\"notification-list-item\")\r\r\n    .first()\r\r\n    .should(\"contain\", `${ctx.userA.firstName} ${ctx.userA.lastName}`)\r\r\n    .and(\"contain\", \"paid you\");\n });\r\n    });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    describe(\"notifications from user interactions\", function () {\r\n        it(\"User A sends a payment request to User C\", () => {\n// Log in as User A and create a new payment request to User C  \r\r\ncy.loginByXstate(ctx.userA.username);  \r\r\ncy.visit(\"/\");  \r\r\n// Open the \"New Transaction\" flow  \r\r\ncy.getBySel(\"new-transaction\").click();  \r\r\n// Search for User C and select them  \r\r\ncy.getBySelLike(\"user-list-search-input\").type(ctx.userC.firstName);  \r\r\ncy.getBySelLike(\"user-list-item\").first().click();  \r\r\n// Switch to the \"Request\" tab (if the UI has separate tabs)  \r\r\ncy.getBySel(\"request-tab\").click();  \r\r\n// Enter amount and description  \r\r\nconst requestAmount = \"75\";  \r\r\nconst requestNote = \"Request notification test\";  \r\r\ncy.getBySel(\"amount-input\").type(requestAmount);  \r\r\ncy.getBySel(\"transaction-create-description-input\").type(requestNote);  \r\r\n// Submit the payment request  \r\r\ncy.getBySel(\"submit-request\").click();  \r\r\n// Wait for the backend transaction call to complete  \r\r\ncy.wait(\"@createTransaction\");  \r\r\n\r\r\n// Now log in as User C to verify they received a notification  \r\r\ncy.loginByXstate(ctx.userC.username);  \r\r\n// Visit the notifications page  \r\r\ncy.visit(\"/notifications\");  \r\r\n// Assert that there's a notification from User A mentioning \"requested\"  \r\r\ncy.getBySel(\"notification-list-item\")  \r\r\n  .should(\"contain\", ctx.userA.firstName)  \r\r\n  .and(\"contain\", \"requested\");\n });\r\n    });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\ntype NotificationsCtx = {\r\n    userA: User;\r\n    userB: User;\r\n    userC: User;\r\n};\r\ndescribe(\"Notifications\", function () {\r\n    const ctx = {} as NotificationsCtx;\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n        cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n        cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.userA = users[0];\r\n            ctx.userB = users[1];\r\n            ctx.userC = users[2];\r\n        });\r\n    });\r\n    it(\"renders an empty notifications state\", () => {\n// It should render an empty notifications state\r\r\n// Log in as the seeded user (ctx.userA) and wait for the notifications API\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// Open the notifications panel\r\r\ncy.getBySel(\"notifications-link\").click();\r\r\n\r\r\n// Assert that the empty‐state UI is shown\r\r\ncy.getBySel(\"empty-list-header\").should(\"be.visible\");\r\r\ncy.getBySel(\"empty-list-sub-header\").should(\"be.visible\");\n });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"first five items belong to contacts in public feed\", () => {\n// Navigate to the public feed tab\r\r\n  cy.getBySel(feedViews.public.tab).click();\r\r\n  cy.wait(`@${feedViews.public.routeAlias}`);\r\r\n\r\r\n  // Load the current user's contacts from the test database\r\r\n  cy.database(\"find\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\r\n    const contactIds = contacts.map(c => c.contactUserId);\r\r\n\r\r\n    // Ensure at least five transactions are shown\r\r\n    cy.getBySel(\"transaction-item\")\r\r\n      .should(\"have.length.at.least\", 5)\r\r\n      .each(($el, index) => {\r\r\n        if (index < 5) {\r\r\n          // For each of the first five items, grab the sender/receiver test attribute\r\r\n          cy.wrap($el)\r\r\n            .find(\"[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']\")\r\r\n            .invoke(\"attr\", \"data-test\")\r\r\n            .then(attr => {\r\r\n              const parts = attr!.split(\"-\");\r\r\n              const userId = parts[2];\r\r\n              // Assert that this transaction involves one of the user's contacts\r\r\n              expect(contactIds).to.include(userId);\r\r\n            });\r\r\n        }\r\r\n      });\r\r\n  });\n });\r\n    });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"Feed Item Visibility\", () => {\r\n        it(\"friends feed only shows contact transactions\", () => {\n// friends feed only shows contact transactions\r\r\n// 1. Visit the app and switch to the “friends” (contacts) feed\r\r\ncy.visit('/');\r\r\ncy.getBySel(feedViews.contacts.tab).click();\r\r\ncy.wait('@contactsTransactions');\r\r\n\r\r\n// 2. Load the current user’s contacts from the test DB\r\r\ncy.database('filter', 'contacts', { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\r\n  const contactIds = contacts.map(c => c.contactUserId);\r\r\n\r\r\n  // 3. Verify each visible transaction involves one of those contacts\r\r\n  cy.getBySel('transaction-item')\r\r\n    .should('have.length.at.least', 1)\r\r\n    .each(($el) => {\r\r\n      cy.wrap($el)\r\r\n        .find('[data-test^=\"transaction-sender-\"], [data-test^=\"transaction-receiver-\"]')\r\r\n        .invoke('attr', 'data-test')\r\r\n        .then((attr) => {\r\r\n          const id = attr!.split('-').pop();\r\r\n          expect(contactIds).to.include(id);\r\r\n        });\r\r\n    });\r\r\n});\n });\r\n    });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by date range\", function () {\r\n        if (isMobile()) {}\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range date limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\nconst { _ } = Cypress;\r\ntype TransactionFeedsCtx = {\r\n    allUsers?: User[];\r\n    user?: User;\r\n    contactIds?: string[];\r\n};\r\ndescribe(\"Transaction Feed\", function () {\r\n    const ctx: TransactionFeedsCtx = {};\r\n    const feedViews = {\r\n        public: {\r\n            tab: \"public-tab\",\r\n            tabLabel: \"everyone\",\r\n            routeAlias: \"publicTransactions\",\r\n            service: \"publicTransactionService\",\r\n        },\r\n        contacts: {\r\n            tab: \"contacts-tab\",\r\n            tabLabel: \"friends\",\r\n            routeAlias: \"contactsTransactions\",\r\n            service: \"contactTransactionService\",\r\n        },\r\n        personal: {\r\n            tab: \"personal-tab\",\r\n            tabLabel: \"mine\",\r\n            routeAlias: \"personalTransactions\",\r\n            service: \"personalTransactionService\",\r\n        },\r\n    };\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n        cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n        cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n            ctx.user = users[0];\r\n            ctx.allUsers = users;\r\n            cy.loginByXstate(ctx.user.username);\r\n        });\r\n    });\r\n    describe(\"filters transaction feeds by amount range\", function () {\r\n        const dollarAmountRange = {\r\n            min: 200,\r\n            max: 800,\r\n        };\r\n        _.each(feedViews, (feed, feedName) => {\r\n            it(`does not show ${feedName} transactions for out of range amount limits`, () => { });\r\n        });\r\n    });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"transactions navigation tabs are hidden on a transaction view page\", () => {\n// transactions navigation tabs are hidden on a transaction view page\r\r\n// Navigate directly to the transaction detail page\r\r\ncy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\r\ncy.wait('@getTransaction');\r\r\n\r\r\n// Verify that the navigation tabs are not rendered on a detail view\r\r\ncy.getBySel('nav-personal-tab').should('not.exist');\r\r\ncy.getBySel('nav-public-tab').should('not.exist');\r\r\ncy.getBySel('nav-contacts-tab').should('not.exist');\n });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"likes a transaction\", () => {\n// 1. Open the first transaction detail\n\n  cy.getBySel(\"transaction-item\").first().click();\n  cy.wait(\"@getTransaction\");\n\n  // 2. Ensure like button and count are visible\n\n  cy.getBySel(\"transaction-like-button\").should(\"be.visible\");\n  cy.getBySel(\"transaction-likes-count\").should(\"be.visible\").invoke(\"text\").then(text => {\n    const initialLikes = parseInt(text, 10);\n\n    // 3. Click the like button\n\n    cy.getBySel(\"transaction-like-button\").click();\n\n    // 4. Wait for the update request\n\n    cy.wait(\"@updateTransaction\");\n\n    // 5. Verify the like count has increased by 1\n\n    cy.getBySel(\"transaction-likes-count\").should(\"contain\", initialLikes + 1);\n  });\n });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"comments on a transaction\", () => {\n// comments on a transaction\r\r\n// Note: Need the exact data-test selectors for comment input, submit button, and comment list.\r\r\n// Replace 'comment-input', 'comment-submit', and 'comment-item' with the real selectors.\r\r\n\r\r\nif (!ctx.transactionRequest) {\r\r\n  throw new Error('No pending transaction request found in context');\r\r\n}\r\r\n\r\r\n// Visit the detail page for the pending transaction\r\r\ncy.visit(`/transaction/${ctx.transactionRequest.id}`);\r\r\n\r\r\n// Optionally intercept the comment POST if not already aliased\r\r\ncy.intercept('POST', `/comments/${ctx.transactionRequest.id}`).as('postComment');\r\r\n\r\r\n// Type a new comment\r\r\nconst commentText = 'This is a test comment';\r\r\ncy.getBySel('comment-input').type(commentText);\r\r\n\r\r\n// Submit the comment\r\r\ncy.getBySel('comment-submit').click();\r\r\n\r\r\n// Wait for the comment request to complete\r\r\ncy.wait('@postComment');\r\r\n\r\r\n// Verify the new comment appears in the list\r\r\ncy.getBySel('comment-item').should('contain', commentText);\n });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"accepts a transaction request\", () => {\n// Click on the pending transaction in the list by matching its description\r\r\n  cy.getBySel(\"transaction-item\")\r\r\n    .contains(ctx.transactionRequest!.description)\r\r\n    .click();\r\r\n  // Wait for the transaction details to load\r\r\n  cy.wait(\"@getTransaction\");\r\r\n  // Click the accept-request button\r\r\n  cy.getBySel(\"transaction-accept-request\").click();\r\r\n  // Wait for the PATCH call to complete\r\r\n  cy.wait(\"@updateTransaction\");\r\r\n  // Verify the transaction status shows \"complete\"\r\r\n  cy.getBySel(\"transaction-status\").should(\"contain\", \"complete\");\r\r\n  // Confirm the request is no longer marked as pending in the feed\r\r\n  cy.getBySel(\"transaction-item\")\r\r\n    .should(\"not.contain\", ctx.transactionRequest!.description);\n });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"rejects a transaction request\", () => {\n// Locate the pending request in the personal feed and open its detail view\r\r\n  cy.getBySel(\"transaction-item\")\r\r\n    .contains(ctx.transactionRequest!.description)\r\r\n    .click();\r\r\n\r\r\n  // Wait for the transaction detail to load\r\r\n  cy.wait(\"@getTransaction\");\r\r\n\r\r\n  // Click the \"Reject\" button for the request\r\r\n  cy.getBySel(\"transaction-reject-request\").click();\r\r\n\r\r\n  // Wait for the PATCH request to complete\r\r\n  cy.wait(\"@updateTransaction\");\r\r\n\r\r\n  // Verify that the transaction status is now \"Rejected\"\r\r\n  cy.getBySel(\"transaction-payment-status\")\r\r\n    .should(\"be.visible\")\r\r\n    .and(\"contain\", \"Rejected\");\n });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\ntype NewTransactionCtx = {\r\n    transactionRequest?: Transaction;\r\n    authenticatedUser?: User;\r\n};\r\ndescribe(\"Transaction View\", function () {\r\n    const ctx: NewTransactionCtx = {};\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n        cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n        cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n        cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n        cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n        cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            ctx.authenticatedUser = user;\r\n            cy.loginByXstate(ctx.authenticatedUser.username);\r\n            cy.database(\"find\", \"transactions\", {\r\n                receiverId: ctx.authenticatedUser.id,\r\n                status: \"pending\",\r\n                requestStatus: \"pending\",\r\n                requestResolvedAt: \"\",\r\n            }).then((transaction: Transaction) => {\r\n                ctx.transactionRequest = transaction;\r\n            });\r\n        });\r\n        cy.getBySel(\"nav-personal-tab\").click();\r\n        cy.wait(\"@personalTransactions\");\r\n    });\r\n    it(\"does not display accept/reject buttons on completed request\", () => {\n// Click on the corresponding transaction in the list\ncy.getBySel(\"transaction-item\")\n.contains(ctx.transactionRequest?.description || \"\")\n.click();\n\n// Wait for the transaction detail to load\ncy.wait(\"@getTransaction\");\n\n// Assert that the accept and reject buttons are not visible for a completed request\ncy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\ncy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\n });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"renders the user settings form\", () => {\n// Assert that the settings form is present  \r\r\ncy.getBySel(\"user-settings-form\").should(\"be.visible\");\r\r\n\r\r\n// Assert that all inputs are rendered  \r\r\ncy.getBySel(\"user-settings-firstName-input\").should(\"be.visible\");  \r\r\ncy.getBySel(\"user-settings-lastName-input\").should(\"be.visible\");  \r\r\ncy.getBySel(\"user-settings-email-input\").should(\"be.visible\");  \r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"should display user setting form errors\", () => {\n// Clear all required fields  \r\r\ncy.getBySel(\"user-settings-firstName-input\").clear();  \r\r\ncy.getBySel(\"user-settings-lastName-input\").clear();  \r\r\ncy.getBySel(\"user-settings-email-input\").clear();  \r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").clear();  \r\r\n  \r\r\n// Submit the form to trigger validation  \r\r\ncy.getBySel(\"user-settings-submit\").click();  \r\r\n  \r\r\n// Assert that each validation message is shown  \r\r\ncy.contains(\"Enter a first name\").should(\"be.visible\");  \r\r\ncy.contains(\"Enter a last name\").should(\"be.visible\");  \r\r\ncy.contains(\"Enter an email address\").should(\"be.visible\");  \r\r\ncy.contains(\"Enter a phone number\").should(\"be.visible\");\n });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\ndescribe(\"User Settings\", function () {\r\n    beforeEach(function () {\r\n        cy.task(\"db:seed\");\r\n        cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n        cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n        cy.database(\"find\", \"users\").then((user: User) => {\r\n            cy.loginByXstate(user.username);\r\n        });\r\n        if (isMobile()) {\r\n            cy.getBySel(\"sidenav-toggle\").click();\r\n        }\r\n        cy.getBySel(\"sidenav-user-settings\").click();\r\n    });\r\n    it(\"updates first name, last name, email and phone number\", () => {\n// Define the updated user info\r\r\nconst userInfo = {\r\r\n  firstName: \"New First Name\",\r\r\n  lastName: \"New Last Name\",\r\r\n  email: \"email@email.com\",\r\r\n  phoneNumber: \"6155551212\"\r\r\n};\r\r\n\r\r\n// Fill in each field with the new values\r\r\ncy.getBySel(\"user-settings-firstName-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.firstName);\r\r\ncy.getBySel(\"user-settings-lastName-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.lastName);\r\r\ncy.getBySel(\"user-settings-email-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.email);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.phoneNumber);\r\r\n\r\r\n// Submit the form\r\r\ncy.getBySel(\"user-settings-submit\").click();\r\r\n\r\r\n// Wait for the PATCH request to complete\r\r\ncy.wait(\"@updateUser\");\r\r\n\r\r\n// Assert that a success notification appears\r\r\ncy.getBySel(\"alert-bar-success\")\r\r\n  .should(\"be.visible\")\r\r\n  .and(\"contain\", \"User Settings Updated\");\r\r\n\r\r\n// Reload to verify persistence\r\r\ncy.reload();\r\r\n\r\r\n// Verify each field retains the updated value\r\r\ncy.getBySel(\"user-settings-firstName-input\")\r\r\n  .should(\"have.value\", userInfo.firstName);\r\r\ncy.getBySel(\"user-settings-lastName-input\")\r\r\n  .should(\"have.value\", userInfo.lastName);\r\r\ncy.getBySel(\"user-settings-email-input\")\r\r\n  .should(\"have.value\", userInfo.email);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\")\r\r\n  .should(\"have.value\", userInfo.phoneNumber);\n });\r\n});\r\n"
  },
  "original": {
    "auth1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should redirect unauthenticated user to signin page\", function () {\r\n    cy.visit(\"/personal\");\r\n    cy.location(\"pathname\").should(\"equal\", \"/signin\");\r\n    cy.visualSnapshot(\"Redirect to SignIn\");\r\n  });\r\n});\r\n",
    "auth2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should redirect to the home page after login\", function () {\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.login(user.username, \"s3cret\", { rememberUser: true });\r\n    });\r\n    cy.location(\"pathname\").should(\"equal\", \"/\");\r\n  });\r\n});\r\n",
    "auth3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should remember a user for 30 days after login\", function () {\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.login(user.username, \"s3cret\", { rememberUser: true });\r\n    });\r\n\r\n    // Verify Session Cookie\r\n    cy.getCookie(\"connect.sid\").should(\"have.property\", \"expiry\");\r\n\r\n    // Logout User\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n    cy.getBySel(\"sidenav-signout\").click();\r\n    cy.location(\"pathname\").should(\"eq\", \"/signin\");\r\n    cy.visualSnapshot(\"Redirect to SignIn\");\r\n  });\r\n});\r\n",
    "auth4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should allow a visitor to sign-up, login, and logout\", function () {\r\n    const userInfo = {\r\n      firstName: \"Bob\",\r\n      lastName: \"Ross\",\r\n      username: \"PainterJoy90\",\r\n      password: \"s3cret\",\r\n    };\r\n\r\n    // Sign-up User\r\n    cy.visit(\"/\");\r\n\r\n    cy.getBySel(\"signup\").click();\r\n    cy.getBySel(\"signup-title\").should(\"be.visible\").and(\"contain\", \"Sign Up\");\r\n    cy.visualSnapshot(\"Sign Up Title\");\r\n\r\n    cy.getBySel(\"signup-first-name\").type(userInfo.firstName);\r\n    cy.getBySel(\"signup-last-name\").type(userInfo.lastName);\r\n    cy.getBySel(\"signup-username\").type(userInfo.username);\r\n    cy.getBySel(\"signup-password\").type(userInfo.password);\r\n    cy.getBySel(\"signup-confirmPassword\").type(userInfo.password);\r\n    cy.visualSnapshot(\"About to Sign Up\");\r\n    cy.getBySel(\"signup-submit\").click();\r\n    cy.wait(\"@signup\");\r\n\r\n    // Login User\r\n    cy.login(userInfo.username, userInfo.password);\r\n\r\n    // Onboarding\r\n    cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\r\n    cy.getBySel(\"list-skeleton\").should(\"not.exist\");\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\r\n    cy.visualSnapshot(\"User Onboarding Dialog\");\r\n    cy.getBySel(\"user-onboarding-next\").click();\r\n\r\n    cy.getBySel(\"user-onboarding-dialog-title\").should(\"contain\", \"Create Bank Account\");\r\n\r\n    cy.getBySelLike(\"bankName-input\").type(\"The Best Bank\");\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"123456789\");\r\n    cy.getBySelLike(\"routingNumber-input\").type(\"987654321\");\r\n    cy.visualSnapshot(\"About to complete User Onboarding\");\r\n    cy.getBySelLike(\"submit\").click();\r\n\r\n    cy.wait(\"@gqlCreateBankAccountMutation\");\r\n\r\n    cy.getBySel(\"user-onboarding-dialog-title\").should(\"contain\", \"Finished\");\r\n    cy.getBySel(\"user-onboarding-dialog-content\").should(\"contain\", \"You're all set!\");\r\n    cy.visualSnapshot(\"Finished User Onboarding\");\r\n    cy.getBySel(\"user-onboarding-next\").click();\r\n\r\n    cy.getBySel(\"transaction-list\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"Transaction List is visible after User Onboarding\");\r\n\r\n    // Logout User\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n    cy.getBySel(\"sidenav-signout\").click();\r\n    cy.location(\"pathname\").should(\"eq\", \"/signin\");\r\n    cy.visualSnapshot(\"Redirect to SignIn\");\r\n  });\r\n});\r\n",
    "auth5.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should display login errors\", function () {\r\n    cy.visit(\"/\");\r\n\r\n    cy.getBySel(\"signin-username\").type(\"User\").find(\"input\").clear().blur();\r\n    cy.get(\"#username-helper-text\").should(\"be.visible\").and(\"contain\", \"Username is required\");\r\n    cy.visualSnapshot(\"Display Username is Required Error\");\r\n\r\n    cy.getBySel(\"signin-password\").type(\"abc\").find(\"input\").blur();\r\n    cy.get(\"#password-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Password must contain at least 4 characters\");\r\n    cy.visualSnapshot(\"Display Password Error\");\r\n\r\n    cy.getBySel(\"signin-submit\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"Sign In Submit Disabled\");\r\n  });\r\n});\r\n",
    "auth6.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should display signup errors\", function () {\r\n    cy.intercept(\"GET\", \"/signup\");\r\n\r\n    cy.visit(\"/signup\");\r\n\r\n    cy.getBySel(\"signup-first-name\").type(\"First\").find(\"input\").clear().blur();\r\n    cy.get(\"#firstName-helper-text\").should(\"be.visible\").and(\"contain\", \"First Name is required\");\r\n\r\n    cy.getBySel(\"signup-last-name\").type(\"Last\").find(\"input\").clear().blur();\r\n    cy.get(\"#lastName-helper-text\").should(\"be.visible\").and(\"contain\", \"Last Name is required\");\r\n\r\n    cy.getBySel(\"signup-username\").type(\"User\").find(\"input\").clear().blur();\r\n    cy.get(\"#username-helper-text\").should(\"be.visible\").and(\"contain\", \"Username is required\");\r\n\r\n    cy.getBySel(\"signup-password\").type(\"password\").find(\"input\").clear().blur();\r\n    cy.get(\"#password-helper-text\").should(\"be.visible\").and(\"contain\", \"Enter your password\");\r\n\r\n    cy.getBySel(\"signup-confirmPassword\").type(\"DIFFERENT PASSWORD\").find(\"input\").blur();\r\n    cy.get(\"#confirmPassword-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Password does not match\");\r\n    cy.visualSnapshot(\"Display Sign Up Required Errors\");\r\n\r\n    cy.getBySel(\"signup-submit\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"Sign Up Submit Disabled\");\r\n  });\r\n});\r\n",
    "auth7.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should error for an invalid user\", function () {\r\n    cy.login(\"invalidUserName\", \"invalidPa$$word\");\r\n\r\n    cy.getBySel(\"signin-error\")\r\n      .should(\"be.visible\")\r\n      .and(\"have.text\", \"Username or password is invalid\");\r\n    cy.visualSnapshot(\"Sign In, Invalid Username and Password, Username or Password is Invalid\");\r\n  });\r\n});\r\n",
    "auth8.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ndescribe(\"User Sign-up and Login\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"POST\", \"/users\").as(\"signup\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"CreateBankAccount\") {\r\n        req.alias = \"gqlCreateBankAccountMutation\";\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"should error for an invalid password for existing user\", function () {\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.login(user.username, \"INVALID\");\r\n    });\r\n\r\n    cy.getBySel(\"signin-error\")\r\n      .should(\"be.visible\")\r\n      .and(\"have.text\", \"Username or password is invalid\");\r\n    cy.visualSnapshot(\"Sign In, Invalid Username, Username or Password is Invalid\");\r\n  });\r\n});\r\n",
    "bankaccounts1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ntype BankAccountsTestCtx = {\r\n  user?: User;\r\n};\r\n\r\ndescribe(\"Bank Accounts\", function () {\r\n  const ctx: BankAccountsTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const operationAliases: Record<string, string> = {\r\n        ListBankAccount: \"gqlListBankAccountQuery\",\r\n        CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n        DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n      };\r\n\r\n      const { body } = req;\r\n\r\n      const operationName = body?.operationName;\r\n\r\n      if (\r\n        body.hasOwnProperty(\"operationName\") &&\r\n        operationName &&\r\n        operationAliases[operationName]\r\n      ) {\r\n        req.alias = operationAliases[operationName];\r\n      }\r\n    });\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.user = user;\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"creates a new bank account\", function () {\r\n    cy.wait(\"@getNotifications\");\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySel(\"sidenav-bankaccounts\").click();\r\n\r\n    cy.getBySel(\"bankaccount-new\").click();\r\n    cy.location(\"pathname\").should(\"eq\", \"/bankaccounts/new\");\r\n    cy.visualSnapshot(\"Display New Bank Account Form\");\r\n\r\n    cy.getBySelLike(\"bankName-input\").type(\"The Best Bank\");\r\n    cy.getBySelLike(\"routingNumber-input\").type(\"987654321\");\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"123456789\");\r\n    cy.visualSnapshot(\"Fill out New Bank Account Form\");\r\n    cy.getBySelLike(\"submit\").click();\r\n\r\n    cy.wait(\"@gqlCreateBankAccountMutation\");\r\n\r\n    cy.getBySelLike(\"bankaccount-list-item\")\r\n      .should(\"have.length\", 2)\r\n      .eq(1)\r\n      .should(\"contain\", \"The Best Bank\");\r\n    cy.visualSnapshot(\"Bank Account Created\");\r\n  });\r\n});\r\n",
    "bankaccounts2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ntype BankAccountsTestCtx = {\r\n  user?: User;\r\n};\r\n\r\ndescribe(\"Bank Accounts\", function () {\r\n  const ctx: BankAccountsTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const operationAliases: Record<string, string> = {\r\n        ListBankAccount: \"gqlListBankAccountQuery\",\r\n        CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n        DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n      };\r\n\r\n      const { body } = req;\r\n\r\n      const operationName = body?.operationName;\r\n\r\n      if (\r\n        body.hasOwnProperty(\"operationName\") &&\r\n        operationName &&\r\n        operationAliases[operationName]\r\n      ) {\r\n        req.alias = operationAliases[operationName];\r\n      }\r\n    });\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.user = user;\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"should display bank account form errors\", function () {\r\n    cy.visit(\"/bankaccounts\");\r\n    cy.getBySel(\"bankaccount-new\").click();\r\n\r\n    cy.getBySelLike(\"bankName-input\").type(\"The\").find(\"input\").clear().blur();\r\n    cy.get(\"#bankaccount-bankName-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Enter a bank name\");\r\n\r\n    cy.getBySelLike(\"bankName-input\").type(\"The\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-bankName-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Must contain at least 5 characters\");\r\n\r\n    /** Routing number input validations **/\r\n    // Required field\r\n    cy.getBySelLike(\"routingNumber-input\").find(\"input\").focus().blur();\r\n    cy.get(`#bankaccount-routingNumber-input-helper-text`)\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Enter a valid bank routing number\");\r\n\r\n    // Min 9 digit\r\n    cy.getBySelLike(\"routingNumber-input\").type(\"12345678\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-routingNumber-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Must contain a valid routing number\");\r\n    cy.getBySelLike(\"routingNumber-input\").find(\"input\").clear();\r\n\r\n    cy.getBySelLike(\"routingNumber-input\").type(\"123456789\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-routingNumber-input-helper-text\").should(\"not.exist\");\r\n\r\n    /** Account number input validations **/\r\n    // Required field\r\n    cy.getBySelLike(\"accountNumber-input\").find(\"input\").focus().blur();\r\n    cy.get(`#bankaccount-accountNumber-input-helper-text`)\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Enter a valid bank account number\");\r\n\r\n    // Min 9 digit\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"12345678\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-accountNumber-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Must contain at least 9 digits\");\r\n    cy.getBySelLike(\"accountNumber-input\").find(\"input\").clear();\r\n\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"123456789\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-accountNumber-input-helper-text\").should(\"not.exist\");\r\n    cy.getBySelLike(\"accountNumber-input\").find(\"input\").clear();\r\n\r\n    // Max 12 gdigit\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"123456789111\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-accountNumber-input-helper-text\").should(\"not.exist\");\r\n    cy.getBySelLike(\"accountNumber-input\").find(\"input\").clear();\r\n\r\n    cy.getBySelLike(\"accountNumber-input\").type(\"1234567891111\").find(\"input\").blur();\r\n    cy.get(\"#bankaccount-accountNumber-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Must contain no more than 12 digits\");\r\n\r\n    cy.getBySel(\"bankaccount-submit\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"Bank Account Form with Errors and Submit button disabled\");\r\n  });\r\n});\r\n",
    "bankaccounts3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ntype BankAccountsTestCtx = {\r\n  user?: User;\r\n};\r\n\r\ndescribe(\"Bank Accounts\", function () {\r\n  const ctx: BankAccountsTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const operationAliases: Record<string, string> = {\r\n        ListBankAccount: \"gqlListBankAccountQuery\",\r\n        CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n        DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n      };\r\n\r\n      const { body } = req;\r\n\r\n      const operationName = body?.operationName;\r\n\r\n      if (\r\n        body.hasOwnProperty(\"operationName\") &&\r\n        operationName &&\r\n        operationAliases[operationName]\r\n      ) {\r\n        req.alias = operationAliases[operationName];\r\n      }\r\n    });\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.user = user;\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"soft deletes a bank account\", function () {\r\n    cy.visit(\"/bankaccounts\");\r\n    cy.getBySelLike(\"delete\").first().click();\r\n\r\n    cy.wait(\"@gqlDeleteBankAccountMutation\");\r\n    cy.getBySelLike(\"list-item\").children().contains(\"Deleted\");\r\n    cy.visualSnapshot(\"Soft Delete Bank Account\");\r\n  });\r\n});\r\n",
    "bankaccounts4.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst apiGraphQL = `${Cypress.env(\"apiUrl\")}/graphql`;\r\n\r\ntype BankAccountsTestCtx = {\r\n  user?: User;\r\n};\r\n\r\ndescribe(\"Bank Accounts\", function () {\r\n  const ctx: BankAccountsTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const operationAliases: Record<string, string> = {\r\n        ListBankAccount: \"gqlListBankAccountQuery\",\r\n        CreateBankAccount: \"gqlCreateBankAccountMutation\",\r\n        DeleteBankAccount: \"gqlDeleteBankAccountMutation\",\r\n      };\r\n\r\n      const { body } = req;\r\n\r\n      const operationName = body?.operationName;\r\n\r\n      if (\r\n        body.hasOwnProperty(\"operationName\") &&\r\n        operationName &&\r\n        operationAliases[operationName]\r\n      ) {\r\n        req.alias = operationAliases[operationName];\r\n      }\r\n    });\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.user = user;\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  // TODO: [enhancement] the onboarding modal assertion can be removed after adding \"onboarded\" flag to user profile\r\n  it(\"renders an empty bank account list state with onboarding modal\", function () {\r\n    cy.wait(\"@getNotifications\");\r\n    cy.intercept(\"POST\", apiGraphQL, (req) => {\r\n      const { body } = req;\r\n      if (body.hasOwnProperty(\"operationName\") && body.operationName === \"ListBankAccount\") {\r\n        req.alias = \"gqlListBankAccountQuery\";\r\n        req.continue((res) => {\r\n          res.body.data.listBankAccount = [];\r\n        });\r\n      }\r\n    });\r\n\r\n    cy.visit(\"/bankaccounts\");\r\n    cy.wait(\"@getNotifications\");\r\n    cy.wait(\"@gqlListBankAccountQuery\");\r\n\r\n    cy.getBySel(\"bankaccount-list\").should(\"not.exist\");\r\n    cy.getBySel(\"empty-list-header\").should(\"contain\", \"No Bank Accounts\");\r\n    cy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\r\n    cy.getBySel(\"nav-top-notifications-count\").should(\"exist\");\r\n    cy.visualSnapshot(\"User Onboarding Dialog is Visible\");\r\n  });\r\n});\r\n",
    "new-transaction1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"navigates to the new transaction form, selects a user and submits a transaction payment\", function () {\r\n    const payment = {\r\n      amount: \"35\",\r\n      description: \"Sushi dinner 🍣\",\r\n    };\r\n\r\n    cy.getBySelLike(\"new-transaction\").click();\r\n    cy.wait(\"@allUsers\");\r\n\r\n    cy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName, { force: true });\r\n    cy.wait(\"@usersSearch\");\r\n    cy.visualSnapshot(\"User Search First Name Input\");\r\n\r\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click({ force: true });\r\n    cy.visualSnapshot(\"User Search First Name List Item\");\r\n\r\n    cy.getBySelLike(\"amount-input\").type(payment.amount);\r\n    cy.getBySelLike(\"description-input\").type(payment.description);\r\n    cy.visualSnapshot(\"Amount and Description Input\");\r\n    cy.getBySelLike(\"submit-payment\").click();\r\n    cy.wait([\"@createTransaction\", \"@getUserProfile\"]);\r\n    cy.getBySel(\"alert-bar-success\")\r\n      .should(\"be.visible\")\r\n      .and(\"have.text\", \"Transaction Submitted!\");\r\n\r\n    const updatedAccountBalance = Dinero({\r\n      amount: ctx.user!.balance - parseInt(payment.amount) * 100,\r\n    }).toFormat();\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySelLike(\"user-balance\").should(\"contain\", updatedAccountBalance);\r\n    cy.visualSnapshot(\"Updated User Balance\");\r\n\r\n    if (isMobile()) {\r\n      cy.get(\".MuiBackdrop-root\").click({ force: true });\r\n    }\r\n\r\n    cy.getBySelLike(\"create-another-transaction\").click();\r\n    cy.getBySel(\"app-name-logo\").find(\"a\").click();\r\n    cy.getBySelLike(\"personal-tab\").click().should(\"have.class\", \"Mui-selected\");\r\n    cy.wait(\"@personalTransactions\");\r\n\r\n    cy.getBySel(\"transaction-list\").first().should(\"contain\", payment.description);\r\n\r\n    cy.database(\"find\", \"users\", { id: ctx.contact!.id })\r\n      .its(\"balance\")\r\n      .should(\"equal\", ctx.contact!.balance + parseInt(payment.amount) * 100);\r\n    cy.getBySel(\"alert-bar-success\").should(\"not.exist\");\r\n    cy.visualSnapshot(\"Personal List Validate Transaction in List\");\r\n  });\r\n});\r\n",
    "new-transaction2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"navigates to the new transaction form, selects a user and submits a transaction request\", function () {\r\n    const request = {\r\n      amount: \"95\",\r\n      description: \"Fancy Hotel 🏨\",\r\n    };\r\n\r\n    cy.getBySelLike(\"new-transaction\").click();\r\n    cy.wait(\"@allUsers\");\r\n\r\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click({ force: true });\r\n    cy.visualSnapshot(\"User Search First Name Input\");\r\n\r\n    cy.getBySelLike(\"amount-input\").type(request.amount);\r\n    cy.getBySelLike(\"description-input\").type(request.description);\r\n    cy.visualSnapshot(\"Amount and Description Input\");\r\n    cy.getBySelLike(\"submit-request\").click();\r\n    cy.wait(\"@createTransaction\");\r\n    cy.getBySel(\"alert-bar-success\")\r\n      .should(\"be.visible\")\r\n      .and(\"have.text\", \"Transaction Submitted!\");\r\n    cy.visualSnapshot(\"Transaction Request Submitted Notification\");\r\n\r\n    cy.getBySelLike(\"return-to-transactions\").click();\r\n    cy.getBySelLike(\"personal-tab\").click().should(\"have.class\", \"Mui-selected\");\r\n\r\n    cy.getBySelLike(\"transaction-item\").should(\"contain\", request.description);\r\n    cy.visualSnapshot(\"Transaction Item Description in List\");\r\n  });\r\n});\r\n",
    "new-transaction3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"displays new transaction errors\", function () {\r\n    cy.getBySelLike(\"new-transaction\").click();\r\n    cy.wait(\"@allUsers\");\r\n\r\n    cy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click({ force: true });\r\n\r\n    cy.getBySelLike(\"amount-input\").type(\"43\").find(\"input\").clear().blur();\r\n    cy.get(\"#transaction-create-amount-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Please enter a valid amount\");\r\n\r\n    cy.getBySelLike(\"description-input\").type(\"Fun\").find(\"input\").clear().blur();\r\n    cy.get(\"#transaction-create-description-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Please enter a note\");\r\n\r\n    cy.getBySelLike(\"submit-request\").should(\"be.disabled\");\r\n    cy.getBySelLike(\"submit-payment\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"New Transaction Errors with Submit Payment/Request Buttons Disabled\");\r\n  });\r\n});\r\n",
    "new-transaction4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"submits a transaction payment and verifies the deposit for the receiver\", function () {\r\n    cy.getBySel(\"nav-top-new-transaction\").click();\r\n\r\n    const transactionPayload = {\r\n      transactionType: \"payment\",\r\n      amount: 25,\r\n      description: \"Indian Food\",\r\n      sender: ctx.user,\r\n      receiver: ctx.contact,\r\n    };\r\n\r\n    // first let's grab the current balance from the UI\r\n    let startBalance: string;\r\n    if (!isMobile()) {\r\n      // only check the balance display in desktop resolution\r\n      // as it is NOT shown on mobile screen\r\n      cy.get(\"[data-test=sidenav-user-balance]\")\r\n        .invoke(\"text\")\r\n        .then((x) => {\r\n          startBalance = x; // something like \"$1,484.81\"\r\n          expect(startBalance).to.match(/\\$\\d/);\r\n        });\r\n    }\r\n\r\n    cy.createTransaction(transactionPayload);\r\n    cy.wait(\"@createTransaction\");\r\n    cy.getBySel(\"new-transaction-create-another-transaction\").should(\"be.visible\");\r\n\r\n    if (!isMobile()) {\r\n      // make sure the new balance is displayed\r\n      cy.get(\"[data-test=sidenav-user-balance]\").should(($el) => {\r\n        // here we only make sure the text has changed\r\n        // we could also convert the balance to actual number\r\n        // and confirm the new balance is the start balance - amount\r\n        expect($el.text()).to.not.equal(startBalance);\r\n      });\r\n    }\r\n    cy.visualSnapshot(\"Transaction Payment Submitted Notification\");\r\n\r\n    cy.switchUserByXstate(ctx.contact!.username);\r\n\r\n    const updatedAccountBalance = Dinero({\r\n      amount: ctx.contact!.balance + transactionPayload.amount * 100,\r\n    }).toFormat();\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySelLike(\"user-balance\").should(\"contain\", updatedAccountBalance);\r\n    cy.visualSnapshot(\"Verify Updated Sender Account Balance\");\r\n  });\r\n});\r\n",
    "new-transaction5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  it(\"submits a transaction request and accepts the request for the receiver\", function () {\r\n    const transactionPayload = {\r\n      transactionType: \"request\",\r\n      amount: 100,\r\n      description: \"Fancy Hotel\",\r\n      sender: ctx.user,\r\n      receiver: ctx.contact,\r\n    };\r\n\r\n    cy.getBySelLike(\"new-transaction\").click();\r\n    cy.createTransaction(transactionPayload);\r\n    cy.wait(\"@createTransaction\");\r\n    cy.getBySel(\"new-transaction-create-another-transaction\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"receiver - Transaction Payment Submitted Notification\");\r\n\r\n    cy.switchUserByXstate(ctx.contact!.username);\r\n\r\n    cy.getBySelLike(\"personal-tab\").click();\r\n\r\n    cy.wait(\"@personalTransactions\");\r\n\r\n    cy.getBySelLike(\"transaction-item\")\r\n      .first()\r\n      .should(\"contain\", transactionPayload.description)\r\n      .click({ force: true });\r\n    cy.getBySel(\"transaction-detail-header\").should(\"exist\");\r\n    cy.visualSnapshot(\"Navigate to Transaction Item\");\r\n\r\n    cy.getBySelLike(\"accept-request\").click();\r\n    cy.wait(\"@updateTransaction\").its(\"response.statusCode\").should(\"eq\", 204);\r\n    cy.getBySelLike(\"transaction-detail-header\").should(\"be.visible\");\r\n    cy.getBySelLike(\"transaction-amount\").should(\"be.visible\");\r\n    cy.getBySelLike(\"sender-avatar\").should(\"be.visible\");\r\n    cy.getBySelLike(\"receiver-avatar\").should(\"be.visible\");\r\n    cy.getBySelLike(\"transaction-description\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"Accept Transaction Request\");\r\n\r\n    cy.switchUserByXstate(ctx.user!.username);\r\n\r\n    const updatedAccountBalance = Dinero({\r\n      amount: ctx.user!.balance + transactionPayload.amount * 100,\r\n    }).toFormat();\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySelLike(\"user-balance\").should(\"contain\", updatedAccountBalance);\r\n    cy.visualSnapshot(\"Verify Updated Sender Account Balance\");\r\n  });\r\n});\r\n",
    "new-transaction6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ntype NewTransactionTestCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contact?: User;\r\n};\r\n\r\ndescribe(\"New Transaction\", function () {\r\n  const ctx: NewTransactionTestCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/users*\").as(\"allUsers\");\r\n\r\n    cy.intercept(\"GET\", \"/users/search*\").as(\"usersSearch\");\r\n\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions/public\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions\").as(\"personalTransactions\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.allUsers = users;\r\n      ctx.user = users[0];\r\n      ctx.contact = users[1];\r\n\r\n      return cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  context(\"searches for a user by attribute\", function () {\r\n    const searchAttrs: (keyof User)[] = [\r\n      \"firstName\",\r\n      \"lastName\",\r\n      \"username\",\r\n      \"email\",\r\n      \"phoneNumber\",\r\n    ];\r\n\r\n    beforeEach(function () {\r\n      cy.getBySelLike(\"new-transaction\").click();\r\n      cy.wait(\"@allUsers\");\r\n    });\r\n\r\n    searchAttrs.forEach((attr: keyof User) => {\r\n      it(attr, function () {\r\n        const targetUser = ctx.allUsers![2];\r\n\r\n        cy.log(`Searching by **${attr}**`);\r\n        cy.getBySel(\"user-list-search-input\").type(targetUser[attr] as string, { force: true });\r\n        cy.wait(\"@usersSearch\")\r\n          // make sure the backend returns some results\r\n          .its(\"response.body.results\")\r\n          .should(\"have.length.gt\", 0)\r\n          .its(\"length\")\r\n          .then((resultsN) => {\r\n            cy.getBySelLike(\"user-list-item\")\r\n              // make sure the list of results is fully updated\r\n              // and shows the number of results returned from the backend\r\n              .should(\"have.length\", resultsN)\r\n              .first()\r\n              .contains(targetUser[attr] as string);\r\n          });\r\n\r\n        cy.visualSnapshot(`User List for Search: ${attr} = ${targetUser[attr]}`);\r\n\r\n        cy.focused().clear();\r\n        cy.getBySel(\"users-list\").should(\"be.empty\");\r\n        cy.visualSnapshot(\"User List Clear Search\");\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "notifications1.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User A likes a transaction of User B; User B gets notification that User A liked transaction \", function () {\r\n      cy.loginByXstate(ctx.userA.username);\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.database(\"find\", \"transactions\", { senderId: ctx.userB.id }).then(\r\n        (transaction: Transaction) => {\r\n          cy.visit(`/transaction/${transaction.id}`);\r\n        }\r\n      );\r\n\r\n      cy.log(\"🚩 Renders the notifications badge with count\");\r\n      cy.wait(\"@getNotifications\")\r\n        .its(\"response.body.results.length\")\r\n        .then((notificationCount) => {\r\n          cy.getBySel(\"nav-top-notifications-count\").should(\"have.text\", `${notificationCount}`);\r\n        });\r\n      cy.visualSnapshot(\"Renders the notifications badge with count\");\r\n\r\n      const likesCountSelector = \"[data-test*=transaction-like-count]\";\r\n      cy.contains(likesCountSelector, 0);\r\n      cy.getBySelLike(\"like-button\").click();\r\n      // a successful \"like\" should disable the button and increment\r\n      // the number of likes\r\n      cy.getBySelLike(\"like-button\").should(\"be.disabled\");\r\n      cy.contains(likesCountSelector, 1);\r\n      cy.visualSnapshot(\"Like Count Incremented\");\r\n\r\n      cy.switchUserByXstate(ctx.userB.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userB.username}`);\r\n\r\n      cy.wait(\"@getNotifications\")\r\n        .its(\"response.body.results.length\")\r\n        .as(\"preDismissedNotificationCount\");\r\n\r\n      cy.visit(\"/notifications\");\r\n\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userA?.firstName)\r\n        .and(\"contain\", \"liked\");\r\n\r\n      cy.log(\"🚩 Marks notification as read\");\r\n      cy.getBySelLike(\"notification-mark-read\").first().click({ force: true });\r\n      cy.wait(\"@updateNotification\");\r\n\r\n      cy.get(\"@preDismissedNotificationCount\").then((count) => {\r\n        cy.getBySelLike(\"notification-list-item\").should(\"have.length.lessThan\", Number(count));\r\n      });\r\n      cy.visualSnapshot(\"Notification count after notification dismissed\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications2.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\", function () {\r\n      cy.loginByXstate(ctx.userC.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        senderId: ctx.userB.id,\r\n        receiverId: ctx.userA.id,\r\n      }).then((transaction: Transaction) => {\r\n        cy.visit(`/transaction/${transaction.id}`);\r\n      });\r\n\r\n      const likesCountSelector = \"[data-test*=transaction-like-count]\";\r\n      cy.contains(likesCountSelector, 0);\r\n      cy.getBySelLike(\"like-button\").click();\r\n      cy.getBySelLike(\"like-button\").should(\"be.disabled\");\r\n      cy.contains(likesCountSelector, 1);\r\n      cy.visualSnapshot(\"Like Count Incremented\");\r\n\r\n      cy.switchUserByXstate(ctx.userA.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userA.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.location(\"pathname\").should(\"equal\", \"/notifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userC.firstName)\r\n        .and(\"contain\", \"liked\");\r\n      cy.visualSnapshot(\"User A Notified of User B Like\");\r\n\r\n      cy.switchUserByXstate(ctx.userB.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userB.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userC.firstName)\r\n        .and(\"contain\", \"liked\");\r\n      cy.visualSnapshot(\"User B Notified of User C Like\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications3.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\", function () {\r\n      cy.loginByXstate(ctx.userA.username);\r\n      cy.visualSnapshot(\"Logged in as user A\");\r\n\r\n      cy.database(\"find\", \"transactions\", { senderId: ctx.userB.id }).then(\r\n        (transaction: Transaction) => {\r\n          cy.visit(`/transaction/${transaction.id}`);\r\n        }\r\n      );\r\n\r\n      cy.getBySelLike(\"comment-input\").type(\"Thank You{enter}\");\r\n\r\n      cy.wait(\"@postComment\");\r\n\r\n      cy.switchUserByXstate(ctx.userB.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userB.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userA?.firstName)\r\n        .and(\"contain\", \"commented\");\r\n      cy.visualSnapshot(\"User A Notified of User B Comment\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications4.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\", function () {\r\n      cy.loginByXstate(ctx.userC.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        senderId: ctx.userB.id,\r\n        receiverId: ctx.userA.id,\r\n      }).then((transaction: Transaction) => {\r\n        cy.visit(`/transaction/${transaction.id}`);\r\n      });\r\n\r\n      cy.getBySelLike(\"comment-input\").type(\"Thank You{enter}\");\r\n\r\n      cy.wait(\"@postComment\");\r\n\r\n      cy.switchUserByXstate(ctx.userA.username);\r\n      cy.visualSnapshot(\"Switch to User A\");\r\n      cy.visualSnapshot(`Switch to User ${ctx.userA.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n\r\n      cy.wait(\"@getNotifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userC.firstName)\r\n        .and(\"contain\", \"commented\");\r\n      cy.visualSnapshot(\"User A Notified of User C Comment\");\r\n\r\n      cy.switchUserByXstate(ctx.userB.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userB.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"have.length\", 9)\r\n        .first()\r\n        .should(\"contain\", ctx.userC.firstName)\r\n        .and(\"contain\", \"commented\");\r\n      cy.visualSnapshot(\"User B Notified of User C Comment\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications5.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User A sends a payment to User B\", function () {\r\n      cy.loginByXstate(ctx.userA.username);\r\n\r\n      cy.getBySelLike(\"new-transaction\").click();\r\n      cy.createTransaction({\r\n        transactionType: \"payment\",\r\n        amount: 30,\r\n        description: \"🍕Pizza\",\r\n        sender: ctx.userA,\r\n        receiver: ctx.userB,\r\n      });\r\n      cy.wait(\"@createTransaction\");\r\n\r\n      cy.switchUserByXstate(ctx.userB.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userB.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n      cy.visualSnapshot(\"Navigate to Notifications\");\r\n\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .first()\r\n        .should(\"contain\", ctx.userB.firstName)\r\n        .and(\"contain\", \"received payment\");\r\n      cy.visualSnapshot(\"User B Notified of Payment\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications6.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  describe(\"notifications from user interactions\", function () {\r\n    it(\"User A sends a payment request to User C\", function () {\r\n      cy.loginByXstate(ctx.userA.username);\r\n\r\n      cy.getBySelLike(\"new-transaction\").click();\r\n      cy.createTransaction({\r\n        transactionType: \"request\",\r\n        amount: 300,\r\n        description: \"🛫🛬 Airfare\",\r\n        sender: ctx.userA,\r\n        receiver: ctx.userC,\r\n      });\r\n      cy.wait(\"@createTransaction\");\r\n\r\n      cy.switchUserByXstate(ctx.userC.username);\r\n      cy.visualSnapshot(`Switch to User ${ctx.userC.username}`);\r\n\r\n      cy.getBySelLike(\"notifications-link\").click();\r\n      cy.getBySelLike(\"notification-list-item\")\r\n        .should(\"contain\", ctx.userA.firstName)\r\n        .and(\"contain\", \"requested payment\");\r\n      cy.visualSnapshot(\"User C Notified of Request from User A\");\r\n    });\r\n  });\r\n});\r\n",
    "notifications7.spec.ts": "import { isMobile } from \"../../support/utils\";\r\nimport { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NotificationsCtx = {\r\n  userA: User;\r\n  userB: User;\r\n  userC: User;\r\n};\r\n\r\ndescribe(\"Notifications\", function () {\r\n  const ctx = {} as NotificationsCtx;\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n    cy.intercept(\"POST\", \"/transactions\").as(\"createTransaction\");\r\n    cy.intercept(\"PATCH\", \"/notifications/*\").as(\"updateNotification\");\r\n    cy.intercept(\"POST\", \"/comments/*\").as(\"postComment\");\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.userA = users[0];\r\n      ctx.userB = users[1];\r\n      ctx.userC = users[2];\r\n    });\r\n  });\r\n\r\n  it(\"renders an empty notifications state\", function () {\r\n    cy.intercept(\"GET\", \"/notifications\", []).as(\"notifications\");\r\n\r\n    cy.loginByXstate(ctx.userA.username);\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n    cy.getBySel(\"sidenav-notifications\").click();\r\n    cy.location(\"pathname\").should(\"equal\", \"/notifications\");\r\n    cy.getBySel(\"notification-list\").should(\"not.exist\");\r\n    cy.getBySel(\"empty-list-header\").should(\"contain\", \"No Notifications\");\r\n    cy.visualSnapshot(\"No Notifications\");\r\n  });\r\n});\r\n",
    "transaction-feeds1.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n  describe(\"app layout and responsiveness\", function () {\r\n    it(\"toggles the navigation drawer\", function () {\r\n      cy.wait(\"@notifications\");\r\n      cy.wait(\"@publicTransactions\");\r\n      if (isMobile()) {\r\n        cy.getBySel(\"sidenav-home\").should(\"not.exist\");\r\n        cy.visualSnapshot(\"Mobile Initial Side Navigation Not Visible\");\r\n        cy.getBySel(\"sidenav-toggle\").click();\r\n        cy.getBySel(\"sidenav-home\").should(\"be.visible\");\r\n        cy.visualSnapshot(\"Mobile Toggle Side Navigation Visible\");\r\n        cy.get(\".MuiBackdrop-root\").click({ force: true });\r\n        cy.getBySel(\"sidenav-home\").should(\"not.exist\");\r\n        cy.visualSnapshot(\"Mobile Home Link Side Navigation Not Visible\");\r\n\r\n        cy.getBySel(\"sidenav-toggle\").click();\r\n        cy.getBySel(\"sidenav-home\").click().should(\"not.exist\");\r\n        cy.visualSnapshot(\"Mobile Toggle Side Navigation Not Visible\");\r\n      } else {\r\n        cy.getBySel(\"sidenav-home\").should(\"be.visible\");\r\n        cy.visualSnapshot(\"Desktop Side Navigation Visible\");\r\n        cy.getBySel(\"sidenav-toggle\").click();\r\n        cy.getBySel(\"sidenav-home\").should(\"not.be.visible\");\r\n        cy.visualSnapshot(\"Desktop Side Navigation Not Visible\");\r\n      }\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds10.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"Feed Item Visibility\", () => {\r\n    it(\"first five items belong to contacts in public feed\", function () {\r\n      cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\n        ctx.contactIds = contacts.map((contact) => contact.contactUserId);\r\n      });\r\n\r\n      cy.wait(\"@publicTransactions\")\r\n        .its(\"response.body.results\")\r\n        .invoke(\"slice\", 0, 5)\r\n        .each((transaction: Transaction) => {\r\n          const transactionParticipants = [transaction.senderId, transaction.receiverId];\r\n\r\n          const contactsInTransaction = _.intersection(transactionParticipants, ctx.contactIds!);\r\n          const message = `\"${contactsInTransaction}\" are contacts of ${ctx.user!.id}`;\r\n          expect(contactsInTransaction, message).to.not.be.empty;\r\n        });\r\n      cy.getBySel(\"list-skeleton\").should(\"not.exist\");\r\n      cy.visualSnapshot(\"First 5 Transaction Items belong to contacts\");\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds11.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"Feed Item Visibility\", () => {\r\n    it(\"friends feed only shows contact transactions\", function () {\r\n      cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\n        ctx.contactIds = contacts.map((contact) => contact.contactUserId);\r\n      });\r\n\r\n      cy.getBySelLike(feedViews.contacts.tab).click();\r\n\r\n      cy.wait(\"@contactsTransactions\")\r\n        .its(\"response.body.results\")\r\n        .each((transaction: Transaction) => {\r\n          const transactionParticipants = [transaction.senderId, transaction.receiverId];\r\n\r\n          const contactsInTransaction = _.intersection(ctx.contactIds!, transactionParticipants);\r\n\r\n          const message = `\"${contactsInTransaction}\" are contacts of ${ctx.user!.id}`;\r\n          expect(contactsInTransaction, message).to.not.be.empty;\r\n        });\r\n      cy.getBySel(\"list-skeleton\").should(\"not.exist\");\r\n      cy.visualSnapshot(\"Friends Feed only shows contacts transactions\");\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds2.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"renders and paginates all transaction feeds\", function () {\r\n    it(\"renders transactions item variations in feed\", function () {\r\n      cy.intercept(\"GET\", \"/transactions/public*\", {\r\n        headers: {\r\n          \"X-Powered-By\": \"Express\",\r\n          Date: new Date().toString(),\r\n        },\r\n        fixture: \"public-transactions.json\",\r\n      }).as(\"mockedPublicTransactions\");\r\n\r\n      // Visit page again to trigger call to /transactions/public\r\n      cy.visit(\"/\");\r\n\r\n      cy.wait(\"@notifications\");\r\n      cy.wait(\"@mockedPublicTransactions\")\r\n        .its(\"response.body.results\")\r\n        .then((transactions) => {\r\n          const getTransactionFromEl = ($el: JQuery<Element>): TransactionResponseItem => {\r\n            const transactionId = $el.data(\"test\").split(\"transaction-item-\")[1];\r\n            return _.find(transactions, (transaction) => {\r\n              return transaction.id === transactionId;\r\n            })!;\r\n          };\r\n\r\n          cy.log(\"🚩Testing a paid payment transaction item\");\r\n          cy.contains(\"[data-test*='transaction-item']\", \"paid\").within(($el) => {\r\n            const transaction = getTransactionFromEl($el);\r\n            const formattedAmount = Dinero({\r\n              amount: transaction.amount,\r\n            }).toFormat();\r\n\r\n            expect([TransactionStatus.pending, TransactionStatus.complete]).to.include(\r\n              transaction.status\r\n            );\r\n\r\n            expect(transaction.requestStatus).to.be.empty;\r\n\r\n            cy.getBySelLike(\"like-count\").should(\"have.text\", `${transaction.likes.length}`);\r\n            cy.getBySelLike(\"comment-count\").should(\"have.text\", `${transaction.comments.length}`);\r\n\r\n            cy.getBySelLike(\"sender\").should(\"contain\", transaction.senderName);\r\n            cy.getBySelLike(\"receiver\").should(\"contain\", transaction.receiverName);\r\n\r\n            cy.getBySelLike(\"amount\")\r\n              .should(\"contain\", `-${formattedAmount}`)\r\n              .should(\"have.css\", \"color\", \"rgb(255, 0, 0)\");\r\n          });\r\n\r\n          cy.log(\"🚩Testing a charged payment transaction item\");\r\n          cy.contains(\"[data-test*='transaction-item']\", \"charged\").within(($el) => {\r\n            const transaction = getTransactionFromEl($el);\r\n            const formattedAmount = Dinero({\r\n              amount: transaction.amount,\r\n            }).toFormat();\r\n\r\n            expect(TransactionStatus.complete).to.equal(transaction.status);\r\n\r\n            expect(transaction.requestStatus).to.equal(TransactionRequestStatus.accepted);\r\n\r\n            cy.getBySelLike(\"amount\")\r\n              .should(\"contain\", `+${formattedAmount}`)\r\n              .should(\"have.css\", \"color\", \"rgb(76, 175, 80)\");\r\n          });\r\n\r\n          cy.log(\"🚩Testing a requested payment transaction item\");\r\n          cy.contains(\"[data-test*='transaction-item']\", \"requested\").within(($el) => {\r\n            const transaction = getTransactionFromEl($el);\r\n            const formattedAmount = Dinero({\r\n              amount: transaction.amount,\r\n            }).toFormat();\r\n\r\n            expect([TransactionStatus.pending, TransactionStatus.complete]).to.include(\r\n              transaction.status\r\n            );\r\n            expect([\r\n              TransactionRequestStatus.pending,\r\n              TransactionRequestStatus.rejected,\r\n            ]).to.include(transaction.requestStatus);\r\n\r\n            cy.getBySelLike(\"amount\")\r\n              .should(\"contain\", `+${formattedAmount}`)\r\n              .should(\"have.css\", \"color\", \"rgb(76, 175, 80)\");\r\n          });\r\n          cy.visualSnapshot(\"Transaction Item\");\r\n        });\r\n    });\r\n\r\n    _.each(feedViews, (feed, feedName) => {});\r\n  });\r\n});\r\n",
    "transaction-feeds3.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"renders and paginates all transaction feeds\", function () {\r\n    _.each(feedViews, (feed, feedName) => {\r\n      it(`paginates ${feedName} transaction feed`, function () {\r\n        cy.getBySelLike(feed.tab)\r\n          .click()\r\n          .should(\"have.class\", \"Mui-selected\")\r\n          .contains(feed.tabLabel, { matchCase: false })\r\n          .should(\"have.css\", { \"text-transform\": \"uppercase\" });\r\n        cy.getBySel(\"list-skeleton\").should(\"not.exist\");\r\n        cy.visualSnapshot(`Paginate ${feedName}`);\r\n\r\n        cy.wait(`@${feed.routeAlias}`)\r\n          .its(\"response.body.results\")\r\n          .should(\"have.length\", Cypress.env(\"paginationPageSize\"));\r\n\r\n        // Temporary fix: https://github.com/cypress-io/cypress-realworld-app/issues/338\r\n        if (isMobile()) {\r\n          cy.wait(10);\r\n        }\r\n\r\n        cy.log(\"📃 Scroll to next page\");\r\n        cy.getBySel(\"transaction-list\").children().scrollTo(\"bottom\");\r\n\r\n        cy.wait(`@${feed.routeAlias}`)\r\n          .its(\"response.body\")\r\n          .then(({ results, pageData }) => {\r\n            expect(results).have.length(Cypress.env(\"paginationPageSize\"));\r\n            expect(pageData.page).to.equal(2);\r\n            cy.visualSnapshot(`Paginate ${feedName} Next Page`);\r\n            cy.nextTransactionFeedPage(feed.service, pageData.totalPages);\r\n          });\r\n\r\n        cy.wait(`@${feed.routeAlias}`)\r\n          .its(\"response.body\")\r\n          .then(({ results, pageData }) => {\r\n            expect(results).to.have.length.least(1);\r\n            expect(pageData.page).to.equal(pageData.totalPages);\r\n            expect(pageData.hasNextPages).to.equal(false);\r\n            cy.visualSnapshot(`Paginate ${feedName} Last Page`);\r\n          });\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds4.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"filters transaction feeds by date range\", function () {\r\n    if (isMobile()) {\r\n      it(\"closes date range picker modal\", () => {\r\n        cy.getBySelLike(\"filter-date-range-button\").click({ force: true });\r\n        cy.get(\".Cal__Header__root\").should(\"be.visible\");\r\n        cy.visualSnapshot(\"Mobile Open Date Range Picker\");\r\n        cy.getBySel(\"date-range-filter-drawer-close\").click();\r\n        cy.get(\".Cal__Header__root\").should(\"not.exist\");\r\n        cy.visualSnapshot(\"Mobile Close Date Range Picker\");\r\n      });\r\n    }\r\n\r\n    _.each(feedViews, (feed, feedName) => {});\r\n  });\r\n});\r\n",
    "transaction-feeds5.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"filters transaction feeds by date range\", function () {\r\n    if (isMobile()) {}\r\n\r\n    _.each(feedViews, (feed, feedName) => {\r\n      it(`filters ${feedName} transaction feed by date range`, function () {\r\n        cy.database(\"find\", \"transactions\").then((transaction: Transaction) => {\r\n          const dateRangeStart = startOfDay(new Date(transaction.createdAt));\r\n          const dateRangeEnd = endOfDayUTC(addDays(dateRangeStart, 1));\r\n\r\n          cy.getBySelLike(feed.tab).click().should(\"have.class\", \"Mui-selected\");\r\n\r\n          cy.wait(`@${feed.routeAlias}`).its(\"response.body.results\").as(\"unfilteredResults\");\r\n\r\n          cy.pickDateRange(dateRangeStart, dateRangeEnd);\r\n\r\n          cy.wait(`@${feed.routeAlias}`)\r\n            .its(\"response.body.results\")\r\n            .then((transactions: Transaction[]) => {\r\n              cy.getBySelLike(\"transaction-item\").should(\"have.length\", transactions.length);\r\n\r\n              transactions.forEach(({ createdAt }) => {\r\n                const createdAtDate = startOfDayUTC(new Date(createdAt));\r\n\r\n                expect(\r\n                  isWithinInterval(createdAtDate, {\r\n                    start: startOfDayUTC(dateRangeStart),\r\n                    end: dateRangeEnd,\r\n                  }),\r\n                  `transaction created date (${createdAtDate.toISOString()}) \r\n                  is within ${dateRangeStart.toISOString()} \r\n                  and ${dateRangeEnd.toISOString()}`\r\n                ).to.equal(true);\r\n              });\r\n\r\n              cy.visualSnapshot(\"Date Range Filtered Transactions\");\r\n            });\r\n\r\n          cy.log(\"Clearing date range filter. Data set should revert\");\r\n          cy.getBySelLike(\"filter-date-clear-button\").click({\r\n            force: true,\r\n          });\r\n          cy.getBySelLike(\"filter-date-range-button\").should(\"contain\", \"ALL\");\r\n\r\n          cy.get(\"@unfilteredResults\").then((unfilteredResults) => {\r\n            cy.wait(`@${feed.routeAlias}`)\r\n              .its(\"response.body.results\")\r\n              .should(\"deep.equal\", unfilteredResults);\r\n            cy.visualSnapshot(\"Unfiltered Transactions\");\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds6.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"filters transaction feeds by date range\", function () {\r\n    if (isMobile()) {}\r\n\r\n    _.each(feedViews, (feed, feedName) => {\r\n      it(`does not show ${feedName} transactions for out of range date limits`, function () {\r\n        const dateRangeStart = startOfDay(new Date(2014, 1, 1));\r\n        const dateRangeEnd = endOfDayUTC(addDays(dateRangeStart, 1));\r\n\r\n        cy.getBySelLike(feed.tab).click();\r\n        cy.wait(`@${feed.routeAlias}`);\r\n\r\n        cy.pickDateRange(dateRangeStart, dateRangeEnd);\r\n        cy.wait(`@${feed.routeAlias}`);\r\n\r\n        cy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);\r\n        cy.getBySel(\"empty-list-header\").should(\"contain\", \"No Transactions\");\r\n        cy.getBySelLike(\"empty-create-transaction-button\")\r\n          .should(\"have.attr\", \"href\", \"/transaction/new\")\r\n          .contains(\"create a transaction\", { matchCase: false })\r\n          .should(\"have.css\", { \"text-transform\": \"uppercase\" });\r\n        cy.visualSnapshot(\"No Transactions\");\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds7.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"filters transaction feeds by amount range\", function () {\r\n    const dollarAmountRange = {\r\n      min: 200,\r\n      max: 800,\r\n    };\r\n\r\n    _.each(feedViews, (feed, feedName) => {\r\n      it(`filters ${feedName} transaction feed by amount range`, function () {\r\n        cy.getBySelLike(feed.tab).click({ force: true }).should(\"have.class\", \"Mui-selected\");\r\n\r\n        cy.wait(`@${feed.routeAlias}`).its(\"response.body.results\").as(\"unfilteredResults\");\r\n\r\n        cy.setTransactionAmountRange(dollarAmountRange.min, dollarAmountRange.max);\r\n\r\n        cy.getBySelLike(\"filter-amount-range-text\").should(\r\n          \"contain\",\r\n          `$${dollarAmountRange.min} - $${dollarAmountRange.max}`\r\n        );\r\n\r\n        // @ts-ignore\r\n        cy.wait(`@${feed.routeAlias}`).then(({ response: { body, url } }) => {\r\n          const transactions = body.results as TransactionResponseItem[];\r\n          const urlParams = new URLSearchParams(_.last(url.split(\"?\")));\r\n\r\n          const rawAmountMin = dollarAmountRange.min * 100;\r\n          const rawAmountMax = dollarAmountRange.max * 100;\r\n\r\n          expect(urlParams.get(\"amountMin\")).to.equal(`${rawAmountMin}`);\r\n          expect(urlParams.get(\"amountMax\")).to.equal(`${rawAmountMax}`);\r\n\r\n          cy.visualSnapshot(\"Amount Range Filtered Transactions\");\r\n          transactions.forEach(({ amount }) => {\r\n            expect(amount).to.be.within(rawAmountMin, rawAmountMax);\r\n          });\r\n        });\r\n\r\n        cy.getBySelLike(\"amount-clear-button\").click();\r\n\r\n        if (isMobile()) {\r\n          cy.getBySelLike(\"amount-range-filter-drawer-close\").click();\r\n          cy.getBySel(\"amount-range-filter-drawer\").should(\"not.exist\");\r\n        } else {\r\n          cy.getBySel(\"transaction-list-filter-amount-clear-button\").click();\r\n          cy.getBySel(\"main\").scrollTo(\"top\");\r\n          cy.getBySel(\"transaction-list-filter-date-range-button\").click({ force: true });\r\n          cy.getBySel(\"transaction-list-filter-amount-range\").should(\"not.be.visible\");\r\n        }\r\n\r\n        cy.get(\"@unfilteredResults\").then((unfilteredResults) => {\r\n          cy.wait(`@${feed.routeAlias}`)\r\n            .its(\"response.body.results\")\r\n            .should(\"deep.equal\", unfilteredResults);\r\n          cy.visualSnapshot(\"Unfiltered Transactions\");\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds8.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"filters transaction feeds by amount range\", function () {\r\n    const dollarAmountRange = {\r\n      min: 200,\r\n      max: 800,\r\n    };\r\n\r\n    _.each(feedViews, (feed, feedName) => {\r\n      it(`does not show ${feedName} transactions for out of range amount limits`, function () {\r\n        cy.getBySelLike(feed.tab).click();\r\n        cy.wait(`@${feed.routeAlias}`);\r\n\r\n        cy.setTransactionAmountRange(550, 1000);\r\n        cy.getBySelLike(\"filter-amount-range-text\").should(\"contain\", \"$550 - $1,000\");\r\n        cy.wait(`@${feed.routeAlias}`);\r\n\r\n        cy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);\r\n        cy.getBySel(\"empty-list-header\").should(\"contain\", \"No Transactions\");\r\n        cy.getBySelLike(\"empty-create-transaction-button\")\r\n          .should(\"have.attr\", \"href\", \"/transaction/new\")\r\n          .contains(\"create a transaction\", { matchCase: false })\r\n          .should(\"have.css\", { \"text-transform\": \"uppercase\" });\r\n        cy.visualSnapshot(\"No Transactions\");\r\n      });\r\n    });\r\n  });\r\n});\r\n",
    "transaction-feeds9.spec.ts": "import Dinero from \"dinero.js\";\r\nimport {\r\n  User,\r\n  Transaction,\r\n  TransactionRequestStatus,\r\n  TransactionResponseItem,\r\n  Contact,\r\n  TransactionStatus,\r\n} from \"../../../src/models\";\r\nimport { addDays, isWithinInterval, startOfDay } from \"date-fns\";\r\nimport { startOfDayUTC, endOfDayUTC } from \"../../../src/utils/transactionUtils\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\nconst { _ } = Cypress;\r\n\r\ntype TransactionFeedsCtx = {\r\n  allUsers?: User[];\r\n  user?: User;\r\n  contactIds?: string[];\r\n};\r\n\r\ndescribe(\"Transaction Feed\", function () {\r\n  const ctx: TransactionFeedsCtx = {};\r\n\r\n  const feedViews = {\r\n    public: {\r\n      tab: \"public-tab\",\r\n      tabLabel: \"everyone\",\r\n      routeAlias: \"publicTransactions\",\r\n      service: \"publicTransactionService\",\r\n    },\r\n    contacts: {\r\n      tab: \"contacts-tab\",\r\n      tabLabel: \"friends\",\r\n      routeAlias: \"contactsTransactions\",\r\n      service: \"contactTransactionService\",\r\n    },\r\n    personal: {\r\n      tab: \"personal-tab\",\r\n      tabLabel: \"mine\",\r\n      routeAlias: \"personalTransactions\",\r\n      service: \"personalTransactionService\",\r\n    },\r\n  };\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"notifications\");\r\n    cy.intercept(\"GET\", \"/transactions*\").as(feedViews.personal.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(feedViews.public.routeAlias);\r\n    cy.intercept(\"GET\", \"/transactions/contacts*\").as(feedViews.contacts.routeAlias);\r\n\r\n    cy.database(\"filter\", \"users\").then((users: User[]) => {\r\n      ctx.user = users[0];\r\n      ctx.allUsers = users;\r\n\r\n      cy.loginByXstate(ctx.user.username);\r\n    });\r\n  });\r\n\r\n  describe(\"Feed Item Visibility\", () => {\r\n    it(\"mine feed only shows personal transactions\", function () {\r\n      cy.database(\"filter\", \"contacts\", { userId: ctx.user!.id }).then((contacts: Contact[]) => {\r\n        ctx.contactIds = contacts.map((contact) => contact.contactUserId);\r\n      });\r\n\r\n      cy.getBySelLike(feedViews.personal.tab).click();\r\n\r\n      cy.wait(\"@personalTransactions\")\r\n        .its(\"response.body.results\")\r\n        .each((transaction: Transaction) => {\r\n          const transactionParticipants = [transaction.senderId, transaction.receiverId];\r\n          expect(transactionParticipants).to.include(ctx.user!.id);\r\n        });\r\n      cy.getBySel(\"list-skeleton\").should(\"not.exist\");\r\n      cy.visualSnapshot(\"Personal Transactions\");\r\n    });\r\n  });\r\n});\r\n",
    "transaction-view1.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"transactions navigation tabs are hidden on a transaction view page\", function () {\r\n    // { force: true } is a workaround for https://github.com/cypress-io/cypress/issues/29776\r\n    cy.getBySelLike(\"transaction-item\").first().click({ force: true });\r\n    cy.location(\"pathname\").should(\"include\", \"/transaction\");\r\n    cy.getBySel(\"nav-transaction-tabs\").should(\"not.exist\");\r\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"Transaction Navigation Tabs Hidden\");\r\n  });\r\n});\r\n",
    "transaction-view2.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"likes a transaction\", function () {\r\n    // { force: true } is a workaround for https://github.com/cypress-io/cypress/issues/29776\r\n    cy.getBySelLike(\"transaction-item\").first().click({ force: true });\r\n    cy.wait(\"@getTransaction\");\r\n\r\n    cy.getBySelLike(\"like-button\").click();\r\n    cy.getBySelLike(\"like-count\").should(\"contain\", 2);\r\n    cy.getBySelLike(\"like-button\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"Transaction after Liked\");\r\n  });\r\n});\r\n",
    "transaction-view3.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"comments on a transaction\", function () {\r\n    // { force: true } is a workaround for https://github.com/cypress-io/cypress/issues/29776\r\n    cy.getBySelLike(\"transaction-item\").first().click({ force: true });\r\n    cy.wait(\"@getTransaction\");\r\n\r\n    const comments = [\"Thank you!\", \"Appreciate it.\"];\r\n\r\n    comments.forEach((comment, index) => {\r\n      cy.getBySelLike(\"comment-input\").type(`${comment}{enter}`);\r\n      cy.getBySelLike(\"comments-list\").children().eq(index).contains(comment);\r\n    });\r\n\r\n    cy.getBySelLike(\"comments-list\").children().should(\"have.length\", comments.length);\r\n    cy.visualSnapshot(\"Comment on Transaction\");\r\n  });\r\n});\r\n",
    "transaction-view4.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"accepts a transaction request\", function () {\r\n    cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\n    cy.wait(\"@getTransaction\");\r\n\r\n    cy.getBySelLike(\"accept-request\").click();\r\n    cy.wait(\"@updateTransaction\").its(\"response.statusCode\").should(\"equal\", 204);\r\n    cy.getBySelLike(\"accept-request\").should(\"not.exist\");\r\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"Transaction Accepted\");\r\n  });\r\n});\r\n",
    "transaction-view5.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"rejects a transaction request\", function () {\r\n    cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\n    cy.wait(\"@getTransaction\");\r\n\r\n    cy.getBySelLike(\"reject-request\").click();\r\n    cy.wait(\"@updateTransaction\").its(\"response.statusCode\").should(\"equal\", 204);\r\n    cy.getBySelLike(\"reject-request\").should(\"not.exist\");\r\n    cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\r\n    cy.visualSnapshot(\"Transaction Rejected\");\r\n  });\r\n});\r\n",
    "transaction-view6.spec.ts": "import { User, Transaction } from \"../../../src/models\";\r\n\r\ntype NewTransactionCtx = {\r\n  transactionRequest?: Transaction;\r\n  authenticatedUser?: User;\r\n};\r\n\r\ndescribe(\"Transaction View\", function () {\r\n  const ctx: NewTransactionCtx = {};\r\n\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"GET\", \"/transactions*\").as(\"personalTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/public*\").as(\"publicTransactions\");\r\n    cy.intercept(\"GET\", \"/transactions/*\").as(\"getTransaction\");\r\n    cy.intercept(\"PATCH\", \"/transactions/*\").as(\"updateTransaction\");\r\n\r\n    cy.intercept(\"GET\", \"/checkAuth\").as(\"userProfile\");\r\n    cy.intercept(\"GET\", \"/notifications\").as(\"getNotifications\");\r\n    cy.intercept(\"GET\", \"/bankAccounts\").as(\"getBankAccounts\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      ctx.authenticatedUser = user;\r\n\r\n      cy.loginByXstate(ctx.authenticatedUser.username);\r\n\r\n      cy.database(\"find\", \"transactions\", {\r\n        receiverId: ctx.authenticatedUser.id,\r\n        status: \"pending\",\r\n        requestStatus: \"pending\",\r\n        requestResolvedAt: \"\",\r\n      }).then((transaction: Transaction) => {\r\n        ctx.transactionRequest = transaction;\r\n      });\r\n    });\r\n\r\n    cy.getBySel(\"nav-personal-tab\").click();\r\n    cy.wait(\"@personalTransactions\");\r\n  });\r\n\r\n  it(\"does not display accept/reject buttons on completed request\", function () {\r\n    cy.database(\"find\", \"transactions\", {\r\n      receiverId: ctx.authenticatedUser!.id,\r\n      status: \"complete\",\r\n      requestStatus: \"accepted\",\r\n    }).then((transactionRequest) => {\r\n      cy.visit(`/transaction/${transactionRequest!.id}`);\r\n\r\n      cy.wait(\"@getNotifications\");\r\n      cy.getBySel(\"nav-top-notifications-count\").should(\"be.visible\");\r\n      cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\r\n      cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\r\n      cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\r\n      cy.getBySel(\"transaction-detail-header\").should(\"be.visible\");\r\n      cy.visualSnapshot(\"Transaction Completed (not able to accept or reject)\");\r\n    });\r\n  });\r\n});\r\n",
    "user-settings1.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ndescribe(\"User Settings\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.loginByXstate(user.username);\r\n    });\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySel(\"sidenav-user-settings\").click();\r\n  });\r\n\r\n  it(\"renders the user settings form\", function () {\r\n    cy.wait(\"@getNotifications\");\r\n    cy.getBySel(\"user-settings-form\").should(\"be.visible\");\r\n    cy.location(\"pathname\").should(\"include\", \"/user/settings\");\r\n\r\n    cy.visualSnapshot(\"User Settings Form\");\r\n  });\r\n});\r\n",
    "user-settings2.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ndescribe(\"User Settings\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.loginByXstate(user.username);\r\n    });\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySel(\"sidenav-user-settings\").click();\r\n  });\r\n\r\n  it(\"should display user setting form errors\", function () {\r\n    [\"first\", \"last\"].forEach((field) => {\r\n      cy.getBySelLike(`${field}Name-input`).type(\"Abc\").clear().blur();\r\n      cy.get(`#user-settings-${field}Name-input-helper-text`)\r\n        .should(\"be.visible\")\r\n        .and(\"contain\", `Enter a ${field} name`);\r\n    });\r\n\r\n    cy.getBySelLike(\"email-input\").type(\"abc\").clear().blur();\r\n    cy.get(\"#user-settings-email-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Enter an email address\");\r\n\r\n    cy.getBySelLike(\"email-input\").type(\"abc@bob.\").blur();\r\n    cy.get(\"#user-settings-email-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Must contain a valid email address\");\r\n\r\n    cy.getBySelLike(\"phoneNumber-input\").type(\"abc\").clear().blur();\r\n    cy.get(\"#user-settings-phoneNumber-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Enter a phone number\");\r\n\r\n    cy.getBySelLike(\"phoneNumber-input\").type(\"615-555-\").blur();\r\n    cy.get(\"#user-settings-phoneNumber-input-helper-text\")\r\n      .should(\"be.visible\")\r\n      .and(\"contain\", \"Phone number is not valid\");\r\n\r\n    cy.getBySelLike(\"submit\").should(\"be.disabled\");\r\n    cy.visualSnapshot(\"User Settings Form Errors and Submit Disabled\");\r\n  });\r\n});\r\n",
    "user-settings3.spec.ts": "import { User } from \"../../../src/models\";\r\nimport { isMobile } from \"../../support/utils\";\r\n\r\ndescribe(\"User Settings\", function () {\r\n  beforeEach(function () {\r\n    cy.task(\"db:seed\");\r\n\r\n    cy.intercept(\"PATCH\", \"/users/*\").as(\"updateUser\");\r\n    cy.intercept(\"GET\", \"/notifications*\").as(\"getNotifications\");\r\n\r\n    cy.database(\"find\", \"users\").then((user: User) => {\r\n      cy.loginByXstate(user.username);\r\n    });\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySel(\"sidenav-user-settings\").click();\r\n  });\r\n\r\n  it(\"updates first name, last name, email and phone number\", function () {\r\n    cy.getBySelLike(\"firstName\").clear().type(\"New First Name\");\r\n    cy.getBySelLike(\"lastName\").clear().type(\"New Last Name\");\r\n    cy.getBySelLike(\"email\").clear().type(\"email@email.com\");\r\n    cy.getBySelLike(\"phoneNumber-input\").clear().type(\"6155551212\").blur();\r\n\r\n    cy.getBySelLike(\"submit\").should(\"not.be.disabled\");\r\n    cy.getBySelLike(\"submit\").click();\r\n\r\n    cy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"equal\", 204);\r\n\r\n    if (isMobile()) {\r\n      cy.getBySel(\"sidenav-toggle\").click();\r\n    }\r\n\r\n    cy.getBySel(\"sidenav-user-full-name\").should(\"contain\", \"New First Name\");\r\n    cy.visualSnapshot(\"User Settings Update Profile\");\r\n  });\r\n});\r\n"
  }
}