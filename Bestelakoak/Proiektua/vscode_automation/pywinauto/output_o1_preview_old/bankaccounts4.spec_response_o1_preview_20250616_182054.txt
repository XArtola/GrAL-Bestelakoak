---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    // TODO: [enhancement] the onboarding modal assertion can be removed after adding "onboarded" flag to user profile
    it("renders an empty bank account list state with onboarding modal", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: <generated_code>
> // it("renders an empty bank account list state with onboarding modal", () => { });
> 
> it("renders an empty bank account list state with onboarding modal", () => {
>   // Step 1: Ensure the user has no bank accounts (so the empty state is displayed)
>   cy.database("filter", "bankaccounts", { userId: ctx.user?.id }).then((accounts) => {
>     accounts.forEach((account) => {
>       // Remove all existing bank accounts for this user
>       cy.database("delete", "bankaccounts", { id: account.id });
>     });
>   });
> 
>   // Step 2: Visit the Bank Accounts page
>   cy.visit("/bankaccounts");
> 
>   // Step 3: Wait for the bank accounts GraphQL query to complete
>   cy.wait("@gqlListBankAccountQuery");
> 
>   // Step 4: Verify that no bank accounts are shown
>   // (In the real world app, the list might be empty or replaced by a placeholder)
>   cy.get("[data-test='bankaccount-list']").should("not.exist");
> 
>   // Step 5: Verify that the onboarding modal is shown for users without bank accounts
>   cy.get("[data-test='user-onboarding-dialog']").should("be.visible");
> 
>   // Step 6: Optionally, check for any message prompting the user to add a bank account
>   cy.contains("Create a Bank Account").should("be.visible");
> });
> </generated_code>
