---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    // TODO: [enhancement] the onboarding modal assertion can be removed after adding "onboarded" flag to user profile
    it("renders an empty bank account list state with onboarding modal", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Below is an example of how you might generate the commands inside the existing test's "it" block. In this example, we assume that the application uses data-test attributes for key UI elements (such as list, modal, form, fields, etc.) so that we can verify that the bank account list is empty, and that the onboarding modal is shown. Then we simulate clicking through to create a bank account using the provided user bank account info (as referenced by userInfo.bankAccountInfo).
> 
> <generated_code>
> // Test: renders an empty bank account list state with onboarding modal
> // Verify empty bank account list and the onboarding modal appear
> cy.get('[data-test="bank-account-list"]').should('exist');
> cy.get('[data-test="bank-account-list"]')
>   .find('[data-test="bank-account-item"]')
>   .should('have.length', 0);
> cy.get('[data-test="onboarding-modal"]').should('be.visible');
> 
> // (Optional) Click a button within the onboarding modal to start creating a bank account
> cy.get('[data-test="onboarding-modal"]').within(() => {
>   cy.contains('Add Bank Account').click();
> });
> 
> // Confirm the bank account form is displayed
> cy.get('[data-test="bank-account-form"]').should('be.visible');
> 
> // Fill in the bank account form fields using the provided userInfo.bankAccountInfo values
> cy.get('[data-test="bank-name"]').type(userInfo.bankAccountInfo.bankName);
> cy.get('[data-test="routing-number"]').type(userInfo.bankAccountInfo.routingNumber);
> cy.get('[data-test="account-number"]').type(userInfo.bankAccountInfo.accountNumber);
> 
> // Submit the bank account creation form
> cy.get('[data-test="submit-bank-account"]').click();
> 
> // Wait for the GraphQL mutation to create the bank account to finish
> cy.wait('@gqlCreateBankAccountMutation');
> 
> // Verify that the new bank account now appears in the list
> cy.get('[data-test="bank-account-list"]')
>   .find('[data-test="bank-account-item"]')
>   .should('have.length', 1)
>   .and('contain', userInfo.bankAccountInfo.bankName);
> </generated_code>
> 
> Feel free to adjust the selectors and command details as needed based on your actual application structure and available UI elements.
