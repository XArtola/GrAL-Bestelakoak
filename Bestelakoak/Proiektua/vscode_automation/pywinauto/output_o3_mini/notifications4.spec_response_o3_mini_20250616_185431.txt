---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot:
>```ts
> // Original test: "User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction"
> <generated_code>
> // First, log in as User C (using a custom command; adjust as needed)
> cy.loginByXstate(ctx.userC.username);
> 
> // Retrieve a transaction between User A and User B from the seeded database
> cy.database("find", "transactions").then((transactions: any[]) => {
>   // Find a transaction where User A is the sender and User B is the receiver
>   const transaction = transactions.find(
>     (t) => t.senderId === ctx.userA.id && t.receiverId === ctx.userB.id
>   );
>   // Ensure the transaction exists
>   expect(transaction, "Transaction between User A and User B exists").to.exist;
>   
>   // Log the transaction id for debugging
>   cy.log("Found transaction with id: " + transaction.id);
>   
>   // Simulate User C adding a comment on the transaction via an API request
>   // (Assuming the backend accepts a POST request to the comments endpoint)
>   cy.request({
>     method: "POST",
>     url: `/comments/${transaction.id}`,
>     body: {
>       userId: ctx.userC.id,
>       content: "This is a comment from User C.",
>     },
>   }).then((response) => {
>     // Expect the comment to be created successfully (HTTP 201 Created)
>     expect(response.status).to.eq(201);
>   });
>   
>   // Wait for the comment POST request to complete (using the alias set in beforeEach if applicable)
>   cy.wait("@postComment");
> 
>   // Verify that User A receives a notification for the new comment
>   cy.request({
>     method: "GET",
>     url: `/notifications?userId=${ctx.userA.id}`,
>   }).then((resA: any) => {
>     expect(resA.status).to.eq(200);
>     // Assert that at least one notification for the transaction contains a commentId
>     const notificationForA = resA.body.find(
>       (n: any) => n.commentId && n.transactionId === transaction.id
>     );
>     expect(notificationForA, "User A received a comment notification").to.exist;
>   });
> 
>   // Verify that User B receives a notification for the new comment
>   cy.request({
>     method: "GET",
>     url: `/notifications?userId=${ctx.userB.id}`,
>   }).then((resB: any) => {
>     expect(resB.status).to.eq(200);
>     const notificationForB = resB.body.find(
>       (n: any) => n.commentId && n.transactionId === transaction.id
>     );
>     expect(notificationForB, "User B received a comment notification").to.exist;
>   });
> });
> </generated_code>
> ```
