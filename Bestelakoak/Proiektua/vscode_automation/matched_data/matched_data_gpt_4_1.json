[
  {
    "timestamp": "2025-06-16 15:21:55.713",
    "output_file": "output_gpt_4_1\\transaction-view6.spec_response_gpt_4_1_20250616_152433.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view6.spec.txt",
    "requestTimeMs": 1750080115713,
    "responseTimeMs": 1750080136515,
    "durationMs": 20802,
    "testId": "transaction-view6",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// does not display accept/reject buttons on completed request\r\r\n// 1. Mark the transaction request as completed (simulate accepting or rejecting).\r\r\n// 2. Visit the transaction view page for the completed request.\r\r\n// 3. Assert that accept/reject buttons are not visible.\r\r\n\r\r\ncy.wrap(ctx.transactionRequest).should(\"exist\");\r\r\n\r\r\n// Complete the transaction request by updating its status\r\r\ncy.request(\"PATCH\", `/transactions/${ctx.transactionRequest!.id}`, {\r\r\n  status: \"complete\",\r\r\n  requestStatus: \"accepted\",\r\r\n  requestResolvedAt: new Date().toISOString(),\r\r\n}).then(() => {\r\r\n  // Visit the transaction view page\r\r\n  cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\r\n  cy.wait(\"@getTransaction\");\r\r\n\r\r\n  // Assert that accept/reject buttons are not present\r\r\n  cy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\r\r\n  cy.getBySel(\"transaction-reject-request\").should(\"not.exist\");\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 15:24:49.889",
    "output_file": "output_gpt_4_1\\transaction-feeds1.spec_response_gpt_4_1_20250616_152727.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds1.spec.txt",
    "requestTimeMs": 1750080289889,
    "responseTimeMs": 1750080295376,
    "durationMs": 5487,
    "testId": "transaction-feeds1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Open the navigation drawer\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n    cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n    // Close the navigation drawer\n\n    cy.getBySel(\"sidenav-toggle\").click({\n      force: true\n    });\n    cy.getBySel(\"sidenav\").should(\"not.be.visible\");\n  } else {\n    // On desktop, sidenav should always be visible\n\n    cy.getBySel(\"sidenav\").should(\"be.visible\");\n\n    // Optionally, check that sidenav-username is present\n\n    cy.getBySel(\"sidenav-username\").should(\"contain\", ctx.user.username);\n  }"
  },
  {
    "timestamp": "2025-06-16 15:27:44.050",
    "output_file": "output_gpt_4_1\\auth7.spec_response_gpt_4_1_20250616_153021.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth7.spec.txt",
    "requestTimeMs": 1750080464050,
    "responseTimeMs": 1750080469304,
    "durationMs": 5254,
    "testId": "auth7",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Attempt to log in with an invalid username and a valid password\n\n  cy.visit(\"/signin\");\n  cy.getBySel(\"signin-username\").type(\"invalidUserName\");\n  cy.getBySel(\"signin-password\").type(userInfo.password);\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert that an error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");"
  },
  {
    "timestamp": "2025-06-16 15:30:38.259",
    "output_file": "output_gpt_4_1\\auth8.spec_response_gpt_4_1_20250616_153316.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth8.spec.txt",
    "requestTimeMs": 1750080638259,
    "responseTimeMs": 1750080643146,
    "durationMs": 4887,
    "testId": "auth8",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Visit the sign-in page\n\n  cy.visit(\"/signin\");\n\n  // Fill in the username with a valid user\n\n  cy.getBySel(\"signin-username\").type(\"PainterJoy90\");\n\n  // Fill in the password with an invalid password\n\n  cy.getBySel(\"signin-password\").type(\"invalidPa$word\");\n\n  // Submit the login form\n\n  cy.getBySel(\"signin-submit\").click();\n\n  // Assert that an error message is displayed\n\n  cy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");"
  },
  {
    "timestamp": "2025-06-16 15:33:32.392",
    "output_file": "output_gpt_4_1\\notifications7.spec_response_gpt_4_1_20250616_153610.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications7.spec.txt",
    "requestTimeMs": 1750080812392,
    "responseTimeMs": 1750080818727,
    "durationMs": 6335,
    "testId": "notifications7",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// renders an empty notifications state\r\r\n// This test verifies that when a user with no notifications logs in, the empty state is shown.\r\r\n\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\n// Navigate to notifications page\r\r\nif (isMobile()) {\r\r\n  cy.getBySel(\"sidenav-toggle\").click();\r\r\n}\r\r\ncy.getBySel(\"nav-notifications-tab\").click();\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// Assert that the empty notifications state is rendered\r\r\ncy.getBySel(\"empty-notifications-header\").should(\"be.visible\");\r\r\ncy.getBySel(\"empty-notifications-message\").should(\"contain\", \"You have no notifications\");"
  },
  {
    "timestamp": "2025-06-16 15:36:26.556",
    "output_file": "output_gpt_4_1\\transaction-feeds8.spec_response_gpt_4_1_20250616_153904.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds8.spec.txt",
    "requestTimeMs": 1750080986556,
    "responseTimeMs": 1750080994084,
    "durationMs": 7528,
    "testId": "transaction-feeds8",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// does not show public transactions for out of range amount limits\r\r\ncy.getBySel(feedViews.public.tab).click();\r\r\ncy.wait(`@${feedViews.public.routeAlias}`);\r\r\n// Set amount range filter to be outside the range of any transaction\r\r\ncy.setTransactionAmountRange(10000, 20000);\r\r\n// Assert that no transactions are shown in the feed\r\r\ncy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);"
  },
  {
    "timestamp": "2025-06-16 15:39:20.756",
    "output_file": "output_gpt_4_1\\transaction-feeds11.spec_response_gpt_4_1_20250616_154158.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds11.spec.txt",
    "requestTimeMs": 1750081160756,
    "responseTimeMs": 1750081171192,
    "durationMs": 10436,
    "testId": "transaction-feeds11",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// friends feed only shows contact transactions\r\r\n// This test verifies that the \"friends\" feed only displays transactions involving the user's contacts.\r\r\n\r\r\ncy.getBySel(feedViews.contacts.tab).click(); // Click on the \"friends\" tab\r\r\ncy.wait(`@${feedViews.contacts.routeAlias}`); // Wait for the contacts transactions API call\r\r\n\r\r\n// Get all transaction items in the feed\r\r\ncy.getBySelLike(\"transaction-item\").each(($el) => {\r\r\n  // For each transaction, check that the sender or receiver is in the user's contacts\r\r\n  cy.wrap($el)\r\r\n    .invoke(\"attr\", \"data-test-transaction-id\")\r\r\n    .then((transactionId) => {\r\r\n      // Fetch transaction details from the backend via Cypress task or API if needed\r\r\n      // Here, we assume the UI displays the contact's name or username in the transaction item\r\r\n      cy.wrap($el)\r\r\n        .find('[data-test=\"transaction-participant\"]')\r\r\n        .invoke(\"text\")\r\r\n        .then((participantText) => {\r\r\n          // The participant should be one of the user's contacts\r\r\n          // ctx.user is the logged-in user, ctx.allUsers contains all users\r\r\n          // Find the contact IDs for the user\r\r\n          cy.task(\"getContactsByUserId\", ctx.user.id).then((contacts: Contact[]) => {\r\r\n            const contactUserIds = contacts.map((c) => c.contactUserId);\r\r\n            // The participantText should match one of the contact users' names or usernames\r\r\n            const contactUsers = ctx.allUsers.filter((u) => contactUserIds.includes(u.id));\r\r\n            const matchesContact = contactUsers.some(\r\r\n              (u) =>\r\r\n                participantText.includes(u.firstName) ||\r\r\n                participantText.includes(u.lastName) ||\r\r\n                participantText.includes(u.username)\r\r\n            );\r\r\n            expect(matchesContact, \"transaction is with a contact\").to.be.true;\r\r\n          });\r\r\n        });\r\r\n    });\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 15:42:14.860",
    "output_file": "output_gpt_4_1\\notifications6.spec_response_gpt_4_1_20250616_154452.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications6.spec.txt",
    "requestTimeMs": 1750081334860,
    "responseTimeMs": 1750081344494,
    "durationMs": 9634,
    "testId": "notifications6",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Step 1: Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Step 2: Start a new transaction (request) to User C\n\n  cy.getBySelLike(\"new-transaction\").click();\n  cy.getBySel(\"user-list-search-input\").type(ctx.userC.firstName);\n  cy.getBySelLike(\"user-list-item\").contains(ctx.userC.firstName).click();\n\n  // Step 3: Fill out the request form\n\n  cy.getBySel(\"transaction-create-amount-input\").type(\"50\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Request from A to C\");\n  cy.getBySel(\"transaction-create-request-button\").click();\n\n  // Step 4: Wait for transaction to be created and notifications to be fetched\n\n  cy.wait(\"@createTransaction\");\n  cy.wait(\"@getNotifications\");\n\n  // Step 5: Log out User A and log in as User C to check notification\n\n  cy.logoutByXstate();\n  cy.loginByXstate(ctx.userC.username);\n\n  // Step 6: Open notifications and assert that a new request notification exists from User A\n\n  cy.getBySel(\"nav-notifications-tab\").click();\n  cy.wait(\"@getNotifications\");\n  cy.getBySelLike(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"requested\").and(\"contain\", \"50\");"
  },
  {
    "timestamp": "2025-06-16 15:45:09.070",
    "output_file": "output_gpt_4_1\\notifications3.spec_response_gpt_4_1_20250616_154747.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications3.spec.txt",
    "requestTimeMs": 1750081509070,
    "responseTimeMs": 1750081515032,
    "durationMs": 5962,
    "testId": "notifications3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// User A comments on a transaction of User B; User B gets notification that User A commented on their transaction\r\r\n\r\r\n// 1. User A logs in\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\n\r\r\n// 2. User A navigates to User B's profile or finds a transaction where User B is the receiver\r\r\ncy.database(\"filter\", \"transactions\", { receiverId: ctx.userB.id }).then((transactions: Transaction[]) => {\r\r\n  const transaction = transactions[0];\r\r\n  expect(transaction).to.exist;\r\r\n\r\r\n  // 3. User A comments on the transaction\r\r\n  cy.visit(`/transaction/${transaction.id}`);\r\r\n  cy.getBySel(\"transaction-comment-input\").type(\"Nice transaction, User B!\");\r\r\n  cy.getBySel(\"transaction-comment-submit\").click();\r\r\n  cy.wait(\"@postComment\");\r\r\n\r\r\n  // 4. User A logs out\r\r\n  cy.logoutByXstate();\r\r\n\r\r\n  // 5. User B logs in\r\r\n  cy.loginByXstate(ctx.userB.username);\r\r\n\r\r\n  // 6. User B checks notifications\r\r\n  cy.visit(\"/notifications\");\r\r\n  cy.wait(\"@getNotifications\");\r\r\n\r\r\n  // 7. Assert that User B received a notification about User A's comment\r\r\n  cy.getBySel(\"notification-list\")\r\r\n    .contains(`${ctx.userA.firstName} ${ctx.userA.lastName}`)\r\r\n    .should(\"exist\")\r\r\n    .and(\"contain\", \"commented on your transaction\");\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 15:48:03.245",
    "output_file": "output_gpt_4_1\\new-transaction6.spec_response_gpt_4_1_20250616_155041.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction6.spec.txt",
    "requestTimeMs": 1750081683245,
    "responseTimeMs": 1750081693468,
    "durationMs": 10223,
    "testId": "new-transaction6",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": ""
  },
  {
    "timestamp": "2025-06-16 15:50:57.136",
    "output_file": "output_gpt_4_1\\auth4.spec_response_gpt_4_1_20250616_155335.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth4.spec.txt",
    "requestTimeMs": 1750081857136,
    "responseTimeMs": 1750081869634,
    "durationMs": 12498,
    "testId": "auth4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should allow a visitor to sign-up, login, and logout\r\r\n\r\r\n// Step 1: Visit the sign-up page\r\r\ncy.visit(\"/signup\");\r\r\n\r\r\n// Step 2: Fill out the sign-up form with userInfo\r\r\ncy.getBySel(\"signup-first-name\").type(userInfo.firstName);\r\r\ncy.getBySel(\"signup-last-name\").type(userInfo.lastName);\r\r\ncy.getBySel(\"signup-username\").type(userInfo.username);\r\r\ncy.getBySel(\"signup-password\").type(userInfo.password);\r\r\ncy.getBySel(\"signup-confirmPassword\").type(userInfo.password);\r\r\n\r\r\n// Step 3: Submit the sign-up form\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\n\r\r\n// Step 4: Wait for the signup request and assert successful signup\r\r\ncy.wait(\"@signup\").its(\"response.statusCode\").should(\"eq\", 201);\r\r\n\r\r\n// Step 5: Fill out the onboarding bank account form\r\r\ncy.getBySel(\"bankaccount-bankName-input\").type(bankAccountInfo.bankName);\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").type(bankAccountInfo.accountNumber);\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").type(bankAccountInfo.routingNumber);\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n// Step 6: Assert that the user is redirected to the home page and is logged in\r\r\ncy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\r\r\ncy.getBySel(\"sidenav-username\").should(\"contain\", userInfo.username);\r\r\n\r\r\n// Step 7: Log out\r\r\nif (isMobile()) {\r\r\n  cy.getBySel(\"sidenav-toggle\").click();\r\r\n}\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\n\r\r\n// Step 8: Assert that the user is redirected to the sign-in page\r\r\ncy.url().should(\"include\", \"/signin\");\r\r\ncy.getBySel(\"signin-username\").should(\"be.visible\");"
  },
  {
    "timestamp": "2025-06-16 15:53:51.177",
    "output_file": "output_gpt_4_1\\transaction-feeds10.spec_response_gpt_4_1_20250616_155629.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds10.spec.txt",
    "requestTimeMs": 1750082031177,
    "responseTimeMs": 1750082037417,
    "durationMs": 6240,
    "testId": "transaction-feeds10",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// first five items belong to contacts in public feed\r\r\ncy.getBySel(feedViews.public.tab).click();\r\r\ncy.wait(`@${feedViews.public.routeAlias}`);\r\r\n\r\r\n// Wait for the feed to load and ensure at least 5 items are present\r\r\ncy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 4);\r\r\n\r\r\n// Get the user's contact IDs from the database\r\r\ncy.database(\"filter\", \"contacts\", { userId: ctx.user.id }).then((contacts: Contact[]) => {\r\r\n  const contactIds = contacts.map((c) => c.contactUserId);\r\r\n\r\r\n  // For the first five transaction items, assert that either the sender or receiver is a contact\r\r\n  cy.getBySelLike(\"transaction-item\").each(($el, idx) => {\r\r\n    if (idx < 5) {\r\r\n      cy.wrap($el)\r\r\n        .invoke(\"attr\", \"data-test-transaction-sender-id\")\r\r\n        .then((senderId) => {\r\r\n          cy.wrap($el)\r\r\n            .invoke(\"attr\", \"data-test-transaction-receiver-id\")\r\r\n            .then((receiverId) => {\r\r\n              expect(\r\r\n                contactIds.includes(senderId) || contactIds.includes(receiverId),\r\r\n                `Transaction ${idx + 1} sender or receiver should be a contact`\r\r\n              ).to.be.true;\r\r\n            });\r\r\n        });\r\r\n    }\r\r\n  });\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 15:56:45.414",
    "output_file": "output_gpt_4_1\\new-transaction1.spec_response_gpt_4_1_20250616_155923.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction1.spec.txt",
    "requestTimeMs": 1750082205414,
    "responseTimeMs": 1750082212556,
    "durationMs": 7142,
    "testId": "new-transaction1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// navigates to the new transaction form, selects a user and submits a transaction payment\r\r\ncy.getBySelLike(\"new-transaction\").click(); // Open new transaction form\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Select the contact user as recipient\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n// Enter payment amount and description from userInfo\r\r\ncy.getBySel(\"amount-input\").type(\"35\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Sushi dinner 🍣\");\r\r\n\r\r\n// Select \"Pay\" option (assuming button or tab)\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\n\r\r\n// Wait for transaction to be created and assert success\r\r\ncy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 201);\r\r\n\r\r\n// Assert that the transaction appears in the personal transactions feed\r\r\ncy.getBySel(\"alert-bar-success\").should(\"be.visible\");\r\r\ncy.getBySelLike(\"transaction-item\").should(\"exist\").and(\"contain\", \"Sushi dinner 🍣\");"
  },
  {
    "timestamp": "2025-06-16 15:59:39.198",
    "output_file": "output_gpt_4_1\\new-transaction5.spec_response_gpt_4_1_20250616_160217.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction5.spec.txt",
    "requestTimeMs": 1750082379198,
    "responseTimeMs": 1750082387322,
    "durationMs": 8124,
    "testId": "new-transaction5",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// it(\"submits a transaction request and accepts the request for the receiver\", () => { ... })\r\r\n\r\r\n// 1. Navigate to the new transaction form and select a contact to request money from\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// 2. Search and select the contact (receiver)\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n// 3. Fill out the transaction request form with provided userInfo.requestTransactions[0]\r\r\ncy.getBySel(\"transaction-create-amount-input\").type(\"95\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\r\r\n\r\r\n// 4. Submit the request\r\r\ncy.getBySel(\"transaction-create-submit-request\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// 5. Assert that the request was submitted and confirmation is shown\r\r\ncy.getBySel(\"alert-bar-success\").should(\"contain\", \"requested\");\r\r\n\r\r\n// 6. Log out and log in as the contact (receiver)\r\r\ncy.logoutByXstate();\r\r\ncy.loginByXstate(ctx.contact!.username);\r\r\n\r\r\n// 7. Go to personal transactions and find the pending request\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.wait(\"@personalTransactions\");\r\r\ncy.getBySelLike(\"transaction-item\")\r\r\n  .contains(\"Fancy Hotel 🏨\")\r\r\n  .parents(\"[data-test^=transaction-item]\")\r\r\n  .as(\"pendingRequest\");\r\r\n\r\r\n// 8. Open the transaction details\r\r\ncy.get(\"@pendingRequest\").click();\r\r\ncy.wait(\"@getTransaction\");\r\r\n\r\r\n// 9. Accept the request\r\r\ncy.getBySel(\"transaction-accept-request\").click();\r\r\ncy.wait(\"@updateTransaction\");\r\r\n\r\r\n// 10. Assert that the transaction status is updated and confirmation is shown\r\r\ncy.getBySel(\"alert-bar-success\").should(\"contain\", \"accepted\");\r\r\ncy.getBySel(\"transaction-detail-status\").should(\"contain\", \"accepted\");"
  },
  {
    "timestamp": "2025-06-16 16:02:33.337",
    "output_file": "output_gpt_4_1\\notifications4.spec_response_gpt_4_1_20250616_160511.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications4.spec.txt",
    "requestTimeMs": 1750082553337,
    "responseTimeMs": 1750082563141,
    "durationMs": 9804,
    "testId": "notifications4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction\r\r\ncy.loginByXstate(ctx.userC.username);\r\r\n// Step 1: User C creates a transaction with User B (User B as receiver)\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\r\r\ncy.getBySel(\"amount-input\").type(\"50\");\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\").then((interception) => {\r\r\n  const transactionId = interception.response?.body.id;\r\r\n  // Step 2: User C logs out, User A logs in\r\r\n  cy.switchUserByXstate(ctx.userA.username);\r\r\n  // Step 3: User A comments on the transaction (simulate User C commenting on a transaction between A and B)\r\r\n  cy.visit(`/transaction/${transactionId}`);\r\r\n  cy.getBySel(\"transaction-comment-input\").type(\"Nice transaction from C!\");\r\r\n  cy.getBySel(\"transaction-comment-submit\").click();\r\r\n  cy.wait(\"@postComment\");\r\r\n  // Step 4: User B logs in and checks notifications\r\r\n  cy.switchUserByXstate(ctx.userB.username);\r\r\n  cy.getBySel(\"nav-notifications-tab\").click();\r\r\n  cy.wait(\"@getNotifications\");\r\r\n  cy.getBySelLike(\"notification-list-item\")\r\r\n    .should(\"contain\", ctx.userC.firstName)\r\r\n    .and(\"contain\", \"commented on your transaction\");\r\r\n  // Step 5: User A checks notifications\r\r\n  cy.switchUserByXstate(ctx.userA.username);\r\r\n  cy.getBySel(\"nav-notifications-tab\").click();\r\r\n  cy.wait(\"@getNotifications\");\r\r\n  cy.getBySelLike(\"notification-list-item\")\r\r\n    .should(\"contain\", ctx.userC.firstName)\r\r\n    .and(\"contain\", \"commented on your transaction\");\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 16:05:27.579",
    "output_file": "output_gpt_4_1\\auth3.spec_response_gpt_4_1_20250616_160805.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth3.spec.txt",
    "requestTimeMs": 1750082727579,
    "responseTimeMs": 1750082735137,
    "durationMs": 7558,
    "testId": "auth3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should remember a user for 30 days after login\r\r\n// 1. Sign up a new user\r\r\ncy.visit(\"/signup\");\r\r\ncy.getBySel(\"signup-first-name\").type(userInfo.firstName);\r\r\ncy.getBySel(\"signup-last-name\").type(userInfo.lastName);\r\r\ncy.getBySel(\"signup-username\").type(userInfo.username);\r\r\ncy.getBySel(\"signup-password\").type(userInfo.password);\r\r\ncy.getBySel(\"signup-confirmPassword\").type(userInfo.password);\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.wait(\"@signup\");\r\r\n\r\r\n// 2. Create a bank account (required after signup)\r\r\ncy.getBySel(\"bankaccount-bankName-input\").type(bankAccountInfo.bankName);\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").type(bankAccountInfo.accountNumber);\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").type(bankAccountInfo.routingNumber);\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\ncy.wait(\"@gqlCreateBankAccountMutation\");\r\r\n\r\r\n// 3. Log out\r\r\ncy.getBySel(\"sidenav-signout\").click();\r\r\ncy.url().should(\"include\", \"/signin\");\r\r\n\r\r\n// 4. Log in with \"Remember Me\" checked\r\r\ncy.getBySel(\"signin-username\").type(userInfo.username);\r\r\ncy.getBySel(\"signin-password\").type(userInfo.password);\r\r\ncy.getBySel(\"signin-remember-me\").find(\"input\").check();\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\n\r\r\n// 5. Assert user is redirected to home and session persists\r\r\ncy.url().should(\"eq\", `${window.location.origin}/`);\r\r\ncy.getBySel(\"sidenav-username\").should(\"contain\", userInfo.username);\r\r\n\r\r\n// 6. Simulate browser restart by clearing cookies but keeping localStorage/sessionStorage\r\r\ncy.clearCookies();\r\r\ncy.reload();\r\r\n\r\r\n// 7. Assert user is still logged in after reload (session persists)\r\r\ncy.getBySel(\"sidenav-username\").should(\"contain\", userInfo.username);"
  },
  {
    "timestamp": "2025-06-16 16:08:21.738",
    "output_file": "output_gpt_4_1\\notifications5.spec_response_gpt_4_1_20250616_161059.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications5.spec.txt",
    "requestTimeMs": 1750082901738,
    "responseTimeMs": 1750082909804,
    "durationMs": 8066,
    "testId": "notifications5",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Step 1: Log in as User A\n\n  cy.loginByXstate(ctx.userA.username);\n\n  // Step 2: Start a new transaction\n\n  cy.getBySelLike(\"new-transaction\").click();\n  cy.wait(\"@allUsers\");\n\n  // Step 3: Search and select User B as the recipient\n\n  cy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\n  cy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\n\n  // Step 4: Enter payment details\n\n  cy.getBySel(\"amount-input\").type(\"25\");\n  cy.getBySel(\"transaction-create-description-input\").type(\"Test payment from User A to User B\");\n\n  // Step 5: Submit the payment\n\n  cy.getBySel(\"transaction-create-submit-payment\").click();\n  cy.wait(\"@createTransaction\");\n\n  // Step 6: Assert that the transaction was successful\n\n  cy.getBySel(\"alert-bar-success\").should(\"be.visible\").and(\"contain\", \"Transaction Submitted!\");\n\n  // Step 7: Log out User A\n\n  cy.logoutByXstate();\n\n  // Step 8: Log in as User B to check for notification\n\n  cy.loginByXstate(ctx.userB.username);\n\n  // Step 9: Open notifications\n\n  if (isMobile()) {\n    cy.getBySel(\"sidenav-toggle\").click();\n  }\n  cy.getBySel(\"nav-top-notifications-link\").click();\n  cy.wait(\"@getNotifications\");\n\n  // Step 10: Assert that User B received a notification about the payment from User A\n\n  cy.getBySelLike(\"notification-list-item\").should(\"contain\", ctx.userA.firstName).and(\"contain\", \"paid you\").and(\"contain\", \"25\");"
  },
  {
    "timestamp": "2025-06-16 16:11:15.958",
    "output_file": "output_gpt_4_1\\transaction-feeds7.spec_response_gpt_4_1_20250616_161353.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds7.spec.txt",
    "requestTimeMs": 1750083075958,
    "responseTimeMs": 1750083084624,
    "durationMs": 8666,
    "testId": "transaction-feeds7",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Select the public feed tab\n\n  cy.getBySel(feedViews.public.tab).click();\n  cy.wait(`@${feedViews.public.routeAlias}`);\n\n  // Open the amount range filter UI (assume a button or input exists)\n\n  cy.getBySel(\"transaction-amount-range-min\").clear().type(dollarAmountRange.min);\n  cy.getBySel(\"transaction-amount-range-max\").clear().type(dollarAmountRange.max);\n\n  // Apply the filter\n\n  cy.getBySel(\"apply-amount-range-filter\").click();\n\n  // Assert that all visible transactions have amounts within the specified range\n\n  cy.getBySelLike(\"transaction-item\").each($el => {\n    cy.wrap($el).find(\"[data-test=transaction-amount]\").invoke(\"text\").then(amountText => {\n      // Remove currency symbol and commas, then parse as float\n\n      const amount = parseFloat(amountText.replace(/[^0-9.-]+/g, \"\"));\n      expect(amount).to.be.at.least(dollarAmountRange.min);\n      expect(amount).to.be.at.most(dollarAmountRange.max);\n    });\n  });"
  },
  {
    "timestamp": "2025-06-16 16:14:10.117",
    "output_file": "output_gpt_4_1\\transaction-view4.spec_response_gpt_4_1_20250616_161648.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view4.spec.txt",
    "requestTimeMs": 1750083250117,
    "responseTimeMs": 1750083256782,
    "durationMs": 6665,
    "testId": "transaction-view4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// accepts a transaction request\r\r\n// 1. Visit the transaction request details page\r\r\n// 2. Click the \"Accept\" button\r\r\n// 3. Wait for the transaction update API call\r\r\n// 4. Assert that the transaction status is updated and accept/reject buttons are no longer visible\r\r\ncy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\r\ncy.wait(\"@getTransaction\");\r\r\n\r\r\n// Click the \"Accept\" button to accept the transaction request\r\r\ncy.getBySel(\"accept-request\").should(\"be.visible\").click();\r\r\n\r\r\n// Wait for the PATCH request to update the transaction\r\r\ncy.wait(\"@updateTransaction\");\r\r\n\r\r\n// Assert that the accept/reject buttons are no longer visible\r\r\ncy.getBySel(\"accept-request\").should(\"not.exist\");\r\r\ncy.getBySel(\"reject-request\").should(\"not.exist\");\r\r\n\r\r\n// Assert that the transaction status is updated to \"accepted\"\r\r\ncy.getBySel(\"transaction-status\").should(\"contain.text\", \"accepted\");"
  },
  {
    "timestamp": "2025-06-16 16:17:04.331",
    "output_file": "output_gpt_4_1\\bankaccounts3.spec_response_gpt_4_1_20250616_161942.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\bankaccounts3.spec.txt",
    "requestTimeMs": 1750083424331,
    "responseTimeMs": 1750083433114,
    "durationMs": 8783,
    "testId": "bankaccounts3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"soft deletes a bank account\"\r\r\n//\r\r\n// This test will:\r\r\n// 1. Create a new bank account for the logged-in user using the provided userInfo.\r\r\n// 2. Soft delete the created bank account.\r\r\n// 3. Assert that the deleted bank account is marked as deleted in the UI.\r\r\n\r\r\nconst userInfo = {\r\r\n  bankName: \"The Best Bank\",\r\r\n  routingNumber: \"987654321\",\r\r\n  accountNumber: \"123456789\"\r\r\n};\r\r\n\r\r\n// Step 1: Create a new bank account\r\r\ncy.getBySel(\"bankaccount-new\").click();\r\r\ncy.getBySel(\"bankaccount-bankName-input\").type(userInfo.bankName);\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").type(userInfo.routingNumber);\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").type(userInfo.accountNumber);\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n// Wait for the bank account to be created and appear in the list\r\r\ncy.wait(\"@gqlCreateBankAccountMutation\");\r\r\ncy.getBySel(\"bankaccount-list-item\")\r\r\n  .should(\"contain\", userInfo.bankName)\r\r\n  .and(\"contain\", userInfo.accountNumber);\r\r\n\r\r\n// Step 2: Soft delete the created bank account\r\r\ncy.getBySel(\"bankaccount-list-item\")\r\r\n  .contains(userInfo.bankName)\r\r\n  .parents(\"[data-test=bankaccount-list-item]\")\r\r\n  .within(() => {\r\r\n    cy.getBySel(\"bankaccount-delete\").click();\r\r\n  });\r\r\n\r\r\n// Wait for the delete mutation\r\r\ncy.wait(\"@gqlDeleteBankAccountMutation\");\r\r\n\r\r\n// Step 3: Assert that the bank account is marked as deleted (should not be visible in the list)\r\r\ncy.getBySel(\"bankaccount-list-item\")\r\r\n  .should(\"not.contain\", userInfo.bankName);"
  },
  {
    "timestamp": "2025-06-16 16:19:58.573",
    "output_file": "output_gpt_4_1\\transaction-view5.spec_response_gpt_4_1_20250616_162236.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view5.spec.txt",
    "requestTimeMs": 1750083598573,
    "responseTimeMs": 1750083605737,
    "durationMs": 7164,
    "testId": "transaction-view5",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"rejects a transaction request\"\r\r\n//\r\r\n// This test simulates the user rejecting a pending transaction request and verifies the UI and backend update.\r\r\n\r\r\ncy.getBySelLike(\"transaction-item\")\r\r\n  .contains(ctx.transactionRequest!.description)\r\r\n  .click(); // Open the transaction request\r\r\n\r\r\ncy.wait(\"@getTransaction\");\r\r\n\r\r\n// Click the \"Reject\" button\r\r\ncy.getBySel(\"transaction-reject-request\").should(\"be.visible\").click();\r\r\n\r\r\n// Wait for the PATCH request to update the transaction\r\r\ncy.wait(\"@updateTransaction\").its(\"response.statusCode\").should(\"eq\", 200);\r\r\n\r\r\n// Assert that the transaction status is updated in the UI\r\r\ncy.getBySel(\"transaction-request-status\")\r\r\n  .should(\"contain\", \"rejected\")\r\r\n  .and(\"be.visible\");\r\r\n\r\r\n// Optionally, verify that accept/reject buttons are no longer visible\r\r\ncy.getBySel(\"transaction-accept-request\").should(\"not.exist\");\r\r\ncy.getBySel(\"transaction-reject-request\").should(\"not.exist\");"
  },
  {
    "timestamp": "2025-06-16 16:22:52.747",
    "output_file": "output_gpt_4_1\\transaction-feeds6.spec_response_gpt_4_1_20250616_162530.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds6.spec.txt",
    "requestTimeMs": 1750083772747,
    "responseTimeMs": 1750083780392,
    "durationMs": 7645,
    "testId": "transaction-feeds6",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// does not show public transactions for out of range date limits\r\r\n// This test verifies that when a date range is selected that does not include any transactions, the feed is empty.\r\r\ncy.getBySel(feedViews.public.tab).click();\r\r\ncy.wait(`@${feedViews.public.routeAlias}`);\r\r\n\r\r\n// Pick a date range far in the past to ensure no transactions are shown\r\r\nconst startDate = new Date(\"2000-01-01\");\r\r\nconst endDate = new Date(\"2000-01-02\");\r\r\ncy.pickDateRange(startDate, endDate);\r\r\n\r\r\n// Assert that no transaction items are visible\r\r\ncy.getBySelLike(\"transaction-item\").should(\"have.length\", 0);"
  },
  {
    "timestamp": "2025-06-16 16:25:46.753",
    "output_file": "output_gpt_4_1\\transaction-feeds5.spec_response_gpt_4_1_20250616_162824.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds5.spec.txt",
    "requestTimeMs": 1750083946753,
    "responseTimeMs": 1750083961641,
    "durationMs": 14888,
    "testId": "transaction-feeds5",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Select the public feed tab\n\n  cy.getBySel(\"public-tab\").click();\n  cy.wait(\"@publicTransactions\");\n\n  // Open the date range picker\n\n  cy.getBySel(\"date-range-picker\").click();\n\n  // Pick a date range (e.g., last 7 days)\n\n  const today = new Date();\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(today.getDate() - 7);\n  cy.pickDateRange(sevenDaysAgo, today);\n\n  // Assert that all visible transactions are within the selected date range\n\n  cy.getBySelLike(\"transaction-item\").each($el => {\n    cy.wrap($el).find(\"[data-test=transaction-date]\").invoke(\"text\").then(dateText => {\n      const txDate = new Date(dateText);\n      expect(txDate >= sevenDaysAgo && txDate <= today).to.be.true;\n    });\n  });"
  },
  {
    "timestamp": "2025-06-16 16:28:40.948",
    "output_file": "output_gpt_4_1\\transaction-view2.spec_response_gpt_4_1_20250616_163118.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view2.spec.txt",
    "requestTimeMs": 1750084120948,
    "responseTimeMs": 1750084128894,
    "durationMs": 7946,
    "testId": "transaction-view2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// likes a transaction\r\r\n// 1. Visit a transaction detail page\r\r\n// 2. Click the like button\r\r\n// 3. Assert that the like count increases and the button is active\r\r\n\r\r\ncy.database(\"find\", \"transactions\", { receiverId: ctx.authenticatedUser!.id }).then((transaction: Transaction) => {\r\r\n  // Visit the transaction detail page\r\r\n  cy.visit(`/transaction/${transaction.id}`);\r\r\n  cy.wait(\"@getTransaction\");\r\r\n\r\r\n  // Get the initial like count\r\r\n  cy.getBySel(\"transaction-like-count\")\r\r\n    .invoke(\"text\")\r\r\n    .then((initialLikeCountText) => {\r\r\n      const initialLikeCount = parseInt(initialLikeCountText, 10) || 0;\r\r\n\r\r\n      // Click the like button\r\r\n      cy.getBySel(\"transaction-like-button\").click();\r\r\n\r\r\n      // Assert the like button is active\r\r\n      cy.getBySel(\"transaction-like-button\").should(\"have.class\", \"MuiIconButton-colorPrimary\");\r\r\n\r\r\n      // Assert the like count increases by 1\r\r\n      cy.getBySel(\"transaction-like-count\").should(($span) => {\r\r\n        const newCount = parseInt($span.text(), 10) || 0;\r\r\n        expect(newCount).to.eq(initialLikeCount + 1);\r\r\n      });\r\r\n    });\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 16:31:35.098",
    "output_file": "output_gpt_4_1\\bankaccounts2.spec_response_gpt_4_1_20250616_163413.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\bankaccounts2.spec.txt",
    "requestTimeMs": 1750084295098,
    "responseTimeMs": 1750084305560,
    "durationMs": 10462,
    "testId": "bankaccounts2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should display bank account form errors\r\r\n// 1. Navigate to the bank accounts page.\r\r\n// 2. Click to add a new bank account.\r\r\n// 3. Attempt to submit the form with empty fields and assert validation errors.\r\r\n// 4. Fill in invalid routing/account numbers and assert validation errors.\r\r\n// 5. Fill in only some fields and assert validation errors.\r\r\n\r\r\ncy.visit(\"/bankaccounts\");\r\r\n\r\r\n// Open the add bank account form\r\r\ncy.getBySel(\"bankaccount-new\").click();\r\r\n\r\r\n// Attempt to submit with all fields empty\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\n// Assert validation errors for all fields\r\r\ncy.getBySel(\"bankaccount-bankName-input-helper-text\").should(\"contain\", \"Enter a bank name\");\r\r\ncy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank routing number\");\r\r\ncy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank account number\");\r\r\n\r\r\n// Enter invalid routing number (too short)\r\r\ncy.getBySel(\"bankaccount-bankName-input\").type(\"A\");\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").type(\"123\");\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").type(\"123\");\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\ncy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Must contain a valid routing number\");\r\r\ncy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Must contain a valid account number\");\r\r\n\r\r\n// Enter valid bank name, valid routing number, but leave account number empty\r\r\ncy.getBySel(\"bankaccount-bankName-input\").clear().type(\"The Best Bank\");\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").clear().type(\"987654321\");\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").clear();\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\ncy.getBySel(\"bankaccount-accountNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank account number\");\r\r\n\r\r\n// Enter valid account number, but leave routing number empty\r\r\ncy.getBySel(\"bankaccount-routingNumber-input\").clear();\r\r\ncy.getBySel(\"bankaccount-accountNumber-input\").clear().type(\"123456789\");\r\r\ncy.getBySel(\"bankaccount-submit\").click();\r\r\n\r\r\ncy.getBySel(\"bankaccount-routingNumber-input-helper-text\").should(\"contain\", \"Enter a valid bank routing number\");"
  },
  {
    "timestamp": "2025-06-16 16:34:29.280",
    "output_file": "output_gpt_4_1\\auth2.spec_response_gpt_4_1_20250616_163707.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth2.spec.txt",
    "requestTimeMs": 1750084469280,
    "responseTimeMs": 1750084474793,
    "durationMs": 5513,
    "testId": "auth2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should redirect to the home page after login\r\r\n// 1. Visit the sign-in page\r\r\ncy.visit(\"/signin\");\r\r\n\r\r\n// 2. Fill in the username and password fields with valid credentials\r\r\ncy.get(\"[data-test=signin-username]\").type(\"PainterJoy90\");\r\r\ncy.get(\"[data-test=signin-password]\").type(\"s3cret\");\r\r\n\r\r\n// 3. Submit the login form\r\r\ncy.get(\"[data-test=signin-submit]\").click();\r\r\n\r\r\n// 4. Assert that the user is redirected to the home page\r\r\ncy.location(\"pathname\").should(\"eq\", \"/\");\r\r\n\r\r\n// 5. Assert that the user's name appears in the sidebar (logged in)\r\r\ncy.get(\"[data-test=sidenav-username]\").should(\"contain\", \"PainterJoy90\");"
  },
  {
    "timestamp": "2025-06-16 16:37:23.534",
    "output_file": "output_gpt_4_1\\user-settings3.spec_response_gpt_4_1_20250616_164001.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\user-settings3.spec.txt",
    "requestTimeMs": 1750084643534,
    "responseTimeMs": 1750084652365,
    "durationMs": 8831,
    "testId": "user-settings3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"updates first name, last name, email and phone number\"\r\r\nconst userInfo = {\r\r\n  firstName: \"New First Name\",\r\r\n  lastName: \"New Last Name\",\r\r\n  email: \"email@email.com\",\r\r\n  phoneNumber: \"6155551212\",\r\r\n};\r\r\n\r\r\n// Step 1: Fill out the user settings form with new values\r\r\ncy.getBySel(\"user-settings-firstName-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.firstName);\r\r\ncy.getBySel(\"user-settings-lastName-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.lastName);\r\r\ncy.getBySel(\"user-settings-email-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.email);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\")\r\r\n  .clear()\r\r\n  .type(userInfo.phoneNumber);\r\r\n\r\r\n// Step 2: Submit the form\r\r\ncy.getBySel(\"user-settings-submit\").click();\r\r\n\r\r\n// Step 3: Wait for the PATCH request and assert it was successful\r\r\ncy.wait(\"@updateUser\").its(\"response.statusCode\").should(\"eq\", 200);\r\r\n\r\r\n// Step 4: Assert that the form fields now show the updated values\r\r\ncy.getBySel(\"user-settings-firstName-input\").should(\"have.value\", userInfo.firstName);\r\r\ncy.getBySel(\"user-settings-lastName-input\").should(\"have.value\", userInfo.lastName);\r\r\ncy.getBySel(\"user-settings-email-input\").should(\"have.value\", userInfo.email);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").should(\"have.value\", userInfo.phoneNumber);\r\r\n\r\r\n// Step 5: Optionally, check for a success notification or message\r\r\ncy.contains(/settings updated|success/i).should(\"exist\");"
  },
  {
    "timestamp": "2025-06-16 16:40:17.607",
    "output_file": "output_gpt_4_1\\auth1.spec_response_gpt_4_1_20250616_164255.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth1.spec.txt",
    "requestTimeMs": 1750084817607,
    "responseTimeMs": 1750084824282,
    "durationMs": 6675,
    "testId": "auth1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should redirect unauthenticated user to signin page\r\r\n// 1. Visit a protected route (e.g., home page).\r\r\n// 2. Assert that the user is redirected to the signin page.\r\r\ncy.visit(\"/\");\r\r\ncy.location(\"pathname\").should(\"eq\", \"/signin\");"
  },
  {
    "timestamp": "2025-06-16 16:43:11.822",
    "output_file": "output_gpt_4_1\\bankaccounts1.spec_response_gpt_4_1_20250616_164549.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\bankaccounts1.spec.txt",
    "requestTimeMs": 1750084991822,
    "responseTimeMs": 1750085000048,
    "durationMs": 8226,
    "testId": "bankaccounts1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Step 1: Navigate to the add bank account form\n\n  cy.getBySel(\"bankaccount-new\").click();\n\n  // Step 2: Fill out the bank account form with provided userInfo\n\n  cy.getBySel(\"bankaccount-bankName-input\").type(\"The Best Bank\");\n  cy.getBySel(\"bankaccount-routingNumber-input\").type(\"987654321\");\n  cy.getBySel(\"bankaccount-accountNumber-input\").type(\"123456789\");\n\n  // Step 3: Submit the form\n\n  cy.getBySel(\"bankaccount-submit\").click();\n\n  // Step 4: Wait for the GraphQL mutation and notifications\n\n  cy.wait(\"@gqlCreateBankAccountMutation\");\n  cy.wait(\"@getNotifications\");\n\n  // Step 5: Assert that the new bank account appears in the list\n\n  cy.getBySel(\"bankaccount-list\").should(\"contain\", \"The Best Bank\");"
  },
  {
    "timestamp": "2025-06-16 16:46:05.951",
    "output_file": "output_gpt_4_1\\transaction-view3.spec_response_gpt_4_1_20250616_164843.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view3.spec.txt",
    "requestTimeMs": 1750085165951,
    "responseTimeMs": 1750085173486,
    "durationMs": 7535,
    "testId": "transaction-view3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Ensure a transaction request is available\n\n  expect(ctx.transactionRequest).to.exist;\n\n  // Visit the transaction view page\n\n  cy.visit(`/transaction/${ctx.transactionRequest!.id}`);\n  cy.wait(\"@getTransaction\");\n\n  // Wait for the comment input to be visible\n\n  cy.getBySel(\"transaction-comment-input\").should(\"be.visible\");\n\n  // Type a comment and submit\n\n  const commentText = \"This is a Cypress test comment\";\n  cy.getBySel(\"transaction-comment-input\").type(commentText);\n  cy.getBySel(\"transaction-comment-submit\").click();\n\n  // Assert the comment appears in the comment list\n\n  cy.getBySel(\"transaction-comments-list\").should(\"contain.text\", commentText).and(\"contain.text\", ctx.authenticatedUser!.firstName);\n\n  // Optionally, ensure the input is cleared after submit\n\n  cy.getBySel(\"transaction-comment-input\").should(\"have.value\", \"\");"
  },
  {
    "timestamp": "2025-06-16 16:48:59.860",
    "output_file": "output_gpt_4_1\\notifications2.spec_response_gpt_4_1_20250616_165137.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications2.spec.txt",
    "requestTimeMs": 1750085339860,
    "responseTimeMs": 1750085349623,
    "durationMs": 9763,
    "testId": "notifications2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction\r\r\n\r\r\n// 1. User A logs in and sends a payment to User B\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\r\r\ncy.getBySel(\"amount-input\").type(\"10\");\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\").its(\"response.statusCode\").should(\"eq\", 201);\r\r\n\r\r\n// 2. Get the transaction ID of the new transaction between User A and User B\r\r\ncy.wait(\"@personalTransactions\");\r\r\ncy.getBySel(\"transaction-item\").first().invoke(\"attr\", \"data-test\").then((transactionTestAttr) => {\r\r\n  const transactionId = transactionTestAttr?.replace(\"transaction-item-\", \"\");\r\r\n  expect(transactionId).to.exist;\r\r\n\r\r\n  // 3. User C logs in and likes the transaction\r\r\n  cy.switchUserByXstate(ctx.userC.username);\r\r\n  cy.getBySel(\"nav-personal-tab\").click();\r\r\n  cy.getBySel(`transaction-item-${transactionId}`).click();\r\r\n  cy.getBySel(\"like-button\").click();\r\r\n\r\r\n  // 4. User A logs in and checks for notification\r\r\n  cy.switchUserByXstate(ctx.userA.username);\r\r\n  cy.getBySel(\"nav-notifications-tab\").click();\r\r\n  cy.wait(\"@getNotifications\");\r\r\n  cy.getBySel(\"notification-list\").should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\r\r\n\r\r\n  // 5. User B logs in and checks for notification\r\r\n  cy.switchUserByXstate(ctx.userB.username);\r\r\n  cy.getBySel(\"nav-notifications-tab\").click();\r\r\n  cy.wait(\"@getNotifications\");\r\r\n  cy.getBySel(\"notification-list\").should(\"contain\", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 16:51:54.053",
    "output_file": "output_gpt_4_1\\bankaccounts4.spec_response_gpt_4_1_20250616_165431.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\bankaccounts4.spec.txt",
    "requestTimeMs": 1750085514053,
    "responseTimeMs": 1750085521437,
    "durationMs": 7384,
    "testId": "bankaccounts4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// it(\"renders an empty bank account list state with onboarding modal\", () => { });\r\r\n\r\r\n/*\r\r\n  Test: renders an empty bank account list state with onboarding modal\r\r\n  - Verifies that when the user has no bank accounts, the empty state and onboarding modal are shown.\r\r\n*/\r\r\ncy.visit(\"/bankaccounts\");\r\r\n\r\r\n// Wait for the bank accounts list to load and ensure it's empty\r\r\ncy.getBySel(\"bankaccount-list\").should(\"exist\");\r\r\ncy.getBySel(\"bankaccount-list-item\").should(\"have.length\", 0);\r\r\n\r\r\n// Assert that the onboarding modal is visible\r\r\ncy.getBySel(\"user-onboarding-dialog\").should(\"be.visible\");\r\r\n\r\r\n// Optionally, check for onboarding modal content\r\r\ncy.getBySel(\"user-onboarding-dialog-title\").should(\"contain\", \"Get Started\");\r\r\n\r\r\n// Close the onboarding modal if needed for further tests\r\r\ncy.getBySel(\"user-onboarding-next\").click();\r\r\ncy.getBySel(\"user-onboarding-dialog\").should(\"not.exist\");"
  },
  {
    "timestamp": "2025-06-16 16:54:48.195",
    "output_file": "output_gpt_4_1\\auth6.spec_response_gpt_4_1_20250616_165726.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth6.spec.txt",
    "requestTimeMs": 1750085688195,
    "responseTimeMs": 1750085698245,
    "durationMs": 10050,
    "testId": "auth6",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should display signup errors\r\r\n// 1. Visit the signup page\r\r\ncy.visit(\"/signup\");\r\r\n\r\r\n// 2. Try submitting the form with empty fields\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");\r\r\n\r\r\n// 3. Fill only some fields and submit\r\r\ncy.getBySel(\"signup-first-name\").type(userInfo.firstName);\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");\r\r\n\r\r\n// 4. Fill all fields except password and submit\r\r\ncy.getBySel(\"signup-last-name\").type(userInfo.lastName);\r\r\ncy.getBySel(\"signup-username\").type(userInfo.username);\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");\r\r\n\r\r\n// 5. Use an invalid password (e.g., too short)\r\r\ncy.getBySel(\"signup-password\").type(\"123\");\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");\r\r\n\r\r\n// 6. Use a valid password but an invalid username (e.g., already taken or invalid format)\r\r\ncy.getBySel(\"signup-password\").clear().type(userInfo.password);\r\r\ncy.getBySel(\"signup-username\").clear().type(\"in valid username!\");\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");\r\r\n\r\r\n// 7. Use a username that is already taken (simulate by signing up first, then again)\r\r\ncy.getBySel(\"signup-username\").clear().type(userInfo.username);\r\r\ncy.getBySel(\"signup-submit\").click();\r\r\ncy.wait(\"@signup\");\r\r\ncy.getBySel(\"signup-error\").should(\"be.visible\");"
  },
  {
    "timestamp": "2025-06-16 16:57:42.118",
    "output_file": "output_gpt_4_1\\transaction-feeds9.spec_response_gpt_4_1_20250616_170020.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds9.spec.txt",
    "requestTimeMs": 1750085862118,
    "responseTimeMs": 1750085869178,
    "durationMs": 7060,
    "testId": "transaction-feeds9",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Go to the \"mine\" feed tab\n\n  cy.getBySel(feedViews.personal.tab).click();\n  cy.wait(`@${feedViews.personal.routeAlias}`);\n\n  // Assert that each transaction item in the feed belongs to the logged-in user\n\n  cy.getBySelLike(\"transaction-item\").each($el => {\n    cy.wrap($el).find('[data-test=\"transaction-participants\"]').invoke(\"text\").then(text => {\n      // The user's full name should appear in the participants text\n\n      expect(text).to.include(ctx.user.firstName);\n      expect(text).to.include(ctx.user.lastName);\n    });\n  });\n\n  // Optionally, assert that the feed is not empty\n\n  cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 0);"
  },
  {
    "timestamp": "2025-06-16 17:00:36.286",
    "output_file": "output_gpt_4_1\\transaction-feeds3.spec_response_gpt_4_1_20250616_170314.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds3.spec.txt",
    "requestTimeMs": 1750086036286,
    "responseTimeMs": 1750086044521,
    "durationMs": 8235,
    "testId": "transaction-feeds3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// paginates public transaction feed\r\r\ncy.getBySel(feedViews.public.tab).click();\r\r\ncy.wait(`@${feedViews.public.routeAlias}`);\r\r\n// Assert that at least one transaction item is visible\r\r\ncy.getBySelLike(\"transaction-item\").should(\"exist\");\r\r\n// Scroll to bottom to trigger pagination\r\r\ncy.get(\"body\").then(($body) => {\r\r\n  if ($body.find('[data-test=\"transaction-list-pagination\"]').length) {\r\r\n    cy.getBySel(\"transaction-list-pagination\").scrollIntoView();\r\r\n    cy.getBySel(\"transaction-list-pagination\").should(\"be.visible\");\r\r\n    // Click next page if pagination button exists\r\r\n    cy.getBySel(\"transaction-list-pagination\").click();\r\r\n    cy.wait(`@${feedViews.public.routeAlias}`);\r\r\n    // Assert more items loaded\r\r\n    cy.getBySelLike(\"transaction-item\").should(\"have.length.greaterThan\", 1);\r\r\n  }\r\r\n});"
  },
  {
    "timestamp": "2025-06-16 17:03:30.517",
    "output_file": "output_gpt_4_1\\auth5.spec_response_gpt_4_1_20250616_170608.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\auth5.spec.txt",
    "requestTimeMs": 1750086210517,
    "responseTimeMs": 1750086216995,
    "durationMs": 6478,
    "testId": "auth5",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// should display login errors\r\r\n// 1. Attempt login with invalid username and valid password\r\r\ncy.visit(\"/signin\");\r\r\ncy.getBySel(\"signin-username\").type(\"invalidUserName\");\r\r\ncy.getBySel(\"signin-password\").type(userInfo.password);\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\ncy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\r\r\n\r\r\n// 2. Attempt login with valid username and invalid password\r\r\ncy.getBySel(\"signin-username\").clear().type(userInfo.username);\r\r\ncy.getBySel(\"signin-password\").clear().type(\"invalidPa$word\");\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\ncy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");\r\r\n\r\r\n// 3. Attempt login with valid username and another invalid password\r\r\ncy.getBySel(\"signin-username\").clear().type(userInfo.username);\r\r\ncy.getBySel(\"signin-password\").clear().type(\"INVALID\");\r\r\ncy.getBySel(\"signin-submit\").click();\r\r\ncy.getBySel(\"signin-error\").should(\"be.visible\").and(\"contain\", \"Username or password is invalid\");"
  },
  {
    "timestamp": "2025-06-16 17:06:24.617",
    "output_file": "output_gpt_4_1\\new-transaction4.spec_response_gpt_4_1_20250616_170902.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction4.spec.txt",
    "requestTimeMs": 1750086384617,
    "responseTimeMs": 1750086393059,
    "durationMs": 8442,
    "testId": "new-transaction4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"submits a transaction payment and verifies the deposit for the receiver\"\r\r\n//\r\r\n// This test submits a payment transaction from ctx.user to ctx.contact using the first paymentTransactions entry in userInfo,\r\r\n// then verifies that the transaction appears in the receiver's (contact's) transaction feed and that the amount matches.\r\r\n\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Step 1: Search and select the contact (receiver)\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n// Step 2: Fill out the payment form\r\r\ncy.getBySel(\"amount-input\").type(userInfo.paymentTransactions[0].amount.toString());\r\r\ncy.getBySel(\"transaction-create-description-input\").type(userInfo.paymentTransactions[0].description);\r\r\n\r\r\n// Step 3: Submit the payment\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Step 4: Assert success message and redirect to personal transactions\r\r\ncy.getBySel(\"alert-bar-success\").should(\"contain\", \"Transaction Submitted!\");\r\r\ncy.url().should(\"include\", \"/personal\");\r\r\n\r\r\n// Step 5: Switch to the receiver and verify the deposit\r\r\ncy.switchUserByXstate(ctx.contact!.username);\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.wait(\"@personalTransactions\");\r\r\n\r\r\n// Step 6: Assert the new transaction appears in the receiver's feed with correct amount and description\r\r\ncy.getBySelLike(\"transaction-item\")\r\r\n  .should(\"contain\", userInfo.paymentTransactions[0].description)\r\r\n  .and(\"contain\", Dinero({ amount: Number(userInfo.paymentTransactions[0].amount) * 100, currency: \"USD\" }).toFormat());"
  },
  {
    "timestamp": "2025-06-16 17:09:18.819",
    "output_file": "output_gpt_4_1\\transaction-feeds2.spec_response_gpt_4_1_20250616_171156.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds2.spec.txt",
    "requestTimeMs": 1750086558819,
    "responseTimeMs": 1750086567384,
    "durationMs": 8565,
    "testId": "transaction-feeds2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// renders transactions item variations in feed\r\r\n// This test will check that different transaction item types (payment, request, completed, pending, etc.) are rendered in the feed.\r\r\n\r\r\ncy.getBySel(\"public-tab\").click();\r\r\ncy.wait(\"@publicTransactions\");\r\r\n\r\r\n// Assert at least one transaction item is rendered\r\r\ncy.getBySelLike(\"transaction-item\").should(\"exist\");\r\r\n\r\r\n// Check for payment and request transaction types in the feed\r\r\ncy.getBySelLike(\"transaction-item\").each(($el) => {\r\r\n  cy.wrap($el).within(() => {\r\r\n    cy.get(\"[data-test^='transaction-type-']\").should(\"exist\");\r\r\n  });\r\r\n});\r\r\n\r\r\n// Optionally, check for at least one completed and one pending transaction\r\r\ncy.getBySelLike(\"transaction-item\")\r\r\n  .filter(\":contains('completed')\")\r\r\n  .should(\"exist\");\r\r\n\r\r\ncy.getBySelLike(\"transaction-item\")\r\r\n  .filter(\":contains('pending')\")\r\r\n  .should(\"exist\");"
  },
  {
    "timestamp": "2025-06-16 17:12:12.880",
    "output_file": "output_gpt_4_1\\user-settings1.spec_response_gpt_4_1_20250616_171450.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\user-settings1.spec.txt",
    "requestTimeMs": 1750086732880,
    "responseTimeMs": 1750086737804,
    "durationMs": 4924,
    "testId": "user-settings1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// renders the user settings form\r\r\ncy.getBySel(\"user-settings-form\").should(\"be.visible\");\r\r\n// Check that the form fields are populated with the current user's info\r\r\ncy.getBySel(\"user-settings-firstName\").should(\"have.value\").and(\"not.be.empty\");\r\r\ncy.getBySel(\"user-settings-lastName\").should(\"have.value\").and(\"not.be.empty\");\r\r\ncy.getBySel(\"user-settings-email\").should(\"have.value\").and(\"not.be.empty\");\r\r\ncy.getBySel(\"user-settings-phoneNumber\").should(\"have.value\").and(\"not.be.empty\");\r\r\ncy.getBySel(\"user-settings-save\").should(\"be.enabled\");"
  },
  {
    "timestamp": "2025-06-16 17:15:06.922",
    "output_file": "output_gpt_4_1\\transaction-view1.spec_response_gpt_4_1_20250616_171744.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-view1.spec.txt",
    "requestTimeMs": 1750086906922,
    "responseTimeMs": 1750086913329,
    "durationMs": 6407,
    "testId": "transaction-view1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// transactions navigation tabs are hidden on a transaction view page\r\r\n// 1. Visit a transaction detail page.\r\r\n// 2. Assert that the navigation tabs are not visible.\r\r\n\r\r\ncy.wrap(ctx.transactionRequest).should(\"exist\");\r\r\n\r\r\n// Visit the transaction detail page for the pending request\r\r\ncy.visit(`/transaction/${ctx.transactionRequest!.id}`);\r\r\ncy.wait(\"@getTransaction\");\r\r\n\r\r\n// Assert that the navigation tabs are not visible on the transaction view page\r\r\ncy.getBySel(\"nav-personal-tab\").should(\"not.exist\");\r\r\ncy.getBySel(\"nav-contacts-tab\").should(\"not.exist\");\r\r\ncy.getBySel(\"nav-public-tab\").should(\"not.exist\");"
  },
  {
    "timestamp": "2025-06-16 17:18:01.114",
    "output_file": "output_gpt_4_1\\transaction-feeds4.spec_response_gpt_4_1_20250616_172039.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\transaction-feeds4.spec.txt",
    "requestTimeMs": 1750087081114,
    "responseTimeMs": 1750087088453,
    "durationMs": 7339,
    "testId": "transaction-feeds4",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// Open the date range picker\n\n  cy.getBySel(\"date-range-picker\").click();\n\n  // Close the modal (simulate clicking the close button or outside the modal)\n\n  cy.get(\"body\").click(0, 0);\n\n  // Assert that the modal is closed\n\n  cy.getBySel(\"date-range-picker-modal\").should(\"not.exist\");"
  },
  {
    "timestamp": "2025-06-16 17:20:55.273",
    "output_file": "output_gpt_4_1\\new-transaction2.spec_response_gpt_4_1_20250616_172333.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction2.spec.txt",
    "requestTimeMs": 1750087255273,
    "responseTimeMs": 1750087262047,
    "durationMs": 6774,
    "testId": "new-transaction2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// navigates to the new transaction form, selects a user and submits a transaction request\r\r\ncy.getBySelLike(\"new-transaction\").click(); // Open new transaction form\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Search for the contact user by username\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.contact!.username);\r\r\ncy.wait(\"@usersSearch\");\r\r\n\r\r\n// Select the contact from the search results\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.contact!.firstName).click();\r\r\n\r\r\n// Fill in the transaction request details using userInfo.requestTransactions[0]\r\r\ncy.getBySel(\"transaction-create-amount-input\").type(\"95\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Fancy Hotel 🏨\");\r\r\n\r\r\n// Select \"Request\" tab if not already selected\r\r\ncy.getBySel(\"transaction-create-request\").click();\r\r\n\r\r\n// Submit the transaction request\r\r\ncy.getBySel(\"transaction-create-submit-request\").click();\r\r\n\r\r\n// Wait for the transaction to be created\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// Assert that the confirmation message appears\r\r\ncy.getBySel(\"alert-bar-success\").should(\"contain\", \"Requested\");\r\r\n\r\r\n// Optionally, verify that the transaction appears in the personal transactions feed\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.wait(\"@personalTransactions\");\r\r\ncy.getBySelLike(\"transaction-item\").should(\"contain\", \"Fancy Hotel 🏨\").and(\"contain\", \"$95\");"
  },
  {
    "timestamp": "2025-06-16 17:23:49.267",
    "output_file": "output_gpt_4_1\\user-settings2.spec_response_gpt_4_1_20250616_172627.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\user-settings2.spec.txt",
    "requestTimeMs": 1750087429267,
    "responseTimeMs": 1750087438618,
    "durationMs": 9351,
    "testId": "user-settings2",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"should display user setting form errors\"\r\r\n//\r\r\n// This test will:\r\r\n// 1. Clear required fields and attempt to submit.\r\r\n// 2. Assert that error messages are displayed for each required field.\r\r\n// 3. Enter invalid email and phone number, submit, and assert error messages.\r\r\n\r\r\nconst userInfo = {\r\r\n  firstName: \"New First Name\",\r\r\n  lastName: \"New Last Name\",\r\r\n  email: \"email@email.com\",\r\r\n  phoneNumber: \"6155551212\"\r\r\n};\r\r\n\r\r\n// Step 1: Clear all required fields and submit\r\r\ncy.getBySel(\"user-settings-firstName-input\").clear();\r\r\ncy.getBySel(\"user-settings-lastName-input\").clear();\r\r\ncy.getBySel(\"user-settings-email-input\").clear();\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").clear();\r\r\ncy.getBySel(\"user-settings-submit\").click();\r\r\n\r\r\n// Step 2: Assert error messages for required fields\r\r\ncy.getBySel(\"user-settings-firstName-input\")\r\r\n  .parent()\r\r\n  .contains(/required/i);\r\r\ncy.getBySel(\"user-settings-lastName-input\")\r\r\n  .parent()\r\r\n  .contains(/required/i);\r\r\ncy.getBySel(\"user-settings-email-input\")\r\r\n  .parent()\r\r\n  .contains(/required/i);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\")\r\r\n  .parent()\r\r\n  .contains(/required/i);\r\r\n\r\r\n// Step 3: Enter invalid email and phone number, submit, and assert error messages\r\r\ncy.getBySel(\"user-settings-firstName-input\").type(userInfo.firstName);\r\r\ncy.getBySel(\"user-settings-lastName-input\").type(userInfo.lastName);\r\r\ncy.getBySel(\"user-settings-email-input\").type(\"invalid-email\");\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\").type(\"abcde\");\r\r\ncy.getBySel(\"user-settings-submit\").click();\r\r\n\r\r\ncy.getBySel(\"user-settings-email-input\")\r\r\n  .parent()\r\r\n  .contains(/invalid email/i);\r\r\ncy.getBySel(\"user-settings-phoneNumber-input\")\r\r\n  .parent()\r\r\n  .contains(/invalid phone/i);"
  },
  {
    "timestamp": "2025-06-16 17:26:43.376",
    "output_file": "output_gpt_4_1\\notifications1.spec_response_gpt_4_1_20250616_172921.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\notifications1.spec.txt",
    "requestTimeMs": 1750087603376,
    "responseTimeMs": 1750087610167,
    "durationMs": 6791,
    "testId": "notifications1",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// User A likes a transaction of User B; User B gets notification that User A liked transaction\r\r\n// 1. User A logs in and sends a payment to User B\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\ncy.getBySel(\"nav-public-tab\").click();\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// 2. User A creates a payment transaction to User B\r\r\ncy.getBySel(\"nav-new-transaction\").click();\r\r\ncy.getBySel(\"user-list-search-input\").type(ctx.userB.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").contains(ctx.userB.firstName).click();\r\r\ncy.getBySel(\"amount-input\").type(\"10\");\r\r\ncy.getBySel(\"transaction-create-description-input\").type(\"Test payment\");\r\r\ncy.getBySel(\"transaction-create-submit-payment\").click();\r\r\ncy.wait(\"@createTransaction\");\r\r\n\r\r\n// 3. User A logs out, User B logs in\r\r\ncy.logoutByXstate();\r\r\ncy.loginByXstate(ctx.userB.username);\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// 4. User B goes to personal transactions and finds the transaction from User A\r\r\ncy.getBySel(\"nav-personal-tab\").click();\r\r\ncy.getBySelLike(\"transaction-item\").contains(\"Test payment\").first().click();\r\r\n\r\r\n// 5. User B likes the transaction\r\r\ncy.getBySel(\"like-button\").click();\r\r\n\r\r\n// 6. User B logs out, User A logs in\r\r\ncy.logoutByXstate();\r\r\ncy.loginByXstate(ctx.userA.username);\r\r\ncy.wait(\"@getNotifications\");\r\r\n\r\r\n// 7. User A checks notifications for a like from User B\r\r\ncy.getBySel(\"nav-notifications-tab\").click();\r\r\ncy.wait(\"@getNotifications\");\r\r\ncy.getBySelLike(\"notification-list-item\")\r\r\n  .should(\"contain\", ctx.userB.firstName)\r\r\n  .and(\"contain\", \"liked your transaction\");"
  },
  {
    "timestamp": "2025-06-16 17:29:37.346",
    "output_file": "output_gpt_4_1\\new-transaction3.spec_response_gpt_4_1_20250616_173215.txt",
    "source_file": "C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\vscode_automation\\prompts\\new-transaction3.spec.txt",
    "requestTimeMs": 1750087777346,
    "responseTimeMs": 1750087787513,
    "durationMs": 10167,
    "testId": "new-transaction3",
    "llmName": "GPT-4.1",
    "llmNormalizedName": "gpt_4_1",
    "code": "// \"displays new transaction errors\"\r\r\n//\r\r\n// This test will attempt to submit a new transaction form with invalid or missing data\r\r\n// and assert that the appropriate error messages are displayed.\r\r\n\r\r\ncy.getBySelLike(\"new-transaction\").click();\r\r\ncy.wait(\"@allUsers\");\r\r\n\r\r\n// Step 1: Try submitting with no user selected\r\r\ncy.getBySelLike(\"user-list-search-input\").clear();\r\r\ncy.getBySelLike(\"amount-input\").clear();\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"user-list-search-input-helper-text\").should(\"be.visible\");\r\r\n\r\r\n// Step 2: Select a user but leave amount empty\r\r\ncy.getBySelLike(\"user-list-search-input\").type(ctx.contact!.firstName);\r\r\ncy.getBySelLike(\"user-list-item\").first().click();\r\r\ncy.getBySelLike(\"amount-input\").clear();\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\r\r\n\r\r\n// Step 3: Enter invalid (non-numeric) amount\r\r\ncy.getBySelLike(\"amount-input\").type(\"abc\");\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\r\r\n\r\r\n// Step 4: Enter negative amount\r\r\ncy.getBySelLike(\"amount-input\").clear().type(\"-50\");\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");\r\r\n\r\r\n// Step 5: Enter valid amount but leave description empty\r\r\ncy.getBySelLike(\"amount-input\").clear().type(\"10\");\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"description-input-helper-text\").should(\"be.visible\");\r\r\n\r\r\n// Step 6: Enter all valid data, then clear one field and check error\r\r\ncy.getBySelLike(\"description-input\").type(\"Test payment\");\r\r\ncy.getBySelLike(\"amount-input\").clear();\r\r\ncy.getBySelLike(\"transaction-create-submit-payment\").click();\r\r\ncy.getBySel(\"amount-input-helper-text\").should(\"be.visible\");"
  }
]