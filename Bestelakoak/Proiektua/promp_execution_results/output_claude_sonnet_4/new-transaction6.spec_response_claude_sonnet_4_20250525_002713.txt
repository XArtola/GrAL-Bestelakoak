---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    context("searches for a user by attribute", function () {
        const searchAttrs: (keyof User)[] = [
            "firstName",
            "lastName",
            "username",
            "email",
            "phoneNumber",
        ];
        beforeEach(function () {
            cy.getBySelLike("new-transaction").click();
            cy.wait("@allUsers");
        });
        searchAttrs.forEach((attr: keyof User) => {
            it(attr, () => { });
        });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the test structure, I can see this is testing the search functionality for users in the new transaction form. Each test should verify that searching by different user attributes (firstName, lastName, username, email, phoneNumber) works correctly.
> 
> <generated_code>
> ```typescript
> // it(attr, () => { });
> it(attr, () => {
>     // Get the attribute value from the contact user to search for
>     const searchValue = ctx.contact![attr];
>     
>     // Type the search value into the user search input
>     cy.getBySelLike("user-list-search-input").type(searchValue);
>     
>     // Wait for the search API call to complete
>     cy.wait("@usersSearch");
>     
>     // Verify that search results are displayed and contain the contact user
>     cy.getBySelLike("user-list-item")
>         .should("have.length.at.least", 1)
>         .and("contain", searchValue);
>     
>     // Verify that the contact user appears in the search results
>     cy.getBySelLike("user-list-item")
>         .contains(ctx.contact!.firstName)
>         .should("be.visible");
> });
> ```
> </generated_code>
> 
> The generated code follows this logic for each user attribute:
> 
> 1. **Get the search value**: Extracts the value of the current attribute (firstName, lastName, username, email, or phoneNumber) from the contact user
> 2. **Perform the search**: Types the search value into the user search input field
> 3. **Wait for API response**: Waits for the search API call to complete
> 4. **Verify search results**: Ensures that search results are displayed and contain the searched value
> 5. **Verify contact appears**: Confirms that the contact user appears in the search results by checking for their first name
> 
> This approach ensures that the search functionality works correctly for all user attributes while using the actual test data from the seeded database.
