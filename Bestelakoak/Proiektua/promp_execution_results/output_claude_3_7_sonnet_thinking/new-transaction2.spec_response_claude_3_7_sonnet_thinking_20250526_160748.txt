---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("navigates to the new transaction form, selects a user and submits a transaction request", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: # New Transaction Test Implementation
> 
> Based on the provided test structure and user information, I'll implement the "navigates to the new transaction form, selects a user and submits a transaction request" test.
> 
> Looking at your test structure, you have a context object that contains the users, and you need to implement a test for submitting a transaction request. Here's the implementation:
> 
> ```typescript
> // Test implementation for submitting a transaction request
> it("navigates to the new transaction form, selects a user and submits a transaction request", () => {
>   // Navigate to the new transaction form
>   cy.getBySel("new-transaction").click();
>   cy.wait("@allUsers");
>   
>   // Search for the contact user
>   cy.getBySel("user-list-search-input").type(ctx.contact!.firstName);
>   cy.wait("@usersSearch");
>   
>   // Select the user from the search results
>   cy.getBySel("user-list-item").first().click();
>   
>   // Enter the amount for the request
>   cy.getBySel("amount-input").type("95");
>   
>   // Enter the description for the request
>   cy.getBySel("transaction-create-description-input").type("Fancy Hotel üè®");
>   
>   // Switch to the request mode (instead of payment)
>   cy.getBySel("transaction-create-submit-request").click();
>   
>   // Wait for the transaction to be created
>   cy.wait("@createTransaction");
>   
>   // Verify the request was successfully created
>   cy.getBySel("snackbar-success-content")
>     .should("be.visible")
>     .and("contain", "Transaction Submitted!");
>   
>   // Verify the transaction appears in the personal transactions list
>   cy.getBySel("nav-personal-tab").click();
>   cy.wait("@personalTransactions");
>   
>   // Check that the most recent transaction has our description
>   cy.getBySel("transaction-item")
>     .first()
>     .should("contain", "Fancy Hotel üè®")
>     .and("contain", "$95");
> });
> ```
> 
> This test:
> 1. Navigates to the new transaction form
> 2. Searches for and selects the contact user
> 3. Fills in the amount and description using data from the first request transaction in the user info
> 4. Submits a request transaction (not a payment)
> 5. Verifies that the transaction was created successfully
> 6. Checks that the transaction appears in the personal transactions list with the correct details
> 
> The implementation follows Cypress best practices by:
> - Using data-test selectors (getBySel)
> - Waiting for network requests to complete
> - Including meaningful assertions
> - Following a logical sequence of user actions
