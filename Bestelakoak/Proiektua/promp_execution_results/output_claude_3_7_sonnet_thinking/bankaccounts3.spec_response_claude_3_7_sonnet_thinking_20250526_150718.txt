---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("soft deletes a bank account", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: # Bank Account Soft Delete Test Implementation
> 
> Looking at your request, I need to implement a Cypress test for soft deleting a bank account within the provided test structure. Based on the test context and the bank account information provided, here's the implementation:
> 
> ## Implementation for the `soft deletes a bank account` test
> 
> ```typescript
> // soft deletes a bank account
> it("soft deletes a bank account", () => {
>   cy.getBySel("sidenav-bankaccounts").click();
>   cy.wait("@gqlListBankAccountQuery");
> 
>   // Check if any bank accounts exist and create one if needed
>   cy.getBySel("bankaccount-list").then($list => {
>     const hasAccounts = $list.find("[data-test^='bankaccount-item']").length > 0;
>     
>     if (!hasAccounts) {
>       // Create a bank account first
>       cy.getBySel("bankaccount-new").click();
>       cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>       cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>       cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>       cy.getBySel("bankaccount-submit").click();
>       cy.wait("@gqlCreateBankAccountMutation");
>       
>       // Return to the bank accounts list
>       cy.getBySel("sidenav-bankaccounts").click();
>       cy.wait("@gqlListBankAccountQuery");
>     }
>     
>     // Store account count before deletion
>     cy.getBySel("bankaccount-list").find("[data-test^='bankaccount-item']").its("length").as("initialCount");
>     
>     // Find and delete the first bank account
>     cy.getBySel("bankaccount-list").find("[data-test^='bankaccount-item']").first().within(() => {
>       cy.getBySel("bankaccount-delete").click();
>     });
>     
>     // Wait for the delete mutation to complete
>     cy.wait("@gqlDeleteBankAccountMutation");
>     
>     // Verify success notification
>     cy.contains("deleted").should("be.visible");
>     
>     // Verify the account was removed from the list
>     cy.get("@initialCount").then((initialCount) => {
>       if (initialCount === 1) {
>         // If it was the only account, check for empty state
>         cy.getBySel("empty-list-header").should("be.visible");
>       } else {
>         // Otherwise verify count decreased by 1
>         cy.getBySel("bankaccount-list").find("[data-test^='bankaccount-item']")
>           .should("have.length", Number(initialCount) - 1);
>       }
>     });
>   });
> });
> ```
> 
> This test follows these key steps:
> 
> 1. Navigate to the bank accounts section
> 2. Create a new bank account if none exist
> 3. Store the initial count of bank accounts
> 4. Delete the first bank account in the list
> 5. Verify the deletion was successful by:
>    - Checking for a success notification
>    - Confirming the account no longer appears in the list (either by showing an empty state or by verifying the count decreased)
> 
> The implementation handles both cases: when there's only one account that gets deleted (showing an empty state afterward) and when there are multiple accounts (verifying the count decreased).
