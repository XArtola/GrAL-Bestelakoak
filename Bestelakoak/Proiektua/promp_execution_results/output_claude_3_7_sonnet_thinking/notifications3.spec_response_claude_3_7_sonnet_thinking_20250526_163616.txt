---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User A comments on a transaction of User B; User B gets notification that User A commented on their transaction", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: # Cypress Test for User Notification on Transaction Comments
> 
> Looking at your requirements, I'll generate the code for the notification test that verifies when User A comments on User B's transaction, User B receives a notification.
> 
> ## Implementation for the Test Block
> 
> Here's the code for the "User A comments on a transaction of User B" test:
> 
> ```typescript
> // User A comments on a transaction of User B; User B gets notification that User A commented on their transaction
> it("User A comments on a transaction of User B; User B gets notification that User A commented on their transaction", () => {
>     // Find a transaction created by User B
>     cy.database("find", "transactions", { senderId: ctx.userB.id }).then(transaction => {
>         // Login as User A
>         cy.loginByXstate(ctx.userA.username);
>         cy.wait("@getNotifications");
>         
>         // Visit the transaction
>         cy.visit(`/transaction/${transaction.id}`);
>         
>         // Add a comment to the transaction
>         const commentText = "Great transaction!";
>         cy.getBySel("comment-input").type(commentText);
>         cy.getBySel("comment-submit").click();
>         cy.wait("@postComment");
>         
>         // Verify the comment was added
>         cy.getBySel("comments-list").should("contain", commentText);
>         
>         // Logout as User A
>         cy.getBySel("sidenav-signout").click();
>         
>         // Login as User B
>         cy.loginByXstate(ctx.userB.username);
>         cy.wait("@getNotifications");
>         
>         // Check for notifications
>         cy.getBySel("nav-top-notifications-count").should("exist");
>         cy.getBySel("nav-top-notifications-link").click();
>         
>         // Verify notification about the comment
>         cy.getBySel("notification-list-item")
>             .first()
>             .should("contain", ctx.userA.firstName)
>             .and("contain", "commented");
>     });
> });
> ```
> 
> This implementation:
> 1. Finds a transaction where User B is the sender
> 2. Logs in as User A and visits the transaction page
> 3. Adds a comment to the transaction
> 4. Logs out as User A and logs in as User B
> 5. Checks that User B has received a notification about User A's comment
> 
> The test verifies both the comment functionality and the notification system, ensuring that when a user comments on another user's transaction, the transaction owner receives an appropriate notification.
