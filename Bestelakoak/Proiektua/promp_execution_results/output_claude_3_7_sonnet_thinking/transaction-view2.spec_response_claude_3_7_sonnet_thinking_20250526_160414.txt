---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User, Transaction } from "../../../src/models";
type NewTransactionCtx = {
    transactionRequest?: Transaction;
    authenticatedUser?: User;
};
describe("Transaction View", function () {
    const ctx: NewTransactionCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/transactions*").as("personalTransactions");
        cy.intercept("GET", "/transactions/public*").as("publicTransactions");
        cy.intercept("GET", "/transactions/*").as("getTransaction");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.intercept("GET", "/checkAuth").as("userProfile");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("GET", "/bankAccounts").as("getBankAccounts");
        cy.database("find", "users").then((user: User) => {
            ctx.authenticatedUser = user;
            cy.loginByXstate(ctx.authenticatedUser.username);
            cy.database("find", "transactions", {
                receiverId: ctx.authenticatedUser.id,
                status: "pending",
                requestStatus: "pending",
                requestResolvedAt: "",
            }).then((transaction: Transaction) => {
                ctx.transactionRequest = transaction;
            });
        });
        cy.getBySel("nav-personal-tab").click();
        cy.wait("@personalTransactions");
    });
    it("likes a transaction", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: # Cypress Test Suite - Transaction View
> 
> Looking at the provided code, I need to create a test that allows a user to like a transaction. Here's the implementation:
> 
> <generated_code>
> // it("likes a transaction", () => { });
> it("likes a transaction", () => {
>   // Intercept the POST request for liking a transaction
>   cy.intercept("POST", "/likes/*").as("postLike");
>   
>   // Find and click on a transaction to view its details
>   cy.getBySel("transaction-item").first().click();
>   
>   // Wait for the transaction details to load
>   cy.wait("@getTransaction");
>   
>   // Find and click on the like button
>   cy.getBySel("transaction-like-button").click();
>   
>   // Wait for the like action to complete
>   cy.wait("@postLike");
>   
>   // Verify the transaction has been liked - the button should now show as liked
>   cy.getBySel("transaction-like-button").should("have.class", "MuiButton-containedPrimary");
>   
>   // Verify the like count has increased
>   cy.getBySel("transaction-like-count").should("be.visible");
> });
> </generated_code>
> 
> This test:
> 1. Intercepts the API call for liking a transaction
> 2. Clicks on the first transaction in the list to view details
> 3. Waits for the transaction details to load
> 4. Clicks on the like button
> 5. Waits for the like action to complete
> 6. Verifies the button has changed to indicate it's in the "liked" state
> 7. Verifies the like count is visible
> 
> The test leverages the context setup in the beforeEach block, including the authenticated user and transaction request data.
