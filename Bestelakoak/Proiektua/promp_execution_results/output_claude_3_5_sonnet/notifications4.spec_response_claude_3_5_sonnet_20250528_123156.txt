---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help generate the code for the notification test. Based on the test description and context, here's the implementation:
> 
> ```typescript
> // Test: User C comments on a transaction between User A and User B; User A and B get notifications that User C commented on their transaction
> // First create a transaction between User A and B
> cy.loginByXstate(ctx.userA.username);
>     
> // Create a transaction between User A and User B
> cy.visit("/transaction/new");
> cy.getBySel("user-list-item").contains(ctx.userB.firstName).click();
> cy.getBySelLike("amount").type("75");
> cy.getBySelLike("description").type("Test transaction between A and B");
> cy.getBySel("transaction-create-submit-payment").click();
> cy.wait("@createTransaction");
> 
> // Get transaction ID from URL
> let transactionId: string;
> cy.url().then(url => {
>     transactionId = url.split("/").pop()!;
>     
>     // Log out as User A
>     cy.getBySel("sidenav-signout").click();
>     
>     // Log in as User C to comment on the transaction
>     cy.loginByXstate(ctx.userC.username);
>     
>     // Visit the transaction and add comment
>     cy.visit(`/transaction/${transactionId}`);
>     const commentText = "Test comment from User C";
>     cy.getBySel("comment-input").type(commentText);
>     cy.getBySel("comment-submit").click();
>     cy.wait("@postComment");
>     
>     // Verify comment appears
>     cy.getBySel("comments-list").should("contain", commentText);
>     
>     // Log out as User C
>     cy.getBySel("sidenav-signout").click();
>     
>     // Check User A's notifications
>     cy.loginByXstate(ctx.userA.username);
>     cy.visit("/");
>     cy.wait("@getNotifications");
>     cy.getBySel("nav-top-notifications-count").should("contain", "1");
>     cy.getBySel("nav-top-notifications-link").click();
>     cy.getBySelLike("notification-list-item")
>         .first()
>         .should("contain", ctx.userC.firstName)
>         .and("contain", "commented");
>     
>     // Log out as User A
>     cy.getBySel("sidenav-signout").click();
>     
>     // Check User B's notifications
>     cy.loginByXstate(ctx.userB.username);
>     cy.visit("/");
>     cy.wait("@getNotifications");
>     cy.getBySel("nav-top-notifications-count").should("contain", "1");
>     cy.getBySel("nav-top-notifications-link").click();
>     cy.getBySelLike("notification-list-item")
>         .first()
>         .should("contain", ctx.userC.firstName)
>         .and("contain", "commented");
> });
> ```
> 
> This implementation:
> 
> 1. Creates a transaction between User A and B
> 2. Gets User C to comment on that transaction
> 3. Verifies both User A and B receive notifications about the comment
> 
> The code uses:
> - Custom Cypress commands like `loginByXstate` and `getBySel`
> - Proper waiting for network requests with `cy.wait()`
> - URL manipulation to get the transaction ID
> - Multiple user session handling with login/logout
> - Assertions to verify notifications appear correctly
> 
> The code follows the test flow:
> 1. Setup the initial transaction 
> 2. Add the comment
> 3. Verify notifications for both transaction participants
> 
> This should provide comprehensive test coverage for the notification functionality when a user comments on a transaction.
