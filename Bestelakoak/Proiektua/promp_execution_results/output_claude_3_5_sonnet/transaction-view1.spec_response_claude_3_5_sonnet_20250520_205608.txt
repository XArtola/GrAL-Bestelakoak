---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User, Transaction } from "../../../src/models";
type NewTransactionCtx = {
    transactionRequest?: Transaction;
    authenticatedUser?: User;
};
describe("Transaction View", function () {
    const ctx: NewTransactionCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/transactions*").as("personalTransactions");
        cy.intercept("GET", "/transactions/public*").as("publicTransactions");
        cy.intercept("GET", "/transactions/*").as("getTransaction");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.intercept("GET", "/checkAuth").as("userProfile");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("GET", "/bankAccounts").as("getBankAccounts");
        cy.database("find", "users").then((user: User) => {
            ctx.authenticatedUser = user;
            cy.loginByXstate(ctx.authenticatedUser.username);
            cy.database("find", "transactions", {
                receiverId: ctx.authenticatedUser.id,
                status: "pending",
                requestStatus: "pending",
                requestResolvedAt: "",
            }).then((transaction: Transaction) => {
                ctx.transactionRequest = transaction;
            });
        });
        cy.getBySel("nav-personal-tab").click();
        cy.wait("@personalTransactions");
    });
    it("transactions navigation tabs are hidden on a transaction view page", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help generate the code for the `it` block in the transaction view test suite. Let me analyze the test description and context first.
> 
> The test is checking if transaction navigation tabs are hidden on a transaction view page. From the setup code, we can see:
> 1. The test seeds the database and has authentication setup
> 2. We have intercepted various transaction-related API calls
> 3. We have context (`ctx`) with authenticated user and transaction request information
> 4. Before each test, it navigates to the personal transactions tab
> 
> Here's the generated code for the test:
> 
> ```typescript
> // Test: transactions navigation tabs are hidden on a transaction view page
> it("transactions navigation tabs are hidden on a transaction view page", () => {
>     // Verify we have a transaction to work with
>     expect(ctx.transactionRequest, "Transaction request exists").to.not.be.undefined;
> 
>     // Navigate to specific transaction page using the transaction request ID
>     cy.visit(`/transaction/${ctx.transactionRequest!.id}`);
>     cy.wait("@getTransaction");
> 
>     // Verify the transaction detail view is loaded
>     cy.getBySel("transaction-detail-header").should("be.visible");
> 
>     // Verify that the navigation tabs are hidden
>     cy.getBySel("nav-transaction-tabs").should("not.exist");
>     cy.getBySel("nav-public-tab").should("not.exist");
>     cy.getBySel("nav-contacts-tab").should("not.exist");
>     cy.getBySel("nav-personal-tab").should("not.exist");
> 
>     // Verify we're still showing the transaction details
>     cy.getBySel("transaction-amount").should("be.visible");
>     cy.getBySel("transaction-description").should("be.visible");
> });
> ```
> 
> The generated test:
> 1. First ensures we have a valid transaction to test with
> 2. Navigates to a specific transaction's detail view
> 3. Verifies that the transaction details page loads
> 4. Checks that all navigation tabs are hidden/removed from the view
> 5. Verifies that transaction details are still visible
> 
> This test covers the requirement of checking that transaction navigation tabs are hidden when viewing a specific transaction, while ensuring the transaction details themselves remain visible.
> 
> The test uses the established patterns from the codebase, including:
> - Using `getBySel` for element selection
> - Waiting for API responses with the intercepted routes
> - Following the same structure as other tests in the application
> - Using appropriate assertions to verify both presence and absence of elements
