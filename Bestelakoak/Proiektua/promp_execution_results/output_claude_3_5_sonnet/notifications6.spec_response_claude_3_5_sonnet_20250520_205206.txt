---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User A sends a payment request to User C", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the test code for the "User A sends a payment request to User C" scenario. Looking at the provided code structure and context, I can see this test should verify the notification flow when one user requests payment from another.
> 
> Here's the implementation:
> 
> ```typescript
> // User A sends a payment request to User C
> it("User A sends a payment request to User C", () => {
>     // Login as User A
>     cy.loginByXstate(ctx.userA.username);
>     cy.visit("/");
>     cy.wait("@getNotifications");
>     
>     // Create payment request
>     cy.getBySel("new-transaction").click();
>     cy.getBySel("user-list-search-input").type(ctx.userC.firstName);
>     cy.getBySel("user-list-item").first().click();
>     
>     // Fill in request details
>     cy.getBySel("amount-input").type("75");
>     cy.getBySel("transaction-create-description-input").type("Test payment request");
>     cy.getBySel("transaction-create-submit-request").click();
>     
>     // Wait for request creation
>     cy.wait("@createTransaction");
>     
>     // Logout User A
>     cy.getBySel("sidenav-signout").click();
>     
>     // Login as User C
>     cy.loginByXstate(ctx.userC.username);
>     cy.wait("@getNotifications");
>     
>     // Verify notification
>     cy.getBySel("nav-top-notifications-count").should("exist");
>     cy.getBySel("nav-top-notifications-link").click();
>     
>     // Check notification content
>     cy.getBySel("notification-list-item")
>         .first()
>         .should("contain", ctx.userA.firstName)
>         .and("contain", "requested");
> });
> ```
> 
> This implementation:
> 1. Logs in as User A to create the payment request
> 2. Creates a new payment request to User C
> 3. Fills in the request details (amount and description)
> 4. Submits the request
> 5. Logs out User A and logs in as User C
> 6. Verifies that User C receives a notification about the payment request
> 7. Checks that the notification contains correct information
> 
> The test uses the context (`ctx`) object that's set up in the `beforeEach` block to access user information, which is more reliable than hardcoded user data since it comes from the seeded database.
> 
> Key points about the implementation:
> - Uses `cy.wait()` for network requests to ensure data is loaded
> - Follows the pattern of action -> verification
> - Uses data-test selectors (`getBySel`) which is a best practice
> - Includes multiple assertions to verify the notification content
> - Handles user switching to test both sides of the interaction
> 
> The selectors and flow are based on patterns seen in other tests in the codebase, ensuring consistency with the application's structure.
