---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("should display bank account form errors", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the "should display bank account form errors" test based on the provided structure and bank account information.
> 
> Here's the implementation:
> 
> ```typescript
> // it("should display bank account form errors", () => { });
> it("should display bank account form errors", () => {
>     // Click on create new bank account button 
>     cy.getBySel("bankaccount-new").click();
>     
>     // Step 1: Try submitting empty form first
>     cy.getBySel("bankaccount-submit").click();
> 
>     // Verify error messages for all required fields
>     cy.getBySel("bankaccount-bankName-error")
>         .should("be.visible")
>         .and("contain", "Enter a bank name");
>     
>     cy.getBySel("bankaccount-routingNumber-error")
>         .should("be.visible")
>         .and("contain", "Enter a valid routing number");
>     
>     cy.getBySel("bankaccount-accountNumber-error")
>         .should("be.visible")
>         .and("contain", "Enter a valid account number");
> 
>     // Step 2: Test invalid routing number format
>     cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>     cy.getBySel("bankaccount-routingNumber-input").type("12345"); // Invalid - too short
>     cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>     
>     cy.getBySel("bankaccount-routingNumber-error")
>         .should("be.visible")
>         .and("contain", "Must contain a valid routing number");
> 
>     // Step 3: Test invalid account number format
>     cy.getBySel("bankaccount-routingNumber-input").clear().type(bankAccountInfo.routingNumber);
>     cy.getBySel("bankaccount-accountNumber-input").clear().type("12345"); // Invalid - too short
> 
>     cy.getBySel("bankaccount-accountNumber-error")
>         .should("be.visible")
>         .and("contain", "Must contain a valid account number");
> });
> ```
> 
> This test implementation:
> 
> 1. Tests form validation by attempting to submit an empty form
> 2. Verifies error messages appear for all required fields
> 3. Tests invalid routing number format and verifies specific error message
> 4. Tests invalid account number format and verifies specific error message
> 
> I've used the provided `bankAccountInfo` object for valid data when testing specific field validations.
> 
> The test uses the `getBySel` custom Cypress command which appears to be a helper for selecting elements by data-test attributes.
> 
> Note: The exact error message text might need to be adjusted based on the actual application's validation messages. If you need the exact error messages used in the application, please provide those and I can update the assertions accordingly.
