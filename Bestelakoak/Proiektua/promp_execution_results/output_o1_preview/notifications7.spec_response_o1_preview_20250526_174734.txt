---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    it("renders an empty notifications state", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: <generated_code>
> // it("renders an empty notifications state", () => { ... })
> 
> // Since there is no user information provided (userInfo is empty),
> // and we need a user without any prior notifications to properly
> // test an "empty notifications state," we cannot fully implement
> // the sign-up/login flow here.
> // Below is an example of how you might proceed *if* you had data
> // or if you manually cleared notifications for one of the seeded
> // users in the database. As it stands, additional info is required
> // (either user credentials or a way to clear notifications) to
> // guarantee that the user has zero notifications.
> 
> it("renders an empty notifications state", () => {
>   // STEP 1: Log in as a user who we know has no notifications.
>   // (In practice, we'd either sign this user up now or ensure
>   // notifications are cleared in the DB for ctx.userA, for example.)
>   // cy.loginByXstate(ctx.userA.username);
> 
>   // STEP 2: Visit the Notifications page (or open the notifications panel).
>   // cy.getBySel("sidenav-notifications").click();
>   // cy.wait("@getNotifications");
> 
>   // STEP 3: Assert that no notifications were returned/rendered.
>   // Example approach:
>   // cy.getBySel("notification-list-item").should("not.exist");
>   // cy.getBySel("empty-notifications").should("be.visible")
>   //   .and("contain", "No notifications");
> 
>   // Since we do not have the details to guarantee an empty state,
>   // we log the need for additional setup:
>   cy.log("No user info provided. Additional info or DB cleanup is needed to ensure an empty notifications state.");
> });
> </generated_code>
