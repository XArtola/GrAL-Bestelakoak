---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should allow a visitor to sign-up, login, and logout", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: it("should allow a visitor to sign-up, login, and logout", () => {
>   /* 
>     Test Steps:
>     1. Visit the signup page and fill out the signup form with userInfo
>     2. Submit the signup form and wait for the signup request
>     3. Complete onboarding by creating a bank account
>     4. Verify user is logged in
>     5. Log out and verify redirection to the signin page
>     6. Log back in with the same credentials
>     7. Verify the user is logged in again
>   */
>   <generated_code>
>   // Step 1: Visit the signup page
>   cy.visit("/signup");
> 
>   // Fill out the signup form
>   cy.getBySel("signup-first-name").type(userInfo.firstName);
>   cy.getBySel("signup-last-name").type(userInfo.lastName);
>   cy.getBySel("signup-username").type(userInfo.username);
>   cy.getBySel("signup-password").type(userInfo.password);
>   cy.getBySel("signup-confirmPassword").type(userInfo.password);
> 
>   // Step 2: Submit the signup form and wait for the signup request
>   cy.getBySel("signup-submit").click();
>   cy.wait("@signup"); // Wait for the signup intercept
> 
>   // Step 3: Complete onboarding by creating a bank account
>   // Verify the onboarding dialog or next step is displayed
>   cy.getBySel("user-onboarding-dialog").should("be.visible");
>   cy.getBySel("user-onboarding-next").click();
> 
>   // Fill the bank account form
>   cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>   cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>   cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>   cy.getBySel("bankaccount-submit").click();
>   cy.wait("@gqlCreateBankAccountMutation");
> 
>   // Step 4: Verify that the user is logged in
>   cy.getBySel("user-onboarding-next").click();
>   cy.getBySel("sidenav-user-full-name").should(
>     "contain",
>     `${userInfo.firstName} ${userInfo.lastName}`
>   );
> 
>   // Step 5: Log out and verify redirection to the signin page
>   cy.getBySel("sidenav-signout").click();
>   cy.url().should("include", "/signin");
> 
>   // Step 6: Log back in with the same credentials
>   cy.getBySel("signin-username").type(userInfo.username);
>   cy.getBySel("signin-password").type(userInfo.password);
>   cy.getBySel("signin-submit").click();
> 
>   // Step 7: Verify the user is logged in again
>   cy.getBySel("sidenav-user-full-name").should(
>     "contain",
>     `${userInfo.firstName} ${userInfo.lastName}`
>   );
>   </generated_code>
> });
