---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("should display bank account form errors", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Okay, I will generate the code for the `it` block.
> 
> ```typescript
> // ...existing code...
>     it("should display bank account form errors", () => {
>         // <generated_code>
>         // Click the "Create" button to open the new bank account form
>         cy.getBySel("bankaccount-new").click();
> 
>         // Attempt to submit the form with no fields filled
>         cy.getBySel("bankaccount-submit").click();
> 
>         // Verify that error messages are displayed for all required fields
>         cy.getBySel("bankName-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Enter a bank name");
>         cy.getBySel("routingNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Enter a routing number");
>         cy.getBySel("accountNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Enter an account number");
> 
>         // Enter an invalid routing number (too short)
>         cy.getBySel("bankaccount-routingNumber-input").type("123");
>         cy.getBySel("bankaccount-submit").click();
>         cy.getBySel("routingNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Must contain a valid routing number");
> 
>         // Clear routing number and enter an invalid account number (too short)
>         cy.getBySel("bankaccount-routingNumber-input").clear();
>         cy.getBySel("bankaccount-accountNumber-input").type("abc");
>         cy.getBySel("bankaccount-submit").click();
>         cy.getBySel("accountNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Must contain a valid account number");
> 
>         // Fill in bank name to satisfy one requirement
>         cy.getBySel("bankaccount-bankName-input").type("Test Bank");
> 
>         // Submit again to check remaining errors
>         cy.getBySel("bankaccount-submit").click();
> 
>         // Bank name error should be gone
>         cy.getBySel("bankName-input-helper-text").should("not.exist");
> 
>         // Routing number and account number errors should persist
>         cy.getBySel("routingNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Enter a routing number"); // Error changes back as field is now empty
>         cy.getBySel("accountNumber-input-helper-text")
>             .should("be.visible")
>             .and("contain", "Must contain a valid account number"); // Error persists for invalid input
>         // </generated_code>
>     });
> // ...existing code...
> ```
