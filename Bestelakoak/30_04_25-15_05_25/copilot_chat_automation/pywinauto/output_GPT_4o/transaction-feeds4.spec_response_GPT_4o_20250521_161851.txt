---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from "../../../src/models";
import { addDays, isWithinInterval, startOfDay } from "date-fns";
import { startOfDayUTC, endOfDayUTC } from "../../../src/utils/transactionUtils";
import { isMobile } from "../../support/utils";
const { _ } = Cypress;
type TransactionFeedsCtx = {
    allUsers?: User[];
    user?: User;
    contactIds?: string[];
};
describe("Transaction Feed", function () {
    const ctx: TransactionFeedsCtx = {};
    const feedViews = {
        public: {
            tab: "public-tab",
            tabLabel: "everyone",
            routeAlias: "publicTransactions",
            service: "publicTransactionService",
        },
        contacts: {
            tab: "contacts-tab",
            tabLabel: "friends",
            routeAlias: "contactsTransactions",
            service: "contactTransactionService",
        },
        personal: {
            tab: "personal-tab",
            tabLabel: "mine",
            routeAlias: "personalTransactions",
            service: "personalTransactionService",
        },
    };
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions*").as(feedViews.personal.routeAlias);
        cy.intercept("GET", "/transactions/public*").as(feedViews.public.routeAlias);
        cy.intercept("GET", "/transactions/contacts*").as(feedViews.contacts.routeAlias);
        cy.database("filter", "users").then((users: User[]) => {
            ctx.user = users[0];
            ctx.allUsers = users;
            cy.loginByXstate(ctx.user.username);
        });
    });
    describe("filters transaction feeds by date range", function () {
        if (isMobile()) {
            it("closes date range picker modal", () => { });
        }
        _.each(feedViews, (feed, feedName) => {});
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot:
>```typescript
> // it block: "closes date range picker modal"
> <generated_code>
> // Test to verify that the date range picker modal closes on mobile devices
> it("closes date range picker modal", () => {
>     // Open the date range picker
>     cy.getBySel("date-range-picker").click();
> 
>     // Verify that the modal is visible
>     cy.getBySel("date-range-modal").should("be.visible");
> 
>     // Close the modal
>     cy.getBySel("date-range-close-button").click();
> 
>     // Verify that the modal is no longer visible
>     cy.getBySel("date-range-modal").should("not.exist");
> });
> </generated_code>
> 
> // it block: "filters transaction feeds by date range"
> <generated_code>
> // Test to verify that transaction feeds can be filtered by date range
> _.each(feedViews, (feed, feedName) => {
>     it(`filters ${feedName} transaction feed by date range`, () => {
>         // Navigate to the specific feed tab
>         cy.getBySel(feed.tab).click();
>         cy.wait(`@${feed.routeAlias}`);
> 
>         // Open the date range picker
>         cy.getBySel("date-range-picker").click();
> 
>         // Set the start and end dates for the filter
>         cy.getBySel("date-range-start").type("2023-01-01");
>         cy.getBySel("date-range-end").type("2023-12-31");
> 
>         // Apply the date range filter
>         cy.getBySel("date-range-apply").click();
> 
>         // Verify that the transactions displayed fall within the selected date range
>         cy.getBySel("transaction-item").each(($item) => {
>             cy.wrap($item)
>                 .find("[data-test='transaction-date']")
>                 .invoke("text")
>                 .then((dateText) => {
>                     const transactionDate = new Date(dateText);
>                     const startDate = new Date("2023-01-01");
>                     const endDate = new Date("2023-12-31");
>                     expect(transactionDate).to.be.within(startDate, endDate);
>                 });
>         });
>     });
> });
> </generated_code>
> ```
