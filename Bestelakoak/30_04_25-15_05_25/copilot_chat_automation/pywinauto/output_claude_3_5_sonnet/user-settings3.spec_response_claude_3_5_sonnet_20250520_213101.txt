---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
describe("User Settings", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("PATCH", "/users/*").as("updateUser");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.database("find", "users").then((user: User) => {
            cy.loginByXstate(user.username);
        });
        if (isMobile()) {
            cy.getBySel("sidenav-toggle").click();
        }
        cy.getBySel("sidenav-user-settings").click();
    });
    it("updates first name, last name, email and phone number", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "updatedUserInfo": {
    "firstName": "New First Name",
    "lastName": "New Last Name",
    "email": "email@email.com",
    "phoneNumber": "6155551212"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the test case based on the provided structure and user information. The test is for updating user settings with new information.
> 
> Here's the implementation for the `it` block:
> 
> ````typescript
> // Test: updates first name, last name, email and phone number
> it("updates first name, last name, email and phone number", () => {
>     // Clear existing field values
>     cy.getBySel("user-settings-firstName-input").clear();
>     cy.getBySel("user-settings-lastName-input").clear();
>     cy.getBySel("user-settings-email-input").clear();
>     cy.getBySel("user-settings-phoneNumber-input").clear();
> 
>     // Type in new user information
>     cy.getBySel("user-settings-firstName-input")
>         .type(updatedUserInfo.firstName)
>         .should("have.value", updatedUserInfo.firstName);
> 
>     cy.getBySel("user-settings-lastName-input")
>         .type(updatedUserInfo.lastName)
>         .should("have.value", updatedUserInfo.lastName);
> 
>     cy.getBySel("user-settings-email-input")
>         .type(updatedUserInfo.email)
>         .should("have.value", updatedUserInfo.email);
> 
>     cy.getBySel("user-settings-phoneNumber-input")
>         .type(updatedUserInfo.phoneNumber)
>         .should("have.value", updatedUserInfo.phoneNumber);
> 
>     // Submit the form
>     cy.getBySel("user-settings-submit").click();
> 
>     // Wait for the update request to complete
>     cy.wait("@updateUser");
> 
>     // Verify form values persist after update
>     cy.getBySel("user-settings-firstName-input")
>         .should("have.value", updatedUserInfo.firstName);
>     cy.getBySel("user-settings-lastName-input")
>         .should("have.value", updatedUserInfo.lastName);
>     cy.getBySel("user-settings-email-input")
>         .should("have.value", updatedUserInfo.email);
>     cy.getBySel("user-settings-phoneNumber-input")
>         .should("have.value", updatedUserInfo.phoneNumber);
> 
>     // Verify success notification
>     cy.getBySel("user-settings-form-success")
>         .should("be.visible")
>         .and("contain", "User Settings Updated Successfully");
> });
> ````
> 
> This implementation:
> 
> 1. Uses the `getBySel` custom command that looks for elements with data-test attributes
> 2. Clears existing values before entering new ones
> 3. Types in new values for each field from the provided updatedUserInfo object
> 4. Verifies each field contains the typed value
> 5. Submits the form
> 6. Waits for the PATCH request to complete (using the intercepted route from beforeEach)
> 7. Verifies the values persist after the update
> 8. Checks for a success notification
> 
> The test follows Cypress best practices by:
> - Using data-test attributes for element selection
> - Chaining assertions with commands
> - Waiting for network requests to complete
> - Including multiple assertions to verify the update was successful
> - Using clear, descriptive steps
> - Verifying both the UI state and the persistence of changes
> 
> The code assumes the existence of matching data-test attributes in the application code and a success notification element. If these selectors need to be adjusted based on the actual application markup, the test code can be modified accordingly.
