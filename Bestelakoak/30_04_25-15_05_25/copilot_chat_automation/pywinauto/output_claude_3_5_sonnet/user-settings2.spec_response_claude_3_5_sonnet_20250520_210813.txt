---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
describe("User Settings", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("PATCH", "/users/*").as("updateUser");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.database("find", "users").then((user: User) => {
            cy.loginByXstate(user.username);
        });
        if (isMobile()) {
            cy.getBySel("sidenav-toggle").click();
        }
        cy.getBySel("sidenav-user-settings").click();
    });
    it("should display user setting form errors", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "updatedUserInfo": {
    "firstName": "New First Name",
    "lastName": "New Last Name",
    "email": "email@email.com",
    "phoneNumber": "6155551212"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the test case to check user settings form validation errors.
> 
> Based on the provided test structure and examining similar tests in the codebase, here's the implementation for the "should display user setting form errors" test:
> 
> ````typescript
> // Test: should display user setting form errors
> it("should display user setting form errors", () => {
>     // Clear all required form fields
>     cy.getBySel("user-settings-firstName-input").clear();
>     cy.getBySel("user-settings-lastName-input").clear();
>     cy.getBySel("user-settings-email-input").clear();
>     cy.getBySel("user-settings-phoneNumber-input").clear();
>     
>     // Submit form with empty fields
>     cy.getBySel("user-settings-submit").click();
>     
>     // Verify validation messages for required fields
>     cy.get("form").contains("Enter a first name").should("be.visible");
>     cy.get("form").contains("Enter a last name").should("be.visible");
>     cy.get("form").contains("Must contain a valid email address").should("be.visible");
>     
>     // Test invalid phone number format
>     cy.getBySel("user-settings-firstName-input").type("Test");
>     cy.getBySel("user-settings-lastName-input").type("User");
>     cy.getBySel("user-settings-email-input").type("valid@email.com");
>     cy.getBySel("user-settings-phoneNumber-input").type("invalid");
>     cy.getBySel("user-settings-submit").click();
>     
>     // Verify phone number validation message
>     cy.getBySel("user-settings-phoneNumber-input")
>         .siblings("div")
>         .should("contain", "Phone number is not valid");
> });
> ````
> 
> This implementation:
> 
> 1. Clears all form fields to test empty field validation
> 2. Submits the form and verifies required field error messages
> 3. Tests invalid phone number format validation
> 4. Uses the same selectors found in other tests in the codebase
> 5. Follows Cypress best practices for assertions
> 6. Handles form validation errors in a way consistent with the application's behavior
> 
> The test covers:
> - Empty field validation for all required fields
> - Invalid phone number format validation
> - Error message display verification
> 
> The selectors (`getBySel`) and error message text match what's seen in other test files in the codebase. The validation messages are consistent with what appears in other test files in the workspace.
