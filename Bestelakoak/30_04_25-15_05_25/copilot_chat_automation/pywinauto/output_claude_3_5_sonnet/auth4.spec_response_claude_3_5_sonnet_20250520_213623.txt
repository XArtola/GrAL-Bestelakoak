---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should allow a visitor to sign-up, login, and logout", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the "should allow a visitor to sign-up, login, and logout" test block. Based on the provided test files and user information, here's the implementation:
> 
> ```typescript
> it("should allow a visitor to sign-up, login, and logout", () => {
>     // Visit signup page
>     cy.visit("/signup");
>     
>     // Fill out the signup form
>     cy.getBySel("signup-first-name").type(userInfo.firstName);
>     cy.getBySel("signup-last-name").type(userInfo.lastName);
>     cy.getBySel("signup-username").type(userInfo.username);
>     cy.getBySel("signup-password").type(userInfo.password);
>     cy.getBySel("signup-confirmPassword").type(userInfo.password);
>     
>     // Submit signup form
>     cy.getBySel("signup-submit").click();
>     
>     // Wait for signup API call to complete
>     cy.wait("@signup");
>     
>     // Create bank account during onboarding
>     cy.getBySel("user-onboarding-next").click();
>     cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>     cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>     cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>     cy.getBySel("bankaccount-submit").click();
>     
>     // Wait for bank account creation
>     cy.wait("@gqlCreateBankAccountMutation");
>     
>     // Complete onboarding
>     cy.getBySel("user-onboarding-next").click();
>     cy.getBySel("user-onboarding-next").click();
>     cy.getBySel("user-onboarding-done").click();
>     
>     // Verify successful login after signup
>     cy.getBySel("sidenav-user-full-name").should("contain", `${userInfo.firstName} ${userInfo.lastName}`);
>     
>     // Logout
>     if (isMobile()) {
>         cy.getBySel("sidenav-toggle").click();
>     }
>     cy.getBySel("sidenav-signout").click();
>     
>     // Verify redirect to signin page after logout
>     cy.location("pathname").should("equal", "/signin");
> });
> ```
> 
> This implementation:
> 
> 1. Starts with signup flow:
>    - Visits signup page
>    - Fills in user information
>    - Submits the form
>    - Waits for API response
> 
> 2. Handles the onboarding process:
>    - Creates a bank account
>    - Fills in bank details
>    - Completes onboarding steps
> 
> 3. Verifies successful login:
>    - Checks for user's full name in sidebar
> 
> 4. Performs logout:
>    - Handles mobile menu if needed
>    - Clicks logout button
>    - Verifies redirect to signin page
> 
> The code uses:
> - `cy.getBySel()` custom command for selecting elements by data-test attributes
> - `cy.wait()` to ensure API calls complete
> - `cy.location()` to verify URL changes
> - `isMobile()` utility for responsive testing
> - All provided user and bank account information
> 
> The implementation follows Cypress best practices by:
> - Using data attributes for selections
> - Waiting for API responses
> - Making appropriate assertions
> - Handling mobile/desktop scenarios
> - Including clear comments for each step
