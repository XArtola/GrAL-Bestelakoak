---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should allow a visitor to sign-up, login, and logout", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll generate the code for the "should allow a visitor to sign-up, login, and logout" test block in the Cypress test suite. Looking at the test name and attachments, this test should verify the complete user journey from signup to logout.
> 
> Here's the implementation for the test block:
> 
> ```typescript
> it("should allow a visitor to sign-up, login, and logout", () => {
>   // Visit the signup page
>   cy.visit("/signup");
>   
>   // Fill out the signup form with user details
>   cy.getBySel("signup-first-name").type(userInfo.firstName);
>   cy.getBySel("signup-last-name").type(userInfo.lastName);
>   cy.getBySel("signup-username").type(userInfo.username);
>   cy.getBySel("signup-password").type(userInfo.password);
>   cy.getBySel("signup-confirmPassword").type(userInfo.password);
>   
>   // Submit the form
>   cy.getBySel("signup-submit").click();
>   
>   // Wait for the signup request to complete
>   cy.wait("@signup");
>   
>   // After successful signup, user should be redirected to the onboarding page
>   cy.location("pathname").should("equal", "/");
>   
>   // Complete onboarding by creating a bank account
>   cy.getBySel("user-onboarding-next").click();
>   
>   // Fill out bank account form
>   cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>   cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>   cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>   
>   // Submit bank account form
>   cy.getBySel("bankaccount-submit").click();
>   
>   // Wait for bank account creation
>   cy.wait("@gqlCreateBankAccountMutation");
>   
>   // Complete the onboarding process
>   cy.getBySel("user-onboarding-next").click();
>   cy.getBySel("user-onboarding-next").click();
>   cy.getBySel("user-onboarding-done").click();
>   
>   // Verify successful login by checking for the user's name in the sidenav
>   cy.getBySel("sidenav-user-full-name").should("contain", `${userInfo.firstName} ${userInfo.lastName}`);
>   
>   // Logout (handle mobile case if needed)
>   if (isMobile()) {
>     cy.getBySel("sidenav-toggle").click();
>   }
>   cy.getBySel("sidenav-signout").click();
>   
>   // Verify redirect to signin page after logout
>   cy.location("pathname").should("equal", "/signin");
> });
> ```
> 
> This implementation follows the full user journey:
> 1. Signs up with the provided user information
> 2. Completes the onboarding process including bank account creation
> 3. Verifies login was successful by checking for user information
> 4. Logs out and verifies redirection to signin page
> 
> The test handles both mobile and desktop views with the conditional toggle for mobile navigation.
