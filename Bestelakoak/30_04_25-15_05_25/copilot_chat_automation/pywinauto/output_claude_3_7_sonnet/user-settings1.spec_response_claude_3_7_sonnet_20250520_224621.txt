---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
describe("User Settings", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("PATCH", "/users/*").as("updateUser");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.database("find", "users").then((user: User) => {
            cy.loginByXstate(user.username);
        });
        if (isMobile()) {
            cy.getBySel("sidenav-toggle").click();
        }
        cy.getBySel("sidenav-user-settings").click();
    });
    it("renders the user settings form", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "updatedUserInfo": {
    "firstName": "New First Name",
    "lastName": "New Last Name",
    "email": "email@email.com",
    "phoneNumber": "6155551212"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the provided test structure, I need to generate code for the Cypress test that checks if the user settings form renders correctly. The test is already set up with the necessary intercepts and login functionality in the `beforeEach` block.
> 
> Here's the implementation for the `renders the user settings form` test:
> 
> ```typescript
> // renders the user settings form
> it("renders the user settings form", () => {
>   // Verify that the user settings form is visible
>   cy.getBySel("user-settings-form").should("be.visible");
>   
>   // Verify that all required form fields are present and visible
>   cy.getBySel("user-settings-firstName-input").should("be.visible");
>   cy.getBySel("user-settings-lastName-input").should("be.visible");
>   cy.getBySel("user-settings-email-input").should("be.visible");
>   cy.getBySel("user-settings-phoneNumber-input").should("be.visible");
>   
>   // Verify the submit button exists
>   cy.getBySel("user-settings-submit").should("be.visible");
>   
>   // Verify that the form fields contain values (they should be pre-filled with user data)
>   cy.getBySel("user-settings-firstName-input").should("have.value");
>   cy.getBySel("user-settings-lastName-input").should("have.value");
>   cy.getBySel("user-settings-email-input").should("have.value");
>   cy.getBySel("user-settings-phoneNumber-input").should("have.value");
> });
> ```
> 
> This test checks that:
> 1. The user settings form is visible on the page
> 2. All the required input fields are present and visible
> 3. The submit button is visible
> 4. All fields have values (since they should be pre-filled with the logged-in user's data)
> 
> The test follows Cypress best practices by using the custom `getBySel` selector helper and making appropriate assertions to verify the form is rendered correctly.
