---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should error for an invalid password for existing user", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help generate the code for the test that checks error handling for invalid password with an existing user. Based on the provided code structure and user information, here's the implementation:
> 
> ```typescript
> // Test: should error for an invalid password for existing user
> it("should error for an invalid password for existing user", () => {
>     // Visit signin page
>     cy.visit("/signin");
>         
>     // Try to login with valid username but invalid password
>     cy.getBySel("signin-username").type(userInfo.username);
>     cy.getBySel("signin-password").type(loginCredentials.invalidPassword);
>     cy.getBySel("signin-submit").click();
>         
>     // Verify error message appears
>     cy.getBySel("signin-error")
>         .should("be.visible")
>         .and("have.text", "Username or password is invalid");
> });
> ```
> 
> This test implementation:
> 
> 1. Visits the signin page
> 2. Uses the valid username (PainterJoy90) but an invalid password
> 3. Submits the form
> 4. Verifies that an error message is displayed
> 
> The test uses the custom `getBySel` command which appears to be a utility for selecting elements by a `data-test` attribute. I also used:
> 
> - The existing username from userInfo
> - The invalid password from loginCredentials
> - Standard Cypress assertions to check visibility and text content
> - The signin page form selectors that are consistently used across the test files
> 
> The test follows established patterns seen in other auth spec files in the workspace and maintains consistency with the application's error handling behavior.
