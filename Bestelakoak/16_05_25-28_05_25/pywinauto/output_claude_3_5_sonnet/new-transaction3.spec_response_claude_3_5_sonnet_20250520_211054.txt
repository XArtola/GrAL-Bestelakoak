---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("displays new transaction errors", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the test case. Based on the provided test suite structure and context, here's the implementation for the `displays new transaction errors` test:
> 
> ```typescript
> it("displays new transaction errors", () => {
>     // Navigate to new transaction page
>     cy.getBySel("nav-top-new-transaction").click();
>     
>     // Search for the contact user
>     cy.getBySel("user-list-search-input").type(ctx.contact.firstName);
>     cy.wait("@usersSearch");
>     
>     // Select the user from the list
>     cy.getBySel("user-list-item").contains(ctx.contact.firstName).click();
>     
>     // Try to submit without entering an amount
>     cy.getBySel("transaction-create-submit-payment").click();
>     
>     // Verify error message is displayed
>     cy.getBySel("transaction-create-amount-error")
>         .should("be.visible")
>         .and("contain", "Please enter a valid amount");
> 
>     // Enter invalid amount
>     cy.getBySel("amount-input").type("0");
>     
>     // Try to submit with invalid amount
>     cy.getBySel("transaction-create-submit-payment").click();
>     
>     // Verify error message is still displayed
>     cy.getBySel("transaction-create-amount-error")
>         .should("be.visible")
>         .and("contain", "Please enter a valid amount");
> 
>     // Try to submit without a note/description
>     cy.getBySel("amount-input").clear().type("50");
>     cy.getBySel("transaction-create-submit-payment").click();
>     
>     // Verify note error message is displayed
>     cy.getBySel("transaction-create-description-error")
>         .should("be.visible")
>         .and("contain", "Please enter a note");
> });
> ```
> 
> This implementation:
> 
> 1. Tests error handling for required fields in the new transaction form
> 2. Verifies error messages for:
>    - Missing amount
>    - Invalid amount (zero)
>    - Missing description/note
> 3. Uses proper selectors based on the patterns seen in other test files
> 4. Includes appropriate wait commands for network requests
> 5. Follows Cypress best practices with proper assertions
> 
> The test uses data-test selectors consistently and follows the pattern seen in other test files in the codebase. It tests the main validation scenarios for the transaction form.
> 
> Let me know if you need any clarification or have questions about the implementation!
