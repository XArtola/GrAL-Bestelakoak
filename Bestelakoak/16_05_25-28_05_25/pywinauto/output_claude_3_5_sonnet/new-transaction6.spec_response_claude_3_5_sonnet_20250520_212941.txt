---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    context("searches for a user by attribute", function () {
        const searchAttrs: (keyof User)[] = [
            "firstName",
            "lastName",
            "username",
            "email",
            "phoneNumber",
        ];
        beforeEach(function () {
            cy.getBySelLike("new-transaction").click();
            cy.wait("@allUsers");
        });
        searchAttrs.forEach((attr: keyof User) => {
            it(attr, () => { });
        });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate code for the test suite that searches for users by different attributes. The test appears to be focused on searching for users in a new transaction form.
> 
> Based on the provided code structure and context, here's the implementation for each search attribute test:
> 
> ```typescript
> // For each attribute (firstName, lastName, username, email, phoneNumber)
> searchAttrs.forEach((attr: keyof User) => {
>     it(attr, () => {
>         // Get the search attribute value from the contact user
>         const searchValue = ctx.contact![attr];
>         
>         // Type the search value into the search input
>         cy.getBySel("user-list-search-input")
>             .clear() // Clear any existing input
>             .type(searchValue);
>             
>         // Wait for search results
>         cy.wait("@usersSearch");
>         
>         // Verify search results contain the user
>         cy.getBySel("user-list-item")
>             .should("have.length.at.least", 1)
>             .and("contain", searchValue);
>         
>         // Verify the searched user appears in results
>         cy.getBySel("user-list-item")
>             .first()
>             .within(() => {
>                 // The user info should be visible in the list item
>                 cy.contains(searchValue).should("be.visible");
>             });
>     });
> });
> ```
> 
> This implementation:
> 
> 1. Uses the test context's contact user to get real values for each attribute being searched
> 2. Performs the search using the search input field
> 3. Waits for the search API response
> 4. Verifies that:
>    - At least one result is returned
>    - The search value appears in the results
>    - The first result contains the searched value
> 
> Key points about the implementation:
> 
> - Uses cy.getBySel() which appears to be a custom command for selecting elements by data-test attributes
> - Leverages the test context (ctx.contact) which was set up in beforeEach
> - Handles all search attributes (firstName, lastName, username, email, phoneNumber) systematically
> - Includes proper waiting for the search API response using the intercepted request alias
> - Uses clear() before typing to ensure clean search input
> - Uses within() to scope verifications to specific list items
> 
> The code assumes:
> 1. The search input has a data-test attribute that can be selected with "user-list-search-input"
> 2. The list items have a data-test attribute that can be selected with "user-list-item"
> 3. The search results display the searched attribute value in a readable format
> 
> If any of these assumptions don't match the actual application, the selectors would need to be adjusted accordingly.
