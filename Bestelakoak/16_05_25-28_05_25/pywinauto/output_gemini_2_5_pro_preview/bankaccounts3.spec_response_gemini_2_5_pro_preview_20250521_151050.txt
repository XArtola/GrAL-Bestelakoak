---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("soft deletes a bank account", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Okay, I will generate the Cypress code for the `it` block. I'll assume that `userInfo` is a variable available in the scope, initialized with the content of the `<user_info>` block you provided, so `userInfo.bankAccountInfo` will be accessible.
> 
> ```
> // it("soft deletes a bank account", () => {
> <generated_code>
>     const { bankName, routingNumber, accountNumber } = userInfo.bankAccountInfo;
> 
>     // 1. Navigate to the Bank Accounts page
>     cy.visit("/bankaccounts");
>     cy.wait("@gqlListBankAccountQuery"); // Wait for initial list to load
> 
>     // 2. Click the 'Create' button to add a new bank account
>     // This ensures a bank account with known details exists for this test
>     cy.getBySel("bankaccount-new").click();
> 
>     // 3. Fill in the bank account form
>     cy.getBySel("bankaccount-bankName-input").type(bankName);
>     cy.getBySel("bankaccount-routingNumber-input").type(routingNumber);
>     cy.getBySel("bankaccount-accountNumber-input").type(accountNumber);
>     cy.getBySel("bankaccount-submit").click();
> 
>     // 4. Wait for the creation mutation and verify the bank account is listed
>     cy.wait("@gqlCreateBankAccountMutation").its("response.statusCode").should("eq", 200);
>     cy.getBySel("bankaccount-list").should("contain", bankName);
> 
>     // 5. Find the specific bank account item and click its delete button
>     // This assumes bank account items are 'li' elements within the 'bankaccount-list'
>     // and the delete button can be found using a selector like '[data-test*=delete]' within that item.
>     cy.getBySel("bankaccount-list")
>       .contains("li", bankName) // Find the list item containing the bank name
>       .within(() => {
>         cy.get("[data-test*=delete]").click(); // Click the delete button within this item
>       });
> 
>     // 6. Wait for the delete mutation
>     cy.wait("@gqlDeleteBankAccountMutation").its("response.statusCode").should("eq", 200);
> 
>     // 7. Verify the bank account is no longer in the list
>     cy.getBySel("bankaccount-list").should("not.contain", bankName);
> </generated_code>
> // });
> ```
