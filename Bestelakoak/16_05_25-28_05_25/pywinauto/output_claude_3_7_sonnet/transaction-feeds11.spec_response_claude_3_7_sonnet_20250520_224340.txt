---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from "../../../src/models";
import { addDays, isWithinInterval, startOfDay } from "date-fns";
import { startOfDayUTC, endOfDayUTC } from "../../../src/utils/transactionUtils";
import { isMobile } from "../../support/utils";
const { _ } = Cypress;
type TransactionFeedsCtx = {
    allUsers?: User[];
    user?: User;
    contactIds?: string[];
};
describe("Transaction Feed", function () {
    const ctx: TransactionFeedsCtx = {};
    const feedViews = {
        public: {
            tab: "public-tab",
            tabLabel: "everyone",
            routeAlias: "publicTransactions",
            service: "publicTransactionService",
        },
        contacts: {
            tab: "contacts-tab",
            tabLabel: "friends",
            routeAlias: "contactsTransactions",
            service: "contactTransactionService",
        },
        personal: {
            tab: "personal-tab",
            tabLabel: "mine",
            routeAlias: "personalTransactions",
            service: "personalTransactionService",
        },
    };
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions*").as(feedViews.personal.routeAlias);
        cy.intercept("GET", "/transactions/public*").as(feedViews.public.routeAlias);
        cy.intercept("GET", "/transactions/contacts*").as(feedViews.contacts.routeAlias);
        cy.database("filter", "users").then((users: User[]) => {
            ctx.user = users[0];
            ctx.allUsers = users;
            cy.loginByXstate(ctx.user.username);
        });
    });
    describe("Feed Item Visibility", () => {
        it("friends feed only shows contact transactions", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll create the code for the "friends feed only shows contact transactions" test block in the Transaction Feed test suite. Let's examine what this test should verify:
> 
> The test needs to check that the "friends" feed (contacts tab) only displays transactions that involve the user's contacts.
> 
> Here's the code for the test:
> 
> ```typescript
> // it("friends feed only shows contact transactions", () => { });
> it("friends feed only shows contact transactions", () => {
>     // Get the user's contacts first
>     cy.database("filter", "contacts", { userId: ctx.user!.id }).then((contacts: Contact[]) => {
>         const contactIds = contacts.map(contact => contact.contactUserId);
>         ctx.contactIds = contactIds;
>         
>         // If user has no contacts, skip test with a message
>         if (contactIds.length === 0) {
>             cy.log("User has no contacts. Test skipped.");
>             return;
>         }
>         
>         // Navigate to contacts feed
>         cy.getBySel("nav-contacts-tab").click();
>         cy.wait(`@${feedViews.contacts.routeAlias}`);
>         
>         // Check if there are any transactions in the friends feed
>         cy.get("body").then(($body) => {
>             // If no transactions are found, skip test with appropriate message
>             if ($body.find("[data-test=empty-list-header]").length > 0) {
>                 cy.log("No transactions found in friends feed. Test skipped.");
>                 return;
>             }
>             
>             // Verify all transactions involve at least one contact
>             cy.getBySel("transaction-item").each(($el) => {
>                 // Get sender and receiver IDs from the transaction item
>                 cy.wrap($el).within(() => {
>                     // For each transaction, check if it involves at least one contact
>                     // We look for data-test attributes that start with "transaction-sender-" or "transaction-receiver-"
>                     cy.get("[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']")
>                         .should("exist")
>                         .then($participants => {
>                             // Extract user IDs from the data-test attributes
>                             const participantIds = Array.from($participants).map(el => {
>                                 const dataTest = el.getAttribute("data-test");
>                                 return dataTest ? dataTest.split("-")[2] : "";
>                             });
>                             
>                             // At least one participant should be in the contact list
>                             const involvesContact = participantIds.some(id => contactIds.includes(id));
>                             expect(involvesContact, "Transaction involves at least one contact").to.be.true;
>                         });
>                 });
>             });
>         });
>     });
> });
> ```
> 
> This test:
> 1. Retrieves the user's contacts from the database
> 2. Maps the contacts to get just the contact user IDs
> 3. Handles edge cases (no contacts or no transactions)
> 4. Navigates to the contacts feed (friends tab)
> 5. Checks each transaction in the feed to verify it involves at least one contact
> 6. Uses assertions to confirm that each transaction has at least one participant who is in the contact list
> 
> The test handles edge cases properly and uses Cypress best practices like waiting for network requests, proper element selection using data attributes, and clear assertions.
