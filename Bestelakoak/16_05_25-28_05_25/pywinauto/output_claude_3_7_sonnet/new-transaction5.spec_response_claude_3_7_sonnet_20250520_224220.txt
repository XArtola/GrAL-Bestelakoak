---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("submits a transaction request and accepts the request for the receiver", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the "submits a transaction request and accepts the request for the receiver" test block. Looking at the test description and available information, I'll create a complete test that requests money from another user and then accepts that request.
> 
> <generated_code>
> // submits a transaction request and accepts the request for the receiver
> it("submits a transaction request and accepts the request for the receiver", () => {
>   // Define the transaction to use from the userInfo
>   const requestTransaction = {
>     amount: "95",
>     description: "Fancy Hotel üè®"
>   };
> 
>   // Step 1: Navigate to the new transaction form
>   cy.getBySel("new-transaction").click();
>   cy.wait("@allUsers");
>   
>   // Step 2: Search for contact user to request money from
>   cy.getBySel("user-list-search-input").type(ctx.contact!.firstName);
>   cy.wait("@usersSearch");
>   
>   // Step 3: Select the contact from the search results
>   cy.getBySel("user-list-item").first().click();
>   
>   // Step 4: Enter request details
>   cy.getBySel("amount-input").type(requestTransaction.amount);
>   cy.getBySel("transaction-create-description-input").type(requestTransaction.description);
>   
>   // Step 5: Submit the request
>   cy.getBySelLike("transaction-create-submit-request").click();
>   cy.wait("@createTransaction");
>   
>   // Step 6: Verify request was created
>   cy.getBySel("alert-bar-success").should("be.visible");
>   cy.getBySel("nav-personal-tab").should("have.class", "Mui-selected");
>   cy.getBySel("transaction-item").first()
>     .should("contain", requestTransaction.description)
>     .and("contain", `$${requestTransaction.amount}`);
>   
>   // Step 7: Logout and login as the contact (receiver of request)
>   cy.switchUserByXstate(ctx.contact!.username);
>   
>   // Step 8: Go to personal transactions
>   cy.getBySel("nav-personal-tab").click();
>   cy.wait("@personalTransactions");
>   
>   // Step 9: Find and click on the transaction request
>   cy.getBySel("transaction-item")
>     .first()
>     .should("contain", requestTransaction.description)
>     .click();
>   
>   // Step 10: Accept the request
>   cy.getBySel("transaction-accept-request").click();
>   cy.wait("@updateTransaction");
>   
>   // Step 11: Verify the transaction status is updated
>   cy.getBySel("transaction-detail-header")
>     .should("contain", "Paid");
> });
> </generated_code>
> 
> This code implements a complete test that:
> 
> 1. Creates a new transaction request for $95 for "Fancy Hotel üè®"
> 2. Verifies the request was created successfully
> 3. Switches to the receiver's account
> 4. Finds the request in the receiver's transaction list
> 5. Accepts the request
> 6. Verifies the transaction status is updated to "Paid"
> 
> The test uses data selectors with `getBySel` and `getBySelLike` helpers that appear to be custom commands in this Cypress implementation, and it follows the application flow based on the context provided in the various test files.
