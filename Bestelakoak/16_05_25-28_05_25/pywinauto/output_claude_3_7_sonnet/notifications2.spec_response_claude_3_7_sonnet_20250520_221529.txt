---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll generate the code for the Cypress test that verifies notifications functionality when one user likes a transaction between two other users.
> 
> Looking at the test description and the code structure, this test needs to:
> 1. Create a transaction between User A and User B
> 2. Have User C like that transaction
> 3. Verify that both User A and User B receive notifications about User C's like
> 
> Here's the implementation:
> 
> ```typescript
> // User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction
> it("User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction", () => {
>     // Step 1: Find an existing transaction between User A and User B or create a new one
>     cy.database("find", "transactions", { senderId: ctx.userA.id, receiverId: ctx.userB.id }).then(
>         (transaction: Transaction) => {
>             if (transaction) {
>                 // Use existing transaction
>                 performLikeAndCheckNotifications(transaction.id);
>             } else {
>                 // Create a new transaction between User A and User B
>                 cy.loginByXstate(ctx.userA.username);
>                 
>                 // Navigate to new transaction form
>                 cy.getBySel("nav-top-new-transaction").click();
>                 
>                 // Select User B as recipient
>                 cy.getBySel("user-list-search-input").type(ctx.userB.firstName);
>                 cy.getBySel("user-list-item").first().click();
>                 
>                 // Enter transaction details
>                 cy.getBySel("amount-input").type("50");
>                 cy.getBySel("transaction-create-description-input").type("Test transaction for like notification");
>                 cy.getBySel("transaction-create-submit-payment").click();
>                 
>                 // Wait for transaction creation to complete
>                 cy.wait("@createTransaction").then((intercept) => {
>                     // Extract transaction ID from the response
>                     const transactionId = intercept.response.body.transaction.id;
>                     
>                     // Log out User A
>                     cy.getBySel("sidenav-signout").click();
>                     
>                     // Continue with the test using the new transaction
>                     performLikeAndCheckNotifications(transactionId);
>                 });
>             }
>         }
>     );
>     
>     // Function to perform like and check notifications for both users
>     function performLikeAndCheckNotifications(transactionId: string) {
>         // Log in as User C
>         cy.loginByXstate(ctx.userC.username);
>         
>         // Navigate to the transaction
>         cy.visit(`/transaction/${transactionId}`);
>         
>         // User C likes the transaction
>         cy.getBySel("like-button").click();
>         cy.wait("@postLike");
>         
>         // Log out as User C
>         cy.getBySel("sidenav-signout").click();
>         
>         // Log in as User A and check for notification
>         cy.loginByXstate(ctx.userA.username);
>         cy.wait("@getNotifications");
>         
>         // Verify notification count badge shows correctly
>         cy.getBySel("nav-top-notifications-count").should("exist");
>         
>         // Open notifications panel
>         cy.getBySel("nav-top-notifications-link").click();
>         
>         // Verify User A received notification that User C liked their transaction
>         cy.getBySel("notification-list-item")
>             .first()
>             .should("contain", ctx.userC.firstName)
>             .and("contain", "liked");
>         
>         // Log out as User A
>         cy.getBySel("sidenav-signout").click();
>         
>         // Log in as User B and check for notification
>         cy.loginByXstate(ctx.userB.username);
>         cy.wait("@getNotifications");
>         
>         // Verify notification count badge shows correctly
>         cy.getBySel("nav-top-notifications-count").should("exist");
>         
>         // Open notifications panel
>         cy.getBySel("nav-top-notifications-link").click();
>         
>         // Verify User B received notification that User C liked their transaction
>         cy.getBySel("notification-list-item")
>             .first()
>             .should("contain", ctx.userC.firstName)
>             .and("contain", "liked");
>     }
> });
> ```
> 
> This implementation:
> 1. First tries to find an existing transaction between Users A and B
> 2. If one doesn't exist, it creates a new transaction
> 3. Then it has User C like the transaction
> 4. Verifies User A receives a notification about the like
> 5. Verifies User B also receives a notification about the like
> 
> The code handles the login/logout flow between different users and properly waits for API responses before proceeding to the next steps.
