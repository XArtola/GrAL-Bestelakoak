---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should allow a visitor to sign-up, login, and logout", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the provided test structure and user information, I'll generate the code for the "should allow a visitor to sign-up, login, and logout" test. Based on the examples in the workspace, I can see the typical flow involves signup, bank account creation during onboarding, and then logout.
> 
> <generated_code>
> ```typescript
> // should allow a visitor to sign-up, login, and logout
> it("should allow a visitor to sign-up, login, and logout", () => {
>     // Step 1: Visit the signup page
>     cy.visit("/signup");
>     
>     // Step 2: Fill out the signup form with user information
>     cy.getBySel("signup-first-name").type(userInfo.firstName);
>     cy.getBySel("signup-last-name").type(userInfo.lastName);
>     cy.getBySel("signup-username").type(userInfo.username);
>     cy.getBySel("signup-password").type(userInfo.password);
>     cy.getBySel("signup-confirmPassword").type(userInfo.password);
>     
>     // Step 3: Submit the signup form
>     cy.getBySel("signup-submit").click();
>     
>     // Step 4: Wait for signup request to complete
>     cy.wait("@signup");
>     
>     // Step 5: Complete onboarding by creating a bank account
>     // Navigate through onboarding flow
>     cy.getBySel("user-onboarding-next").click();
>     
>     // Fill in bank account details
>     cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>     cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>     cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>     
>     // Submit bank account form
>     cy.getBySel("bankaccount-submit").click();
>     
>     // Wait for bank account creation
>     cy.wait("@gqlCreateBankAccountMutation");
>     
>     // Complete onboarding
>     cy.getBySel("user-onboarding-next").click();
>     cy.getBySel("user-onboarding-done").click();
>     
>     // Step 6: Verify successful login - should be on home page
>     cy.location("pathname").should("equal", "/");
>     cy.getBySel("sidenav-user-full-name").should("contain", `${userInfo.firstName} ${userInfo.lastName}`);
>     
>     // Step 7: Logout
>     // Handle mobile navigation if needed
>     if (isMobile()) {
>         cy.getBySel("sidenav-toggle").click();
>     }
>     cy.getBySel("sidenav-signout").click();
>     
>     // Step 8: Verify logout - should be redirected to signin page
>     cy.location("pathname").should("equal", "/signin");
> });
> ```
> </generated_code>
> 
> The generated code follows the typical user flow seen in the workspace examples:
> 
> 1. **Signup Process**: Visits signup page, fills out the form with the provided user information, and submits
> 2. **Onboarding**: Completes the required bank account creation during user onboarding
> 3. **Verification**: Confirms successful login by checking the URL and user display name
> 4. **Logout**: Handles mobile navigation if needed and clicks the signout button
> 5. **Final Verification**: Confirms the user is redirected back to the signin page
> 
> The code uses the standard Cypress selectors (`cy.getBySel()`) that are used throughout the workspace, includes proper waits for API calls, and follows the mobile-responsive patterns seen in other tests.
