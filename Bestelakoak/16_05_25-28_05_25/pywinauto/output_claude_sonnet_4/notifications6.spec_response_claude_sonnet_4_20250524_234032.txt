---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User A sends a payment request to User C", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the test structure and the user context setup, I can see this is a notifications test for user interactions. Based on the existing code structure and similar test patterns I can see in the workspace, here's the generated code for the test:
> 
> <generated_code>
> // User A sends a payment request to User C
> it("User A sends a payment request to User C", () => {
>     // Login as User A
>     cy.loginByXstate(ctx.userA.username);
>     
>     // Navigate to create new transaction
>     cy.getBySel("new-transaction").click();
>     
>     // Search for and select User C
>     cy.getBySel("user-list-search-input").type(ctx.userC.firstName);
>     cy.getBySel("user-list-item").first().click();
>     
>     // Enter transaction details for a request
>     cy.getBySel("amount-input").type("75");
>     cy.getBySel("transaction-create-description-input").type("Payment request from A to C");
>     
>     // Submit the payment request
>     cy.getBySel("transaction-create-submit-request").click();
>     
>     // Wait for the transaction to be created
>     cy.wait("@createTransaction");
>     
>     // Switch to User C to verify notification
>     cy.loginByXstate(ctx.userC.username);
>     
>     // Navigate to notifications
>     cy.visit("/notifications");
>     cy.wait("@getNotifications");
>     
>     // Verify that User C received a notification about the payment request
>     cy.getBySel("notification-list-item")
>         .should("contain", ctx.userA.firstName)
>         .and("contain", "requested");
>     
>     // Verify notification count is updated
>     cy.getBySel("nav-top-notifications-count").should("exist");
> });
> </generated_code>
