---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User A sends a payment to User B", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the test structure and examining similar test files in your workspace, I can see this is for testing notifications functionality in a financial app. Here's the generated code for the "User A sends a payment to User B" test:
> 
> <generated_code>
> // User A sends a payment to User B
> cy.loginByXstate(ctx.userA.username);
> 
> // Navigate to create new transaction
> cy.getBySel("new-transaction").click();
> 
> // Search for and select User B
> cy.getBySel("user-list-search-input").type(ctx.userB.firstName);
> cy.getBySel("user-list-item").first().click();
> 
> // Enter payment amount and description
> cy.getBySel("amount-input").type("50");
> cy.getBySel("transaction-create-description-input").type("Payment from A to B");
> 
> // Submit the payment
> cy.getBySel("transaction-create-submit-payment").click();
> cy.wait("@createTransaction");
> 
> // Logout User A
> cy.getBySel("sidenav-signout").click();
> 
> // Login as User B to check notifications
> cy.loginByXstate(ctx.userB.username);
> 
> // Navigate to notifications
> cy.getBySel("nav-top-notifications-count").should("exist");
> cy.getBySel("sidenav-notifications").click();
> cy.wait("@getNotifications");
> 
> // Verify User B received notification about the payment
> cy.getBySel("notification-list-item")
>     .first()
>     .should("contain", ctx.userA.firstName)
>     .and("contain", "paid");
> </generated_code>
> 
> This code follows the pattern I observed in similar notification test files in your workspace:
> 
> 1. **Login as User A** - Uses the `cy.loginByXstate()` command with the username from the context
> 2. **Create a payment transaction** - Navigates to new transaction, selects User B, enters amount and description
> 3. **Submit the payment** - Clicks the payment submit button and waits for the transaction to be created
> 4. **Switch to User B** - Logs out User A and logs in as User B
> 5. **Check notifications** - Navigates to notifications page and verifies that User B received a notification about User A's payment
> 
> The test uses data selectors (`getBySel`) that are consistent with the patterns I found in files like notifications.spec.ts and other notification test files in your workspace.
