---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from "../../../src/models";
import { addDays, isWithinInterval, startOfDay } from "date-fns";
import { startOfDayUTC, endOfDayUTC } from "../../../src/utils/transactionUtils";
import { isMobile } from "../../support/utils";
const { _ } = Cypress;
type TransactionFeedsCtx = {
    allUsers?: User[];
    user?: User;
    contactIds?: string[];
};
describe("Transaction Feed", function () {
    const ctx: TransactionFeedsCtx = {};
    const feedViews = {
        public: {
            tab: "public-tab",
            tabLabel: "everyone",
            routeAlias: "publicTransactions",
            service: "publicTransactionService",
        },
        contacts: {
            tab: "contacts-tab",
            tabLabel: "friends",
            routeAlias: "contactsTransactions",
            service: "contactTransactionService",
        },
        personal: {
            tab: "personal-tab",
            tabLabel: "mine",
            routeAlias: "personalTransactions",
            service: "personalTransactionService",
        },
    };
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions*").as(feedViews.personal.routeAlias);
        cy.intercept("GET", "/transactions/public*").as(feedViews.public.routeAlias);
        cy.intercept("GET", "/transactions/contacts*").as(feedViews.contacts.routeAlias);
        cy.database("filter", "users").then((users: User[]) => {
            ctx.user = users[0];
            ctx.allUsers = users;
            cy.loginByXstate(ctx.user.username);
        });
    });
    describe("filters transaction feeds by date range", function () {
        if (isMobile()) {}
        _.each(feedViews, (feed, feedName) => {
            it(`filters ${feedName} transaction feed by date range`, () => { });
        });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Below is an example of generated code for each of the "it" blocks. In this example, we set a date range (today until 7 days later), trigger the date range picker command, wait for the API call (using each feed’s alias), and then assert that each transaction item shown has a date within the expected range. (Note that no user info properties are used here since the test description is for filtering by date range.) 
> 
> ► Generated code inside each "it" block:
> 
> <generated_code>
> // ─── filters [feedName] transaction feed by date range ─────────────────────────
> // Define a date range for filtering
> const startDate = new Date(); 
> const endDate = addDays(startDate, 7);
> 
> // Use the custom Cypress command to pick the date range
> cy.pickDateRange(startDate, endDate); 
> 
> // Wait for the API call associated with this feed to complete
> cy.wait(`@${feed.routeAlias}`);
> 
> // Log the feed being verified (for debugging purposes)
> cy.log(`Verifying ${feedName} transaction feed within date range`, {
>   startDate: startDate.toISOString(),
>   endDate: endDate.toISOString(),
> });
> 
> // Verify that each transaction item’s date is within the selected range.
> // (Assumes that each transaction item has a data attribute "data-transaction-date" with an ISO date string.)
> cy.getBySel("transaction-item").each(($el) => {
>   // Get the transaction date from the element's attribute.
>   const transactionDateStr = $el.attr("data-transaction-date");
>   expect(transactionDateStr, "Transaction date should exist").to.exist;
>   const transactionDate = new Date(transactionDateStr);
>   
>   // Use date-fns to get the start and end of the day for comparison.
>   const dayStart = startOfDay(transactionDate);
>   const dayEnd = endOfDayUTC(transactionDate);
>   
>   // Assert that the transaction date falls within our selected date range.
>   expect(
>     isWithinInterval(transactionDate, { start: startOfDay(startDate), end: endOfDayUTC(endDate) }),
>     `Transaction date ${transactionDateStr} for ${feedName} feed is within the range`
>   ).to.be.true;
> });
> </generated_code>
> 
> Each generated code block appears inside the iteration over feedViews so that the test name (for example, "filters public transaction feed by date range") is preserved and validated accordingly. If additional details (such as specific selectors or user data) are required, those values should be provided.
