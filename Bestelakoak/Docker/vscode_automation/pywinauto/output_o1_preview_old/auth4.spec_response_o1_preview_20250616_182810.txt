---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
describe("User Sign-up and Login", function () {
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("POST", "/users").as("signup");
        cy.intercept("POST", apiGraphQL, (req) => {
            const { body } = req;
            if (body.hasOwnProperty("operationName") && body.operationName === "CreateBankAccount") {
                req.alias = "gqlCreateBankAccountMutation";
            }
        });
    });
    it("should allow a visitor to sign-up, login, and logout", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "userInfo": {
    "firstName": "Bob",
    "lastName": "Ross",
    "username": "PainterJoy90",
    "password": "s3cret"
  },
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "accountNumber": "123456789",
    "routingNumber": "987654321"
  },
  "loginCredentials": {
    "validPassword": "s3cret",
    "invalidUsername": "invalidUserName",
    "invalidPassword": "invalidPa$word",
    "anotherInvalidPassword": "INVALID"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: <generated_code>
>     // it("should allow a visitor to sign-up, login, and logout", () => { ... })
>     // Step-by-step test code for user sign-up, login, and logout
> 
>     // 1. Visit the sign-in page
>     cy.visit("/signin");
> 
>     // 2. Click on the sign-up link
>     cy.getBySel("signup-link").click();
> 
>     // 3. Fill out the sign-up form with userInfo data
>     cy.getBySel("signup-first-name").type(userInfo.firstName);
>     cy.getBySel("signup-last-name").type(userInfo.lastName);
>     cy.getBySel("signup-username").type(userInfo.username);
>     cy.getBySel("signup-password").type(userInfo.password);
>     cy.getBySel("signup-confirmPassword").type(userInfo.password);
> 
>     // 4. Submit the sign-up form
>     cy.getBySel("signup-submit").click();
> 
>     // 5. Wait for the sign-up network request to complete
>     cy.wait("@signup");
> 
>     // 6. Assert that the user has been redirected away from the sign-in page
>     cy.url().should("not.include", "/signin");
> 
>     // 7. Logout the newly registered user
>     cy.getBySel("sidenav-logout").click();
>     cy.url().should("include", "/signin");
> 
>     // 8. Log back in with the same user credentials
>     cy.getBySel("signin-username").type(userInfo.username);
>     cy.getBySel("signin-password").type(userInfo.password);
>     cy.getBySel("signin-submit").click();
> 
>     // 9. Assert that login was successful (user is not on /signin)
>     cy.url().should("not.include", "/signin");
> 
>     // 10. Logout again to complete the flow
>     cy.getBySel("sidenav-logout").click();
>     cy.url().should("include", "/signin");
> </generated_code>
