{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\split-specs.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs.js\n\n// Función principal del transformador de JSCodeshift\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source); // Parsea el código fuente a un AST\n\n  // Encuentra todos los nodos de llamada a la función 'it'\n  // Nota: Buscamos la CallExpression, pero necesitamos operar sobre el\n  //       Statement que la contiene (usualmente ExpressionStatement) para removerla correctamente.\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths(); // Obtenemos los \"paths\" para tener más contexto\n\n  // Si no hay bloques 'it' o solo hay uno, no hacemos nada con este archivo.\n  if (itPaths.length <= 1) {\n    console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. No se requiere división.`);\n    return null; // No se generan nuevos archivos\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath); // Debería ser '.ts'\n  const baseName = _path.default.basename(originalPath, ext); // Ej: 'mi-componente.spec'\n\n  // --- Generación de un archivo por cada bloque 'it' ---\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear una copia FRESCAdel AST original para cada archivo de salida\n    //    La forma más simple es volver a parsear la fuente original.\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar TODOS los 'it' DENTRO DE ESTA COPIA del AST\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Identificar el nodo 'it' específico que queremos MANTENER en esta copia\n    //    (Basado en la posición/estructura, no es trivial comparar nodos directamente entre ASTs parseados por separado,\n    //     pero podemos asumir que el índice en la búsqueda será consistente si el código no cambia)\n    const nodeToKeep = targetItPath.node;\n\n    // 4. Eliminar TODOS los otros bloques 'it' de la copia del AST\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      // Comparamos los nodos originales para saber cuál mantener.\n      // Es una comparación superficial, pero debería funcionar si los nodos no son idénticos.\n      // Una comparación más robusta podría usar localizaciones (línea/columna) si fuera necesario.\n      if (currentItPathInCopy.node !== nodeToKeep) {\n        try {\n          // Intentamos eliminar el 'statement' padre (usualmente ExpressionStatement)\n          // que contiene la llamada a 'it'. Esto es más limpio que eliminar solo la llamada.\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement') {\n            j(parentStatementPath).remove();\n          } else {\n            var _currentItPathInCopy$;\n            // Si 'it' no está directamente en un ExpressionStatement (raro en specs),\n            // podríamos necesitar lógica más compleja. Por ahora, intentamos quitar el 'it'.\n            j(currentItPathInCopy).remove();\n            console.warn(`Advertencia: El bloque 'it' en ${fileInfo.path} (línea ${(_currentItPathInCopy$ = currentItPathInCopy.node.loc) === null || _currentItPathInCopy$ === void 0 || (_currentItPathInCopy$ = _currentItPathInCopy$.start) === null || _currentItPathInCopy$ === void 0 ? void 0 : _currentItPathInCopy$.line}) no estaba en un ExpressionStatement directo. Se eliminó la llamada, pero podría quedar código residual.`);\n          }\n        } catch (error) {\n          console.error(`Error al intentar eliminar un bloque 'it' en ${fileInfo.path} para el archivo ${index + 1}:`, error);\n        }\n      }\n    });\n\n    // 5. Generar el código fuente desde el AST modificado (solo con un 'it')\n    //    Usamos las opciones de Recast (implícitas en jscodeshift) para intentar mantener el formato.\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 6. Construir el nuevo nombre de archivo\n    //    Ej: mi-componente.spec.ts -> mi-componente.spec1.ts, mi-componente.spec2.ts\n    const newFileName = `${baseName}${index + 1}${ext}`;\n    const newFilePath = _path.default.join(dir, newFileName);\n\n    // 7. Escribir el nuevo archivo\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error al escribir el archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Importante: Devolvemos 'null' para indicar a jscodeshift que NO\n  // sobrescriba el archivo original. Nosotros ya hemos creado los nuevos archivos.\n  return null;\n}\n\n// Opcional: Indica a jscodeshift que use el parser de Babel (que soporta TS)\n// Esto suele ser necesario si no pasas --parser=ts en la línea de comandos.\n// export const parser = 'ts'; // O 'tsx' si tienes JSX\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","console","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","forEach","targetItPath","index","astCopy","allItPathsInCopy","nodeToKeep","node","currentItPathInCopy","parentStatementPath","parentPath","type","remove","_currentItPathInCopy$","warn","loc","start","line","error","outputSource","toSource","quote","trailingComma","newFileName","newFilePath","join","fs","writeFileSync"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\","sources":["split-specs.js"],"sourcesContent":["// split-specs.js\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// Función principal del transformador de JSCodeshift\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source); // Parsea el código fuente a un AST\r\n\r\n  // Encuentra todos los nodos de llamada a la función 'it'\r\n  // Nota: Buscamos la CallExpression, pero necesitamos operar sobre el\r\n  //       Statement que la contiene (usualmente ExpressionStatement) para removerla correctamente.\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths(); // Obtenemos los \"paths\" para tener más contexto\r\n\r\n  // Si no hay bloques 'it' o solo hay uno, no hacemos nada con este archivo.\r\n  if (itPaths.length <= 1) {\r\n    console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. No se requiere división.`);\r\n    return null; // No se generan nuevos archivos\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath); // Debería ser '.ts'\r\n  const baseName = path.basename(originalPath, ext); // Ej: 'mi-componente.spec'\r\n\r\n  // --- Generación de un archivo por cada bloque 'it' ---\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear una copia FRESCAdel AST original para cada archivo de salida\r\n    //    La forma más simple es volver a parsear la fuente original.\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar TODOS los 'it' DENTRO DE ESTA COPIA del AST\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Identificar el nodo 'it' específico que queremos MANTENER en esta copia\r\n    //    (Basado en la posición/estructura, no es trivial comparar nodos directamente entre ASTs parseados por separado,\r\n    //     pero podemos asumir que el índice en la búsqueda será consistente si el código no cambia)\r\n    const nodeToKeep = targetItPath.node;\r\n\r\n    // 4. Eliminar TODOS los otros bloques 'it' de la copia del AST\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n      // Comparamos los nodos originales para saber cuál mantener.\r\n      // Es una comparación superficial, pero debería funcionar si los nodos no son idénticos.\r\n      // Una comparación más robusta podría usar localizaciones (línea/columna) si fuera necesario.\r\n      if (currentItPathInCopy.node !== nodeToKeep) {\r\n         try {\r\n             // Intentamos eliminar el 'statement' padre (usualmente ExpressionStatement)\r\n             // que contiene la llamada a 'it'. Esto es más limpio que eliminar solo la llamada.\r\n             const parentStatementPath = currentItPathInCopy.parentPath;\r\n             if (parentStatementPath.node.type === 'ExpressionStatement') {\r\n                 j(parentStatementPath).remove();\r\n             } else {\r\n                 // Si 'it' no está directamente en un ExpressionStatement (raro en specs),\r\n                 // podríamos necesitar lógica más compleja. Por ahora, intentamos quitar el 'it'.\r\n                 j(currentItPathInCopy).remove();\r\n                 console.warn(`Advertencia: El bloque 'it' en ${fileInfo.path} (línea ${currentItPathInCopy.node.loc?.start?.line}) no estaba en un ExpressionStatement directo. Se eliminó la llamada, pero podría quedar código residual.`);\r\n             }\r\n         } catch (error) {\r\n              console.error(`Error al intentar eliminar un bloque 'it' en ${fileInfo.path} para el archivo ${index + 1}:`, error);\r\n         }\r\n      }\r\n    });\r\n\r\n    // 5. Generar el código fuente desde el AST modificado (solo con un 'it')\r\n    //    Usamos las opciones de Recast (implícitas en jscodeshift) para intentar mantener el formato.\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 6. Construir el nuevo nombre de archivo\r\n    //    Ej: mi-componente.spec.ts -> mi-componente.spec1.ts, mi-componente.spec2.ts\r\n    const newFileName = `${baseName}${index + 1}${ext}`;\r\n    const newFilePath = path.join(dir, newFileName);\r\n\r\n    // 7. Escribir el nuevo archivo\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error al escribir el archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Importante: Devolvemos 'null' para indicar a jscodeshift que NO\r\n  // sobrescriba el archivo original. Nosotros ya hemos creado los nuevos archivos.\r\n  return null;\r\n}\r\n\r\n// Opcional: Indica a jscodeshift que use el parser de Babel (que soporta TS)\r\n// Esto suele ser necesario si no pasas --parser=ts en la línea de comandos.\r\n// export const parser = 'ts'; // O 'tsx' si tienes JSX"],"mappings":"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","ignoreList":[]}},"mtime":1746461525405},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\ts.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\nconst options = require('./tsOptions');\n\n/**\n * Doesn't accept custom options because babylon should be used directly in\n * that case.\n */\nmodule.exports = function () {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWJ5bG9uIiwicmVxdWlyZSIsIm9wdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2UiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHhhYmlhXFxPbmVEcml2ZVxcRG9jdW1lbnRvc1xcNC5NYWlsYVxcVEZHLUJlc3RlbGFrb2FrXFxCZXN0ZWxha29ha1xcMzBfMDRfMjUtMTVfMDVfMjVcXHNwbGl0SVRKQ29kZVNoaWZ0XFxub2RlX21vZHVsZXNcXGpzY29kZXNoaWZ0XFxwYXJzZXJcXCIsInNvdXJjZXMiOlsidHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgYmFieWxvbiA9IHJlcXVpcmUoJ0BiYWJlbC9wYXJzZXInKTtcbmNvbnN0IG9wdGlvbnMgPSByZXF1aXJlKCcuL3RzT3B0aW9ucycpO1xuXG4vKipcbiAqIERvZXNuJ3QgYWNjZXB0IGN1c3RvbSBvcHRpb25zIGJlY2F1c2UgYmFieWxvbiBzaG91bGQgYmUgdXNlZCBkaXJlY3RseSBpblxuICogdGhhdCBjYXNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHBhcnNlKGNvZGUpIHtcbiAgICAgIHJldHVybiBiYWJ5bG9uLnBhcnNlKGNvZGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTs7QUFFWixNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDeEMsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsYUFBYSxDQUFDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBQzFCLE9BQU87SUFDTEMsS0FBS0EsQ0FBQ0MsSUFBSSxFQUFFO01BQ1YsT0FBT04sT0FBTyxDQUFDSyxLQUFLLENBQUNDLElBQUksRUFBRUosT0FBTyxDQUFDO0lBQ3JDO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=","map":{"version":3,"names":["babylon","require","options","module","exports","parse","code"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\node_modules\\jscodeshift\\parser\\","sources":["ts.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\nconst options = require('./tsOptions');\n\n/**\n * Doesn't accept custom options because babylon should be used directly in\n * that case.\n */\nmodule.exports = function() {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    },\n  };\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AACxC,MAAMC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,YAAW;EAC1B,OAAO;IACLC,KAAKA,CAACC,IAAI,EAAE;MACV,OAAON,OAAO,CAACK,KAAK,CAACC,IAAI,EAAEJ,OAAO,CAAC;IACrC;EACF,CAAC;AACH,CAAC","ignoreList":[]}},"mtime":1746461488457},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\tsOptions.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Options shared by the TypeScript and TSX parsers.\n */\nmodule.exports = {\n  sourceType: 'module',\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: ['asyncGenerators', 'decoratorAutoAccessors', 'bigInt', 'classPrivateMethods', 'classPrivateProperties', 'classProperties', 'decorators-legacy', 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportExtensions', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importAttributes', 'importMeta', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', ['pipelineOperator', {\n    proposal: 'minimal'\n  }], 'throwExpressions', 'typescript']\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic291cmNlVHlwZSIsImFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZSIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwic3RhcnRMaW5lIiwidG9rZW5zIiwicGx1Z2lucyIsInByb3Bvc2FsIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHhhYmlhXFxPbmVEcml2ZVxcRG9jdW1lbnRvc1xcNC5NYWlsYVxcVEZHLUJlc3RlbGFrb2FrXFxCZXN0ZWxha29ha1xcMzBfMDRfMjUtMTVfMDVfMjVcXHNwbGl0SVRKQ29kZVNoaWZ0XFxub2RlX21vZHVsZXNcXGpzY29kZXNoaWZ0XFxwYXJzZXJcXCIsInNvdXJjZXMiOlsidHNPcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogT3B0aW9ucyBzaGFyZWQgYnkgdGhlIFR5cGVTY3JpcHQgYW5kIFRTWCBwYXJzZXJzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc291cmNlVHlwZTogJ21vZHVsZScsXG4gIGFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZTogdHJ1ZSxcbiAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IHRydWUsXG4gIHN0YXJ0TGluZTogMSxcbiAgdG9rZW5zOiB0cnVlLFxuICBwbHVnaW5zOiBbXG4gICAgJ2FzeW5jR2VuZXJhdG9ycycsXG4gICAgJ2RlY29yYXRvckF1dG9BY2Nlc3NvcnMnLFxuICAgICdiaWdJbnQnLFxuICAgICdjbGFzc1ByaXZhdGVNZXRob2RzJyxcbiAgICAnY2xhc3NQcml2YXRlUHJvcGVydGllcycsXG4gICAgJ2NsYXNzUHJvcGVydGllcycsXG4gICAgJ2RlY29yYXRvcnMtbGVnYWN5JyxcbiAgICAnZG9FeHByZXNzaW9ucycsXG4gICAgJ2R5bmFtaWNJbXBvcnQnLFxuICAgICdleHBvcnREZWZhdWx0RnJvbScsXG4gICAgJ2V4cG9ydEV4dGVuc2lvbnMnLFxuICAgICdleHBvcnROYW1lc3BhY2VGcm9tJyxcbiAgICAnZnVuY3Rpb25CaW5kJyxcbiAgICAnZnVuY3Rpb25TZW50JyxcbiAgICAnaW1wb3J0QXR0cmlidXRlcycsXG4gICAgJ2ltcG9ydE1ldGEnLFxuICAgICdudWxsaXNoQ29hbGVzY2luZ09wZXJhdG9yJyxcbiAgICAnbnVtZXJpY1NlcGFyYXRvcicsXG4gICAgJ29iamVjdFJlc3RTcHJlYWQnLFxuICAgICdvcHRpb25hbENhdGNoQmluZGluZycsXG4gICAgJ29wdGlvbmFsQ2hhaW5pbmcnLFxuICAgIFsncGlwZWxpbmVPcGVyYXRvcicsIHsgcHJvcG9zYWw6ICdtaW5pbWFsJyB9XSxcbiAgICAndGhyb3dFeHByZXNzaW9ucycsXG4gICAgJ3R5cGVzY3JpcHQnXG4gIF0sXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsVUFBVSxFQUFFLFFBQVE7RUFDcEJDLDJCQUEyQixFQUFFLElBQUk7RUFDakNDLDBCQUEwQixFQUFFLElBQUk7RUFDaENDLFNBQVMsRUFBRSxDQUFDO0VBQ1pDLE1BQU0sRUFBRSxJQUFJO0VBQ1pDLE9BQU8sRUFBRSxDQUNQLGlCQUFpQixFQUNqQix3QkFBd0IsRUFDeEIsUUFBUSxFQUNSLHFCQUFxQixFQUNyQix3QkFBd0IsRUFDeEIsaUJBQWlCLEVBQ2pCLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsZUFBZSxFQUNmLG1CQUFtQixFQUNuQixrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLGNBQWMsRUFDZCxjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLFlBQVksRUFDWiwyQkFBMkIsRUFDM0Isa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixzQkFBc0IsRUFDdEIsa0JBQWtCLEVBQ2xCLENBQUMsa0JBQWtCLEVBQUU7SUFBRUMsUUFBUSxFQUFFO0VBQVUsQ0FBQyxDQUFDLEVBQzdDLGtCQUFrQixFQUNsQixZQUFZO0FBRWhCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=","map":{"version":3,"names":["module","exports","sourceType","allowImportExportEverywhere","allowReturnOutsideFunction","startLine","tokens","plugins","proposal"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\node_modules\\jscodeshift\\parser\\","sources":["tsOptions.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Options shared by the TypeScript and TSX parsers.\n */\nmodule.exports = {\n  sourceType: 'module',\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    'asyncGenerators',\n    'decoratorAutoAccessors',\n    'bigInt',\n    'classPrivateMethods',\n    'classPrivateProperties',\n    'classProperties',\n    'decorators-legacy',\n    'doExpressions',\n    'dynamicImport',\n    'exportDefaultFrom',\n    'exportExtensions',\n    'exportNamespaceFrom',\n    'functionBind',\n    'functionSent',\n    'importAttributes',\n    'importMeta',\n    'nullishCoalescingOperator',\n    'numericSeparator',\n    'objectRestSpread',\n    'optionalCatchBinding',\n    'optionalChaining',\n    ['pipelineOperator', { proposal: 'minimal' }],\n    'throwExpressions',\n    'typescript'\n  ],\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG;EACfC,UAAU,EAAE,QAAQ;EACpBC,2BAA2B,EAAE,IAAI;EACjCC,0BAA0B,EAAE,IAAI;EAChCC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,CACP,iBAAiB,EACjB,wBAAwB,EACxB,QAAQ,EACR,qBAAqB,EACrB,wBAAwB,EACxB,iBAAiB,EACjB,mBAAmB,EACnB,eAAe,EACf,eAAe,EACf,mBAAmB,EACnB,kBAAkB,EAClB,qBAAqB,EACrB,cAAc,EACd,cAAc,EACd,kBAAkB,EAClB,YAAY,EACZ,2BAA2B,EAC3B,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,kBAAkB,EAClB,CAAC,kBAAkB,EAAE;IAAEC,QAAQ,EAAE;EAAU,CAAC,CAAC,EAC7C,kBAAkB,EAClB,YAAY;AAEhB,CAAC","ignoreList":[]}},"mtime":1746461488461},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\split-specs2.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs.js\n\n// --- Helper Function ---\n// Compara si dos objetos de ubicación AST son iguales\nconst locationsAreEqual = (locA, locB) => {\n  if (!locA || !locB) return false; // Safety check si falta info de ubicación\n  try {\n    return locA.start.line === locB.start.line && locA.start.column === locB.start.column && locA.end.line === locB.end.line && locA.end.column === locB.end.column;\n  } catch (e) {\n    // En caso de error accediendo a las propiedades (muy raro)\n    console.error(\"Error comparando localizaciones:\", e);\n    return false;\n  }\n};\n// --- Fin Helper ---\n\n// Función principal del transformador de JSCodeshift\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source); // Parsea el código fuente original\n\n  // Encuentra todos los nodos de llamada a la función 'it' en el AST original\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths();\n\n  // Si no hay bloques 'it' o solo hay uno, no hacemos nada con este archivo.\n  if (itPaths.length <= 1) {\n    // console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it'. No se requiere división.`);\n    // Devolver null/undefined hace que jscodeshift lo cuente como 'skipped'\n    return undefined;\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath);\n  const baseName = _path.default.basename(originalPath, ext);\n\n  // --- Generación de un archivo por cada bloque 'it' ---\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear una copia FRESCA del AST original para CADA archivo de salida\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar TODOS los 'it' DENTRO DE ESTA COPIA del AST\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Obtener la ubicación del nodo 'it' que queremos MANTENER (del AST original)\n    const targetLoc = targetItPath.node.loc;\n\n    // Seguridad: Si por alguna razón el nodo original no tiene 'loc', no podemos continuar esta iteración.\n    if (!targetLoc) {\n      console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\n      return; // Saltar a la siguiente iteración del forEach\n    }\n\n    // 4. Eliminar TODOS los otros bloques 'it' cuya ubicación NO COINCIDA con targetLoc\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      const currentLoc = currentItPathInCopy.node.loc;\n\n      // Si las ubicaciones NO coinciden, ESTE es un nodo para eliminar\n      if (!locationsAreEqual(currentLoc, targetLoc)) {\n        try {\n          var _parentStatementPath$;\n          // Intentar eliminar el 'statement' padre (usualmente ExpressionStatement)\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement' && (_parentStatementPath$ = parentStatementPath.parentPath) !== null && _parentStatementPath$ !== void 0 && (_parentStatementPath$ = _parentStatementPath$.node) !== null && _parentStatementPath$ !== void 0 && _parentStatementPath$.type) {\n            // Comprobación extra: Asegurarse de que el abuelo existe (para evitar errores en el borde del AST)\n            j(parentStatementPath).remove();\n          } else {\n            var _currentLoc$start;\n            j(currentItPathInCopy).remove(); // Fallback menos ideal\n            console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start = currentLoc.start) === null || _currentLoc$start === void 0 ? void 0 : _currentLoc$start.line}). Revise el archivo ${index + 1}.`);\n          }\n        } catch (error) {\n          var _currentLoc$start2;\n          console.error(`Error eliminando bloque 'it' (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start2 = currentLoc.start) === null || _currentLoc$start2 === void 0 ? void 0 : _currentLoc$start2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\n        }\n      }\n      // Else: Las ubicaciones coinciden -> Este es el nodo a conservar, NO HACER NADA.\n    });\n\n    // 5. Generar código fuente desde el AST modificado\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 6. Construir nuevo nombre de archivo\n    const newFileName = `${baseName}${index + 1}${ext}`;\n    const newFilePath = _path.default.join(dir, newFileName);\n\n    // 7. Escribir el nuevo archivo\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Importante: Devolver undefined/null para no modificar el original\n  return undefined;\n}\n\n// Opcional pero recomendado si no usas --parser=ts en la línea de comandos\n// export const parser = 'ts';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wYXRoIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibG9jYXRpb25zQXJlRXF1YWwiLCJsb2NBIiwibG9jQiIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImNvbnNvbGUiLCJlcnJvciIsInRyYW5zZm9ybWVyIiwiZmlsZUluZm8iLCJhcGkiLCJqIiwianNjb2Rlc2hpZnQiLCJyb290Iiwic291cmNlIiwiaXRQYXRocyIsImZpbmQiLCJDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsIm5hbWUiLCJwYXRocyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImxvZyIsInBhdGgiLCJvcmlnaW5hbFBhdGgiLCJkaXIiLCJkaXJuYW1lIiwiZXh0IiwiZXh0bmFtZSIsImJhc2VOYW1lIiwiYmFzZW5hbWUiLCJmb3JFYWNoIiwidGFyZ2V0SXRQYXRoIiwiaW5kZXgiLCJhc3RDb3B5IiwiYWxsSXRQYXRoc0luQ29weSIsInRhcmdldExvYyIsIm5vZGUiLCJsb2MiLCJjdXJyZW50SXRQYXRoSW5Db3B5IiwiY3VycmVudExvYyIsIl9wYXJlbnRTdGF0ZW1lbnRQYXRoJCIsInBhcmVudFN0YXRlbWVudFBhdGgiLCJwYXJlbnRQYXRoIiwidHlwZSIsInJlbW92ZSIsIl9jdXJyZW50TG9jJHN0YXJ0Iiwid2FybiIsIl9jdXJyZW50TG9jJHN0YXJ0MiIsIm91dHB1dFNvdXJjZSIsInRvU291cmNlIiwicXVvdGUiLCJ0cmFpbGluZ0NvbW1hIiwibmV3RmlsZU5hbWUiLCJuZXdGaWxlUGF0aCIsImpvaW4iLCJmcyIsIndyaXRlRmlsZVN5bmMiXSwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xceGFiaWFcXE9uZURyaXZlXFxEb2N1bWVudG9zXFw0Lk1haWxhXFxURkctQmVzdGVsYWtvYWtcXEJlc3RlbGFrb2FrXFwzMF8wNF8yNS0xNV8wNV8yNVxcc3BsaXRJVEpDb2RlU2hpZnRcXCIsInNvdXJjZXMiOlsic3BsaXQtc3BlY3MyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNwbGl0LXNwZWNzLmpzXHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuLy8gLS0tIEhlbHBlciBGdW5jdGlvbiAtLS1cclxuLy8gQ29tcGFyYSBzaSBkb3Mgb2JqZXRvcyBkZSB1YmljYWNpw7NuIEFTVCBzb24gaWd1YWxlc1xyXG5jb25zdCBsb2NhdGlvbnNBcmVFcXVhbCA9IChsb2NBLCBsb2NCKSA9PiB7XHJcbiAgICBpZiAoIWxvY0EgfHwgIWxvY0IpIHJldHVybiBmYWxzZTsgLy8gU2FmZXR5IGNoZWNrIHNpIGZhbHRhIGluZm8gZGUgdWJpY2FjacOzblxyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICBsb2NBLnN0YXJ0LmxpbmUgPT09IGxvY0Iuc3RhcnQubGluZSAmJlxyXG4gICAgICAgICAgICBsb2NBLnN0YXJ0LmNvbHVtbiA9PT0gbG9jQi5zdGFydC5jb2x1bW4gJiZcclxuICAgICAgICAgICAgbG9jQS5lbmQubGluZSA9PT0gbG9jQi5lbmQubGluZSAmJlxyXG4gICAgICAgICAgICBsb2NBLmVuZC5jb2x1bW4gPT09IGxvY0IuZW5kLmNvbHVtblxyXG4gICAgICAgICk7XHJcbiAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAvLyBFbiBjYXNvIGRlIGVycm9yIGFjY2VkaWVuZG8gYSBsYXMgcHJvcGllZGFkZXMgKG11eSByYXJvKVxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjb21wYXJhbmRvIGxvY2FsaXphY2lvbmVzOlwiLCBlKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbi8vIC0tLSBGaW4gSGVscGVyIC0tLVxyXG5cclxuXHJcbi8vIEZ1bmNpw7NuIHByaW5jaXBhbCBkZWwgdHJhbnNmb3JtYWRvciBkZSBKU0NvZGVzaGlmdFxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1lcihmaWxlSW5mbywgYXBpKSB7XHJcbiAgY29uc3QgaiA9IGFwaS5qc2NvZGVzaGlmdDtcclxuICBjb25zdCByb290ID0gaihmaWxlSW5mby5zb3VyY2UpOyAvLyBQYXJzZWEgZWwgY8OzZGlnbyBmdWVudGUgb3JpZ2luYWxcclxuXHJcbiAgLy8gRW5jdWVudHJhIHRvZG9zIGxvcyBub2RvcyBkZSBsbGFtYWRhIGEgbGEgZnVuY2nDs24gJ2l0JyBlbiBlbCBBU1Qgb3JpZ2luYWxcclxuICBjb25zdCBpdFBhdGhzID0gcm9vdC5maW5kKGouQ2FsbEV4cHJlc3Npb24sIHtcclxuICAgIGNhbGxlZTogeyBuYW1lOiAnaXQnIH0sXHJcbiAgfSkucGF0aHMoKTtcclxuXHJcbiAgLy8gU2kgbm8gaGF5IGJsb3F1ZXMgJ2l0JyBvIHNvbG8gaGF5IHVubywgbm8gaGFjZW1vcyBuYWRhIGNvbiBlc3RlIGFyY2hpdm8uXHJcbiAgaWYgKGl0UGF0aHMubGVuZ3RoIDw9IDEpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKGAtPiBBcmNoaXZvICR7ZmlsZUluZm8ucGF0aH06ICR7aXRQYXRocy5sZW5ndGh9IGJsb3F1ZShzKSAnaXQnLiBObyBzZSByZXF1aWVyZSBkaXZpc2nDs24uYCk7XHJcbiAgICAvLyBEZXZvbHZlciBudWxsL3VuZGVmaW5lZCBoYWNlIHF1ZSBqc2NvZGVzaGlmdCBsbyBjdWVudGUgY29tbyAnc2tpcHBlZCdcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhgLT4gQXJjaGl2byAke2ZpbGVJbmZvLnBhdGh9OiAke2l0UGF0aHMubGVuZ3RofSBibG9xdWUocykgJ2l0JyBlbmNvbnRyYWRvcy4gR2VuZXJhbmRvIGFyY2hpdm9zIGluZGl2aWR1YWxlcy4uLmApO1xyXG5cclxuICBjb25zdCBvcmlnaW5hbFBhdGggPSBmaWxlSW5mby5wYXRoO1xyXG4gIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShvcmlnaW5hbFBhdGgpO1xyXG4gIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShvcmlnaW5hbFBhdGgpO1xyXG4gIGNvbnN0IGJhc2VOYW1lID0gcGF0aC5iYXNlbmFtZShvcmlnaW5hbFBhdGgsIGV4dCk7XHJcblxyXG4gIC8vIC0tLSBHZW5lcmFjacOzbiBkZSB1biBhcmNoaXZvIHBvciBjYWRhIGJsb3F1ZSAnaXQnIC0tLVxyXG4gIGl0UGF0aHMuZm9yRWFjaCgodGFyZ2V0SXRQYXRoLCBpbmRleCkgPT4ge1xyXG4gICAgLy8gMS4gQ3JlYXIgdW5hIGNvcGlhIEZSRVNDQSBkZWwgQVNUIG9yaWdpbmFsIHBhcmEgQ0FEQSBhcmNoaXZvIGRlIHNhbGlkYVxyXG4gICAgY29uc3QgYXN0Q29weSA9IGooZmlsZUluZm8uc291cmNlKTtcclxuXHJcbiAgICAvLyAyLiBFbmNvbnRyYXIgVE9ET1MgbG9zICdpdCcgREVOVFJPIERFIEVTVEEgQ09QSUEgZGVsIEFTVFxyXG4gICAgY29uc3QgYWxsSXRQYXRoc0luQ29weSA9IGFzdENvcHkuZmluZChqLkNhbGxFeHByZXNzaW9uLCB7XHJcbiAgICAgICAgY2FsbGVlOiB7IG5hbWU6ICdpdCcgfSxcclxuICAgICAgfSkucGF0aHMoKTtcclxuXHJcbiAgICAvLyAzLiBPYnRlbmVyIGxhIHViaWNhY2nDs24gZGVsIG5vZG8gJ2l0JyBxdWUgcXVlcmVtb3MgTUFOVEVORVIgKGRlbCBBU1Qgb3JpZ2luYWwpXHJcbiAgICBjb25zdCB0YXJnZXRMb2MgPSB0YXJnZXRJdFBhdGgubm9kZS5sb2M7XHJcblxyXG4gICAgLy8gU2VndXJpZGFkOiBTaSBwb3IgYWxndW5hIHJhesOzbiBlbCBub2RvIG9yaWdpbmFsIG5vIHRpZW5lICdsb2MnLCBubyBwb2RlbW9zIGNvbnRpbnVhciBlc3RhIGl0ZXJhY2nDs24uXHJcbiAgICBpZiAoIXRhcmdldExvYykge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIENyw610aWNvOiBGYWx0YSBpbmZvcm1hY2nDs24gZGUgdWJpY2FjacOzbiBwYXJhIGVsIGJsb3F1ZSAnaXQnICjDrW5kaWNlICR7aW5kZXh9KSBlbiAke2ZpbGVJbmZvLnBhdGh9LiBObyBzZSBwdWVkZSBnZW5lcmFyIGFyY2hpdm8gJHtpbmRleCArIDF9LmApO1xyXG4gICAgICAgIHJldHVybjsgLy8gU2FsdGFyIGEgbGEgc2lndWllbnRlIGl0ZXJhY2nDs24gZGVsIGZvckVhY2hcclxuICAgIH1cclxuXHJcbiAgICAvLyA0LiBFbGltaW5hciBUT0RPUyBsb3Mgb3Ryb3MgYmxvcXVlcyAnaXQnIGN1eWEgdWJpY2FjacOzbiBOTyBDT0lOQ0lEQSBjb24gdGFyZ2V0TG9jXHJcbiAgICBhbGxJdFBhdGhzSW5Db3B5LmZvckVhY2goY3VycmVudEl0UGF0aEluQ29weSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudExvYyA9IGN1cnJlbnRJdFBhdGhJbkNvcHkubm9kZS5sb2M7XHJcblxyXG4gICAgICAgIC8vIFNpIGxhcyB1YmljYWNpb25lcyBOTyBjb2luY2lkZW4sIEVTVEUgZXMgdW4gbm9kbyBwYXJhIGVsaW1pbmFyXHJcbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChjdXJyZW50TG9jLCB0YXJnZXRMb2MpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbnRlbnRhciBlbGltaW5hciBlbCAnc3RhdGVtZW50JyBwYWRyZSAodXN1YWxtZW50ZSBFeHByZXNzaW9uU3RhdGVtZW50KVxyXG4gICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFN0YXRlbWVudFBhdGggPSBjdXJyZW50SXRQYXRoSW5Db3B5LnBhcmVudFBhdGg7XHJcbiAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFN0YXRlbWVudFBhdGgubm9kZS50eXBlID09PSAnRXhwcmVzc2lvblN0YXRlbWVudCcgJiYgcGFyZW50U3RhdGVtZW50UGF0aC5wYXJlbnRQYXRoPy5ub2RlPy50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIC8vIENvbXByb2JhY2nDs24gZXh0cmE6IEFzZWd1cmFyc2UgZGUgcXVlIGVsIGFidWVsbyBleGlzdGUgKHBhcmEgZXZpdGFyIGVycm9yZXMgZW4gZWwgYm9yZGUgZGVsIEFTVClcclxuICAgICAgICAgICAgICAgICAgICAgaihwYXJlbnRTdGF0ZW1lbnRQYXRoKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICBqKGN1cnJlbnRJdFBhdGhJbkNvcHkpLnJlbW92ZSgpOyAvLyBGYWxsYmFjayBtZW5vcyBpZGVhbFxyXG4gICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEFkdmVydGVuY2lhOiBFc3RydWN0dXJhIGluZXNwZXJhZGEgcGFyYSBibG9xdWUgJ2l0JyBlbiAke2ZpbGVJbmZvLnBhdGh9IChsw61uZWEgJHtjdXJyZW50TG9jPy5zdGFydD8ubGluZX0pLiBSZXZpc2UgZWwgYXJjaGl2byAke2luZGV4ICsgMX0uYCk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZWxpbWluYW5kbyBibG9xdWUgJ2l0JyAobMOtbmVhICR7Y3VycmVudExvYz8uc3RhcnQ/LmxpbmV9KSBlbiAke2ZpbGVJbmZvLnBhdGh9IHBhcmEgYXJjaGl2byAke2luZGV4ICsgMX06YCwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEVsc2U6IExhcyB1YmljYWNpb25lcyBjb2luY2lkZW4gLT4gRXN0ZSBlcyBlbCBub2RvIGEgY29uc2VydmFyLCBOTyBIQUNFUiBOQURBLlxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gNS4gR2VuZXJhciBjw7NkaWdvIGZ1ZW50ZSBkZXNkZSBlbCBBU1QgbW9kaWZpY2Fkb1xyXG4gICAgY29uc3Qgb3V0cHV0U291cmNlID0gYXN0Q29weS50b1NvdXJjZSh7IHF1b3RlOiAnc2luZ2xlJywgdHJhaWxpbmdDb21tYTogdHJ1ZSB9KTtcclxuXHJcbiAgICAvLyA2LiBDb25zdHJ1aXIgbnVldm8gbm9tYnJlIGRlIGFyY2hpdm9cclxuICAgIGNvbnN0IG5ld0ZpbGVOYW1lID0gYCR7YmFzZU5hbWV9JHtpbmRleCArIDF9JHtleHR9YDtcclxuICAgIGNvbnN0IG5ld0ZpbGVQYXRoID0gcGF0aC5qb2luKGRpciwgbmV3RmlsZU5hbWUpO1xyXG5cclxuICAgIC8vIDcuIEVzY3JpYmlyIGVsIG51ZXZvIGFyY2hpdm9cclxuICAgIHRyeSB7XHJcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMobmV3RmlsZVBhdGgsIG91dHB1dFNvdXJjZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGAgICBDcmVhZG86ICR7bmV3RmlsZVBhdGh9YCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBlc2NyaWJpZW5kbyBhcmNoaXZvICR7bmV3RmlsZVBhdGh9OmAsIGVycm9yKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gSW1wb3J0YW50ZTogRGV2b2x2ZXIgdW5kZWZpbmVkL251bGwgcGFyYSBubyBtb2RpZmljYXIgZWwgb3JpZ2luYWxcclxuICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcblxyXG4vLyBPcGNpb25hbCBwZXJvIHJlY29tZW5kYWRvIHNpIG5vIHVzYXMgLS1wYXJzZXI9dHMgZW4gbGEgbMOtbmVhIGRlIGNvbWFuZG9zXHJcbi8vIGV4cG9ydCBjb25zdCBwYXJzZXIgPSAndHMnOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsR0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQXdCLFNBQUFELHVCQUFBRyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRnhCOztBQUlBO0FBQ0E7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","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","locationsAreEqual","locA","locB","start","line","column","end","console","error","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","undefined","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","forEach","targetItPath","index","astCopy","allItPathsInCopy","targetLoc","node","loc","currentItPathInCopy","currentLoc","_parentStatementPath$","parentStatementPath","parentPath","type","remove","_currentLoc$start","warn","_currentLoc$start2","outputSource","toSource","quote","trailingComma","newFileName","newFilePath","join","fs","writeFileSync"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\","sources":["split-specs2.js"],"sourcesContent":["// split-specs.js\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// --- Helper Function ---\r\n// Compara si dos objetos de ubicación AST son iguales\r\nconst locationsAreEqual = (locA, locB) => {\r\n    if (!locA || !locB) return false; // Safety check si falta info de ubicación\r\n    try {\r\n        return (\r\n            locA.start.line === locB.start.line &&\r\n            locA.start.column === locB.start.column &&\r\n            locA.end.line === locB.end.line &&\r\n            locA.end.column === locB.end.column\r\n        );\r\n    } catch(e) {\r\n        // En caso de error accediendo a las propiedades (muy raro)\r\n        console.error(\"Error comparando localizaciones:\", e);\r\n        return false;\r\n    }\r\n};\r\n// --- Fin Helper ---\r\n\r\n\r\n// Función principal del transformador de JSCodeshift\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source); // Parsea el código fuente original\r\n\r\n  // Encuentra todos los nodos de llamada a la función 'it' en el AST original\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths();\r\n\r\n  // Si no hay bloques 'it' o solo hay uno, no hacemos nada con este archivo.\r\n  if (itPaths.length <= 1) {\r\n    // console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it'. No se requiere división.`);\r\n    // Devolver null/undefined hace que jscodeshift lo cuente como 'skipped'\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath);\r\n  const baseName = path.basename(originalPath, ext);\r\n\r\n  // --- Generación de un archivo por cada bloque 'it' ---\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear una copia FRESCA del AST original para CADA archivo de salida\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar TODOS los 'it' DENTRO DE ESTA COPIA del AST\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Obtener la ubicación del nodo 'it' que queremos MANTENER (del AST original)\r\n    const targetLoc = targetItPath.node.loc;\r\n\r\n    // Seguridad: Si por alguna razón el nodo original no tiene 'loc', no podemos continuar esta iteración.\r\n    if (!targetLoc) {\r\n        console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\r\n        return; // Saltar a la siguiente iteración del forEach\r\n    }\r\n\r\n    // 4. Eliminar TODOS los otros bloques 'it' cuya ubicación NO COINCIDA con targetLoc\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n        const currentLoc = currentItPathInCopy.node.loc;\r\n\r\n        // Si las ubicaciones NO coinciden, ESTE es un nodo para eliminar\r\n        if (!locationsAreEqual(currentLoc, targetLoc)) {\r\n            try {\r\n                // Intentar eliminar el 'statement' padre (usualmente ExpressionStatement)\r\n                 const parentStatementPath = currentItPathInCopy.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement' && parentStatementPath.parentPath?.node?.type) {\r\n                     // Comprobación extra: Asegurarse de que el abuelo existe (para evitar errores en el borde del AST)\r\n                     j(parentStatementPath).remove();\r\n                 } else {\r\n                     j(currentItPathInCopy).remove(); // Fallback menos ideal\r\n                     console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc?.start?.line}). Revise el archivo ${index + 1}.`);\r\n                 }\r\n            } catch (error) {\r\n                console.error(`Error eliminando bloque 'it' (línea ${currentLoc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n            }\r\n        }\r\n        // Else: Las ubicaciones coinciden -> Este es el nodo a conservar, NO HACER NADA.\r\n    });\r\n\r\n    // 5. Generar código fuente desde el AST modificado\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 6. Construir nuevo nombre de archivo\r\n    const newFileName = `${baseName}${index + 1}${ext}`;\r\n    const newFilePath = path.join(dir, newFileName);\r\n\r\n    // 7. Escribir el nuevo archivo\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Importante: Devolver undefined/null para no modificar el original\r\n  return undefined;\r\n}\r\n\r\n// Opcional pero recomendado si no usas --parser=ts en la línea de comandos\r\n// export const parser = 'ts';"],"mappings":"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","ignoreList":[]}},"mtime":1746462508812},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\split-specs3.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs.js\n\n// --- Helper Function ---\nconst locationsAreEqual = (locA, locB) => {\n  if (!locA || !locB) return false;\n  try {\n    return locA.start.line === locB.start.line && locA.start.column === locB.start.column && locA.end.line === locB.end.line && locA.end.column === locB.end.column;\n  } catch (e) {\n    console.error(\"Error comparando localizaciones:\", e);\n    return false;\n  }\n};\n// --- Fin Helper ---\n\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths();\n  if (itPaths.length <= 1) {\n    return undefined;\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath);\n  const baseName = _path.default.basename(originalPath, ext);\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear copia fresca del AST\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar todos los 'it' en la copia\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Obtener la ubicación del 'it' a conservar\n    const targetLoc = targetItPath.node.loc;\n    if (!targetLoc) {\n      console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\n      return;\n    }\n\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      const currentLoc = currentItPathInCopy.node.loc;\n      if (!locationsAreEqual(currentLoc, targetLoc)) {\n        try {\n          var _parentStatementPath$;\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement' && (_parentStatementPath$ = parentStatementPath.parentPath) !== null && _parentStatementPath$ !== void 0 && (_parentStatementPath$ = _parentStatementPath$.node) !== null && _parentStatementPath$ !== void 0 && _parentStatementPath$.type) {\n            j(parentStatementPath).remove();\n          } else {\n            var _currentLoc$start;\n            j(currentItPathInCopy).remove();\n            console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start = currentLoc.start) === null || _currentLoc$start === void 0 ? void 0 : _currentLoc$start.line}). Revise el archivo ${index + 1}.`);\n          }\n        } catch (error) {\n          var _currentLoc$start2;\n          console.error(`Error eliminando bloque 'it' (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start2 = currentLoc.start) === null || _currentLoc$start2 === void 0 ? void 0 : _currentLoc$start2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\n        }\n      }\n    });\n\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' vacíos ---\n    try {\n      const describePaths = astCopy.find(j.CallExpression, {\n        callee: {\n          name: 'describe'\n        }\n      }).paths();\n\n      // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\n      describePaths.reverse().forEach(describePath => {\n        let isEmpty = false;\n        try {\n          // Acceder al cuerpo (BlockStatement) de la función del describe\n          const describeFunc = describePath.node.arguments[1]; // El callback es usualmente el 2º argumento\n          let blockStatementNode;\n          if (describeFunc && (describeFunc.type === 'FunctionExpression' || describeFunc.type === 'ArrowFunctionExpression') && describeFunc.body.type === 'BlockStatement') {\n            blockStatementNode = describeFunc.body;\n          } else {\n            var _describePath$node$lo;\n            // Si la estructura no es la esperada, no lo consideramos vacío por seguridad\n            console.warn(`Advertencia: Estructura inesperada en describe (línea ${(_describePath$node$lo = describePath.node.loc) === null || _describePath$node$lo === void 0 || (_describePath$node$lo = _describePath$node$lo.start) === null || _describePath$node$lo === void 0 ? void 0 : _describePath$node$lo.line}) en ${fileInfo.path} para archivo ${index + 1}. No se limpiará.`);\n            return; // Saltar al siguiente describe\n          }\n\n          // Comprobar si el cuerpo contiene llamadas relevantes\n          const relevantCalls = j(blockStatementNode).find(j.CallExpression, node => {\n            var _node$callee;\n            return ['it', 'describe', 'beforeEach', 'afterEach', 'beforeAll', 'afterAll'].includes((_node$callee = node.callee) === null || _node$callee === void 0 ? void 0 : _node$callee.name);\n          } // Optional chaining por si callee no existe\n          );\n          if (relevantCalls.length === 0) {\n            // No hay llamadas relevantes, consideramos el describe vacío\n            isEmpty = true;\n          }\n        } catch (findError) {\n          var _describePath$node$lo2;\n          console.error(`Error inspeccionando cuerpo de describe (línea ${(_describePath$node$lo2 = describePath.node.loc) === null || _describePath$node$lo2 === void 0 || (_describePath$node$lo2 = _describePath$node$lo2.start) === null || _describePath$node$lo2 === void 0 ? void 0 : _describePath$node$lo2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\n          // No eliminar si hubo error al inspeccionar\n          isEmpty = false;\n        }\n        if (isEmpty) {\n          // Eliminar el ExpressionStatement que contiene la llamada al describe\n          const parentStatementPath = describePath.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement') {\n            var _describePath$node$lo3;\n            j(parentStatementPath).remove();\n            console.log(`   - Describe vacío eliminado (línea ${(_describePath$node$lo3 = describePath.node.loc) === null || _describePath$node$lo3 === void 0 || (_describePath$node$lo3 = _describePath$node$lo3.start) === null || _describePath$node$lo3 === void 0 ? void 0 : _describePath$node$lo3.line}) en archivo ${index + 1}`);\n          } else {\n            var _describePath$node$lo4;\n            console.warn(`Advertencia: Describe vacío (línea ${(_describePath$node$lo4 = describePath.node.loc) === null || _describePath$node$lo4 === void 0 || (_describePath$node$lo4 = _describePath$node$lo4.start) === null || _describePath$node$lo4 === void 0 ? void 0 : _describePath$node$lo4.line}) no estaba en un ExpressionStatement directo. No se eliminó.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante la limpieza de bloques describe en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO ---\n\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 7. Construir nuevo nombre de archivo\n    const newFileName = `${baseName}${index + 1}${ext}`;\n    const newFilePath = _path.default.join(dir, newFileName);\n\n    // 8. Escribir el nuevo archivo\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Devolver undefined/null para no modificar el original\n  return undefined;\n}\n\n// export const parser = 'ts';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","locationsAreEqual","locA","locB","start","line","column","end","console","error","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","undefined","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","forEach","targetItPath","index","astCopy","allItPathsInCopy","targetLoc","node","loc","currentItPathInCopy","currentLoc","_parentStatementPath$","parentStatementPath","parentPath","type","remove","_currentLoc$start","warn","_currentLoc$start2","describePaths","reverse","describePath","isEmpty","describeFunc","arguments","blockStatementNode","body","_describePath$node$lo","relevantCalls","_node$callee","includes","findError","_describePath$node$lo2","_describePath$node$lo3","_describePath$node$lo4","outputSource","toSource","quote","trailingComma","newFileName","newFilePath","join","fs","writeFileSync"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\","sources":["split-specs3.js"],"sourcesContent":["// split-specs.js\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// --- Helper Function ---\r\nconst locationsAreEqual = (locA, locB) => {\r\n    if (!locA || !locB) return false;\r\n    try {\r\n        return (\r\n            locA.start.line === locB.start.line &&\r\n            locA.start.column === locB.start.column &&\r\n            locA.end.line === locB.end.line &&\r\n            locA.end.column === locB.end.column\r\n        );\r\n    } catch(e) {\r\n        console.error(\"Error comparando localizaciones:\", e);\r\n        return false;\r\n    }\r\n};\r\n// --- Fin Helper ---\r\n\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source);\r\n\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths();\r\n\r\n  if (itPaths.length <= 1) {\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath);\r\n  const baseName = path.basename(originalPath, ext);\r\n\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear copia fresca del AST\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar todos los 'it' en la copia\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Obtener la ubicación del 'it' a conservar\r\n    const targetLoc = targetItPath.node.loc;\r\n    if (!targetLoc) {\r\n        console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\r\n        return;\r\n    }\r\n\r\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n        const currentLoc = currentItPathInCopy.node.loc;\r\n        if (!locationsAreEqual(currentLoc, targetLoc)) {\r\n            try {\r\n                 const parentStatementPath = currentItPathInCopy.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement' && parentStatementPath.parentPath?.node?.type) {\r\n                     j(parentStatementPath).remove();\r\n                 } else {\r\n                     j(currentItPathInCopy).remove();\r\n                     console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc?.start?.line}). Revise el archivo ${index + 1}.`);\r\n                 }\r\n            } catch (error) {\r\n                console.error(`Error eliminando bloque 'it' (línea ${currentLoc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n            }\r\n        }\r\n    });\r\n\r\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' vacíos ---\r\n    try {\r\n        const describePaths = astCopy.find(j.CallExpression, {\r\n            callee: { name: 'describe' }\r\n        }).paths();\r\n\r\n        // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\r\n        describePaths.reverse().forEach(describePath => {\r\n            let isEmpty = false;\r\n            try {\r\n                // Acceder al cuerpo (BlockStatement) de la función del describe\r\n                const describeFunc = describePath.node.arguments[1]; // El callback es usualmente el 2º argumento\r\n                let blockStatementNode;\r\n\r\n                if (describeFunc && (describeFunc.type === 'FunctionExpression' || describeFunc.type === 'ArrowFunctionExpression') && describeFunc.body.type === 'BlockStatement') {\r\n                     blockStatementNode = describeFunc.body;\r\n                } else {\r\n                     // Si la estructura no es la esperada, no lo consideramos vacío por seguridad\r\n                     console.warn(`Advertencia: Estructura inesperada en describe (línea ${describePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}. No se limpiará.`);\r\n                     return; // Saltar al siguiente describe\r\n                }\r\n\r\n                // Comprobar si el cuerpo contiene llamadas relevantes\r\n                const relevantCalls = j(blockStatementNode).find(j.CallExpression, node =>\r\n                    ['it', 'describe', 'beforeEach', 'afterEach', 'beforeAll', 'afterAll'].includes(node.callee?.name) // Optional chaining por si callee no existe\r\n                );\r\n\r\n                if (relevantCalls.length === 0) {\r\n                    // No hay llamadas relevantes, consideramos el describe vacío\r\n                    isEmpty = true;\r\n                }\r\n\r\n            } catch (findError){\r\n                 console.error(`Error inspeccionando cuerpo de describe (línea ${describePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\r\n                 // No eliminar si hubo error al inspeccionar\r\n                 isEmpty = false;\r\n            }\r\n\r\n\r\n            if (isEmpty) {\r\n                 // Eliminar el ExpressionStatement que contiene la llamada al describe\r\n                 const parentStatementPath = describePath.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement') {\r\n                     j(parentStatementPath).remove();\r\n                     console.log(`   - Describe vacío eliminado (línea ${describePath.node.loc?.start?.line}) en archivo ${index + 1}`);\r\n                 } else {\r\n                     console.warn(`Advertencia: Describe vacío (línea ${describePath.node.loc?.start?.line}) no estaba en un ExpressionStatement directo. No se eliminó.`);\r\n                 }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante la limpieza de bloques describe en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO ---\r\n\r\n\r\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 7. Construir nuevo nombre de archivo\r\n    const newFileName = `${baseName}${index + 1}${ext}`;\r\n    const newFilePath = path.join(dir, newFileName);\r\n\r\n    // 8. Escribir el nuevo archivo\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Devolver undefined/null para no modificar el original\r\n  return undefined;\r\n}\r\n\r\n// export const parser = 'ts';"],"mappings":";;;;;;AACA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAFxB;;AAIA;AACA,MAAMG,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACtC,IAAI,CAACD,IAAI,IAAI,CAACC,IAAI,EAAE,OAAO,KAAK;EAChC,IAAI;IACA,OACID,IAAI,CAACE,KAAK,CAACC,IAAI,KAAKF,IAAI,CAACC,KAAK,CAACC,IAAI,IACnCH,IAAI,CAACE,KAAK,CAACE,MAAM,KAAKH,IAAI,CAACC,KAAK,CAACE,MAAM,IACvCJ,IAAI,CAACK,GAAG,CAACF,IAAI,KAAKF,IAAI,CAACI,GAAG,CAACF,IAAI,IAC/BH,IAAI,CAACK,GAAG,CAACD,MAAM,KAAKH,IAAI,CAACI,GAAG,CAACD,MAAM;EAE3C,CAAC,CAAC,OAAMR,CAAC,EAAE;IACPU,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEX,CAAC,CAAC;IACpD,OAAO,KAAK;EAChB;AACJ,CAAC;AACD;;AAEe,SAASY,WAAWA,CAACC,QAAQ,EAAEC,GAAG,EAAE;EACjD,MAAMC,CAAC,GAAGD,GAAG,CAACE,WAAW;EACzB,MAAMC,IAAI,GAAGF,CAAC,CAACF,QAAQ,CAACK,MAAM,CAAC;EAE/B,MAAMC,OAAO,GAAGF,IAAI,CAACG,IAAI,CAACL,CAAC,CAACM,cAAc,EAAE;IAC1CC,MAAM,EAAE;MAAEC,IAAI,EAAE;IAAK;EACvB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EAEV,IAAIL,OAAO,CAACM,MAAM,IAAI,CAAC,EAAE;IACvB,OAAOC,SAAS;EAClB;EAEAhB,OAAO,CAACiB,GAAG,CAAC,cAAcd,QAAQ,CAACe,IAAI,KAAKT,OAAO,CAACM,MAAM,iEAAiE,CAAC;EAE5H,MAAMI,YAAY,GAAGhB,QAAQ,CAACe,IAAI;EAClC,MAAME,GAAG,GAAGF,aAAI,CAACG,OAAO,CAACF,YAAY,CAAC;EACtC,MAAMG,GAAG,GAAGJ,aAAI,CAACK,OAAO,CAACJ,YAAY,CAAC;EACtC,MAAMK,QAAQ,GAAGN,aAAI,CAACO,QAAQ,CAACN,YAAY,EAAEG,GAAG,CAAC;EAEjDb,OAAO,CAACiB,OAAO,CAAC,CAACC,YAAY,EAAEC,KAAK,KAAK;IACvC;IACA,MAAMC,OAAO,GAAGxB,CAAC,CAACF,QAAQ,CAACK,MAAM,CAAC;;IAElC;IACA,MAAMsB,gBAAgB,GAAGD,OAAO,CAACnB,IAAI,CAACL,CAAC,CAACM,cAAc,EAAE;MACpDC,MAAM,EAAE;QAAEC,IAAI,EAAE;MAAK;IACvB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;;IAEZ;IACA,MAAMiB,SAAS,GAAGJ,YAAY,CAACK,IAAI,CAACC,GAAG;IACvC,IAAI,CAACF,SAAS,EAAE;MACZ/B,OAAO,CAACC,KAAK,CAAC,6EAA6E2B,KAAK,QAAQzB,QAAQ,CAACe,IAAI,iCAAiCU,KAAK,GAAG,CAAC,GAAG,CAAC;MACnK;IACJ;;IAEA;IACAE,gBAAgB,CAACJ,OAAO,CAACQ,mBAAmB,IAAI;MAC5C,MAAMC,UAAU,GAAGD,mBAAmB,CAACF,IAAI,CAACC,GAAG;MAC/C,IAAI,CAACxC,iBAAiB,CAAC0C,UAAU,EAAEJ,SAAS,CAAC,EAAE;QAC3C,IAAI;UAAA,IAAAK,qBAAA;UACC,MAAMC,mBAAmB,GAAGH,mBAAmB,CAACI,UAAU;UAC1D,IAAID,mBAAmB,CAACL,IAAI,CAACO,IAAI,KAAK,qBAAqB,KAAAH,qBAAA,GAAIC,mBAAmB,CAACC,UAAU,cAAAF,qBAAA,gBAAAA,qBAAA,GAA9BA,qBAAA,CAAgCJ,IAAI,cAAAI,qBAAA,eAApCA,qBAAA,CAAsCG,IAAI,EAAE;YACvGlC,CAAC,CAACgC,mBAAmB,CAAC,CAACG,MAAM,CAAC,CAAC;UACnC,CAAC,MAAM;YAAA,IAAAC,iBAAA;YACHpC,CAAC,CAAC6B,mBAAmB,CAAC,CAACM,MAAM,CAAC,CAAC;YAC/BxC,OAAO,CAAC0C,IAAI,CAAC,0DAA0DvC,QAAQ,CAACe,IAAI,WAAWiB,UAAU,aAAVA,UAAU,gBAAAM,iBAAA,GAAVN,UAAU,CAAEvC,KAAK,cAAA6C,iBAAA,uBAAjBA,iBAAA,CAAmB5C,IAAI,wBAAwB+B,KAAK,GAAG,CAAC,GAAG,CAAC;UAC/J;QACL,CAAC,CAAC,OAAO3B,KAAK,EAAE;UAAA,IAAA0C,kBAAA;UACZ3C,OAAO,CAACC,KAAK,CAAC,uCAAuCkC,UAAU,aAAVA,UAAU,gBAAAQ,kBAAA,GAAVR,UAAU,CAAEvC,KAAK,cAAA+C,kBAAA,uBAAjBA,kBAAA,CAAmB9C,IAAI,QAAQM,QAAQ,CAACe,IAAI,iBAAiBU,KAAK,GAAG,CAAC,GAAG,EAAE3B,KAAK,CAAC;QAC1I;MACJ;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI;MACA,MAAM2C,aAAa,GAAGf,OAAO,CAACnB,IAAI,CAACL,CAAC,CAACM,cAAc,EAAE;QACjDC,MAAM,EAAE;UAAEC,IAAI,EAAE;QAAW;MAC/B,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;;MAEV;MACA8B,aAAa,CAACC,OAAO,CAAC,CAAC,CAACnB,OAAO,CAACoB,YAAY,IAAI;QAC5C,IAAIC,OAAO,GAAG,KAAK;QACnB,IAAI;UACA;UACA,MAAMC,YAAY,GAAGF,YAAY,CAACd,IAAI,CAACiB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;UACrD,IAAIC,kBAAkB;UAEtB,IAAIF,YAAY,KAAKA,YAAY,CAACT,IAAI,KAAK,oBAAoB,IAAIS,YAAY,CAACT,IAAI,KAAK,yBAAyB,CAAC,IAAIS,YAAY,CAACG,IAAI,CAACZ,IAAI,KAAK,gBAAgB,EAAE;YAC/JW,kBAAkB,GAAGF,YAAY,CAACG,IAAI;UAC3C,CAAC,MAAM;YAAA,IAAAC,qBAAA;YACF;YACApD,OAAO,CAAC0C,IAAI,CAAC,0DAAAU,qBAAA,GAAyDN,YAAY,CAACd,IAAI,CAACC,GAAG,cAAAmB,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBxD,KAAK,cAAAwD,qBAAA,uBAA5BA,qBAAA,CAA8BvD,IAAI,QAAQM,QAAQ,CAACe,IAAI,iBAAiBU,KAAK,GAAG,CAAC,mBAAmB,CAAC;YAC3K,OAAO,CAAC;UACb;;UAEA;UACA,MAAMyB,aAAa,GAAGhD,CAAC,CAAC6C,kBAAkB,CAAC,CAACxC,IAAI,CAACL,CAAC,CAACM,cAAc,EAAEqB,IAAI;YAAA,IAAAsB,YAAA;YAAA,OACnE,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,CAAC,CAACC,QAAQ,EAAAD,YAAA,GAACtB,IAAI,CAACpB,MAAM,cAAA0C,YAAA,uBAAXA,YAAA,CAAazC,IAAI,CAAC;UAAA,EAAC;UACvG,CAAC;UAED,IAAIwC,aAAa,CAACtC,MAAM,KAAK,CAAC,EAAE;YAC5B;YACAgC,OAAO,GAAG,IAAI;UAClB;QAEJ,CAAC,CAAC,OAAOS,SAAS,EAAC;UAAA,IAAAC,sBAAA;UACdzD,OAAO,CAACC,KAAK,CAAC,mDAAAwD,sBAAA,GAAkDX,YAAY,CAACd,IAAI,CAACC,GAAG,cAAAwB,sBAAA,gBAAAA,sBAAA,GAArBA,sBAAA,CAAuB7D,KAAK,cAAA6D,sBAAA,uBAA5BA,sBAAA,CAA8B5D,IAAI,QAAQM,QAAQ,CAACe,IAAI,iBAAiBU,KAAK,GAAG,CAAC,GAAG,EAAE4B,SAAS,CAAC;UAChK;UACAT,OAAO,GAAG,KAAK;QACpB;QAGA,IAAIA,OAAO,EAAE;UACR;UACA,MAAMV,mBAAmB,GAAGS,YAAY,CAACR,UAAU;UACnD,IAAID,mBAAmB,CAACL,IAAI,CAACO,IAAI,KAAK,qBAAqB,EAAE;YAAA,IAAAmB,sBAAA;YACzDrD,CAAC,CAACgC,mBAAmB,CAAC,CAACG,MAAM,CAAC,CAAC;YAC/BxC,OAAO,CAACiB,GAAG,CAAC,yCAAAyC,sBAAA,GAAwCZ,YAAY,CAACd,IAAI,CAACC,GAAG,cAAAyB,sBAAA,gBAAAA,sBAAA,GAArBA,sBAAA,CAAuB9D,KAAK,cAAA8D,sBAAA,uBAA5BA,sBAAA,CAA8B7D,IAAI,gBAAgB+B,KAAK,GAAG,CAAC,EAAE,CAAC;UACtH,CAAC,MAAM;YAAA,IAAA+B,sBAAA;YACH3D,OAAO,CAAC0C,IAAI,CAAC,uCAAAiB,sBAAA,GAAsCb,YAAY,CAACd,IAAI,CAACC,GAAG,cAAA0B,sBAAA,gBAAAA,sBAAA,GAArBA,sBAAA,CAAuB/D,KAAK,cAAA+D,sBAAA,uBAA5BA,sBAAA,CAA8B9D,IAAI,+DAA+D,CAAC;UACzJ;QACL;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,oDAAoDE,QAAQ,CAACe,IAAI,iBAAiBU,KAAK,GAAG,CAAC,GAAG,EAAE3B,KAAK,CAAC;IACxH;IACA;;IAGA;IACA,MAAM2D,YAAY,GAAG/B,OAAO,CAACgC,QAAQ,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;;IAE/E;IACA,MAAMC,WAAW,GAAG,GAAGxC,QAAQ,GAAGI,KAAK,GAAG,CAAC,GAAGN,GAAG,EAAE;IACnD,MAAM2C,WAAW,GAAG/C,aAAI,CAACgD,IAAI,CAAC9C,GAAG,EAAE4C,WAAW,CAAC;;IAE/C;IACA,IAAI;MACFG,WAAE,CAACC,aAAa,CAACH,WAAW,EAAEL,YAAY,CAAC;MAC3C5D,OAAO,CAACiB,GAAG,CAAC,cAAcgD,WAAW,EAAE,CAAC;IAC1C,CAAC,CAAC,OAAOhE,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,6BAA6BgE,WAAW,GAAG,EAAEhE,KAAK,CAAC;IACnE;EACF,CAAC,CAAC;;EAEF;EACA,OAAOe,SAAS;AAClB;;AAEA","ignoreList":[]}},"mtime":1746464270376},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\split-specs4.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs.js\n\n// --- Helper Function ---\nconst locationsAreEqual = (locA, locB) => {\n  if (!locA || !locB) return false;\n  try {\n    return locA.start.line === locB.start.line && locA.start.column === locB.start.column && locA.end.line === locB.end.line && locA.end.column === locB.end.column;\n  } catch (e) {\n    console.error(\"Error comparando localizaciones:\", e);\n    return false;\n  }\n};\n// --- Fin Helper ---\n\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths();\n  if (itPaths.length <= 1) {\n    return undefined;\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath);\n  const baseName = _path.default.basename(originalPath, ext);\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear copia fresca del AST\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar todos los 'it' en la copia\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Obtener la ubicación del 'it' a conservar\n    const targetLoc = targetItPath.node.loc;\n    if (!targetLoc) {\n      console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\n      return;\n    }\n\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      const currentLoc = currentItPathInCopy.node.loc;\n      if (!locationsAreEqual(currentLoc, targetLoc)) {\n        try {\n          var _parentStatementPath$;\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement' && (_parentStatementPath$ = parentStatementPath.parentPath) !== null && _parentStatementPath$ !== void 0 && (_parentStatementPath$ = _parentStatementPath$.node) !== null && _parentStatementPath$ !== void 0 && _parentStatementPath$.type) {\n            j(parentStatementPath).remove();\n          } else {\n            var _currentLoc$start;\n            j(currentItPathInCopy).remove();\n            console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start = currentLoc.start) === null || _currentLoc$start === void 0 ? void 0 : _currentLoc$start.line}). Revise el archivo ${index + 1}.`);\n          }\n        } catch (error) {\n          var _currentLoc$start2;\n          console.error(`Error eliminando bloque 'it' (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start2 = currentLoc.start) === null || _currentLoc$start2 === void 0 ? void 0 : _currentLoc$start2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\n        }\n      }\n    });\n\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' vacíos ---\n    try {\n      const describePaths = astCopy.find(j.CallExpression, {\n        callee: {\n          name: 'describe'\n        }\n      }).paths();\n\n      // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\n      describePaths.reverse().forEach(describePath => {\n        let isEmpty = false;\n        try {\n          // Acceder al cuerpo (BlockStatement) de la función del describe\n          const describeFunc = describePath.node.arguments[1]; // El callback es usualmente el 2º argumento\n          let blockStatementNode;\n          if (describeFunc && (describeFunc.type === 'FunctionExpression' || describeFunc.type === 'ArrowFunctionExpression') && describeFunc.body.type === 'BlockStatement') {\n            blockStatementNode = describeFunc.body;\n          } else {\n            var _describePath$node$lo;\n            // Si la estructura no es la esperada, no lo consideramos vacío por seguridad\n            console.warn(`Advertencia: Estructura inesperada en describe (línea ${(_describePath$node$lo = describePath.node.loc) === null || _describePath$node$lo === void 0 || (_describePath$node$lo = _describePath$node$lo.start) === null || _describePath$node$lo === void 0 ? void 0 : _describePath$node$lo.line}) en ${fileInfo.path} para archivo ${index + 1}. No se limpiará.`);\n            return; // Saltar al siguiente describe\n          }\n\n          // Comprobar si el cuerpo contiene llamadas relevantes\n          const relevantCalls = j(blockStatementNode).find(j.CallExpression, node => {\n            var _node$callee;\n            return ['it', 'describe', 'beforeEach', 'afterEach', 'beforeAll', 'afterAll'].includes((_node$callee = node.callee) === null || _node$callee === void 0 ? void 0 : _node$callee.name);\n          } // Optional chaining por si callee no existe\n          );\n          if (relevantCalls.length === 0) {\n            // No hay llamadas relevantes, consideramos el describe vacío\n            isEmpty = true;\n          }\n        } catch (findError) {\n          var _describePath$node$lo2;\n          console.error(`Error inspeccionando cuerpo de describe (línea ${(_describePath$node$lo2 = describePath.node.loc) === null || _describePath$node$lo2 === void 0 || (_describePath$node$lo2 = _describePath$node$lo2.start) === null || _describePath$node$lo2 === void 0 ? void 0 : _describePath$node$lo2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\n          // No eliminar si hubo error al inspeccionar\n          isEmpty = false;\n        }\n        if (isEmpty) {\n          // Eliminar el ExpressionStatement que contiene la llamada al describe\n          const parentStatementPath = describePath.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement') {\n            var _describePath$node$lo3;\n            j(parentStatementPath).remove();\n            console.log(`   - Describe vacío eliminado (línea ${(_describePath$node$lo3 = describePath.node.loc) === null || _describePath$node$lo3 === void 0 || (_describePath$node$lo3 = _describePath$node$lo3.start) === null || _describePath$node$lo3 === void 0 ? void 0 : _describePath$node$lo3.line}) en archivo ${index + 1}`);\n          } else {\n            var _describePath$node$lo4;\n            console.warn(`Advertencia: Describe vacío (línea ${(_describePath$node$lo4 = describePath.node.loc) === null || _describePath$node$lo4 === void 0 || (_describePath$node$lo4 = _describePath$node$lo4.start) === null || _describePath$node$lo4 === void 0 ? void 0 : _describePath$node$lo4.line}) no estaba en un ExpressionStatement directo. No se eliminó.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante la limpieza de bloques describe en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO ---\n\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\n    const resultsDir = _path.default.join(dir, 'results'); // Directorio de resultados\n    const newFileName = `${baseName}${index + 1}${ext}`;\n    const newFilePath = _path.default.join(resultsDir, newFileName); // Ruta completa en 'results'\n\n    // 8. Asegurarse de que el directorio 'results' exista\n    try {\n      if (!_fs.default.existsSync(resultsDir)) {\n        _fs.default.mkdirSync(resultsDir, {\n          recursive: true\n        });\n        console.log(`   Directorio 'results' creado en: ${resultsDir}`);\n      }\n    } catch (error) {\n      console.error(`Error creando directorio ${resultsDir}:`, error);\n      return; // No continuar si no se puede crear el directorio\n    }\n\n    // 9. Escribir el nuevo archivo en el directorio 'results'\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Devolver undefined/null para no modificar el original\n  return undefined;\n}\n\n// export const parser = 'ts';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","locationsAreEqual","locA","locB","start","line","column","end","console","error","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","undefined","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","forEach","targetItPath","index","astCopy","allItPathsInCopy","targetLoc","node","loc","currentItPathInCopy","currentLoc","_parentStatementPath$","parentStatementPath","parentPath","type","remove","_currentLoc$start","warn","_currentLoc$start2","describePaths","reverse","describePath","isEmpty","describeFunc","arguments","blockStatementNode","body","_describePath$node$lo","relevantCalls","_node$callee","includes","findError","_describePath$node$lo2","_describePath$node$lo3","_describePath$node$lo4","outputSource","toSource","quote","trailingComma","resultsDir","join","newFileName","newFilePath","fs","existsSync","mkdirSync","recursive","writeFileSync"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\","sources":["split-specs4.js"],"sourcesContent":["// split-specs.js\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// --- Helper Function ---\r\nconst locationsAreEqual = (locA, locB) => {\r\n    if (!locA || !locB) return false;\r\n    try {\r\n        return (\r\n            locA.start.line === locB.start.line &&\r\n            locA.start.column === locB.start.column &&\r\n            locA.end.line === locB.end.line &&\r\n            locA.end.column === locB.end.column\r\n        );\r\n    } catch(e) {\r\n        console.error(\"Error comparando localizaciones:\", e);\r\n        return false;\r\n    }\r\n};\r\n// --- Fin Helper ---\r\n\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source);\r\n\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths();\r\n\r\n  if (itPaths.length <= 1) {\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath);\r\n  const baseName = path.basename(originalPath, ext);\r\n\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear copia fresca del AST\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar todos los 'it' en la copia\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Obtener la ubicación del 'it' a conservar\r\n    const targetLoc = targetItPath.node.loc;\r\n    if (!targetLoc) {\r\n        console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\r\n        return;\r\n    }\r\n\r\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n        const currentLoc = currentItPathInCopy.node.loc;\r\n        if (!locationsAreEqual(currentLoc, targetLoc)) {\r\n            try {\r\n                 const parentStatementPath = currentItPathInCopy.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement' && parentStatementPath.parentPath?.node?.type) {\r\n                     j(parentStatementPath).remove();\r\n                 } else {\r\n                     j(currentItPathInCopy).remove();\r\n                     console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc?.start?.line}). Revise el archivo ${index + 1}.`);\r\n                 }\r\n            } catch (error) {\r\n                console.error(`Error eliminando bloque 'it' (línea ${currentLoc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n            }\r\n        }\r\n    });\r\n\r\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' vacíos ---\r\n    try {\r\n        const describePaths = astCopy.find(j.CallExpression, {\r\n            callee: { name: 'describe' }\r\n        }).paths();\r\n\r\n        // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\r\n        describePaths.reverse().forEach(describePath => {\r\n            let isEmpty = false;\r\n            try {\r\n                // Acceder al cuerpo (BlockStatement) de la función del describe\r\n                const describeFunc = describePath.node.arguments[1]; // El callback es usualmente el 2º argumento\r\n                let blockStatementNode;\r\n\r\n                if (describeFunc && (describeFunc.type === 'FunctionExpression' || describeFunc.type === 'ArrowFunctionExpression') && describeFunc.body.type === 'BlockStatement') {\r\n                     blockStatementNode = describeFunc.body;\r\n                } else {\r\n                     // Si la estructura no es la esperada, no lo consideramos vacío por seguridad\r\n                     console.warn(`Advertencia: Estructura inesperada en describe (línea ${describePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}. No se limpiará.`);\r\n                     return; // Saltar al siguiente describe\r\n                }\r\n\r\n                // Comprobar si el cuerpo contiene llamadas relevantes\r\n                const relevantCalls = j(blockStatementNode).find(j.CallExpression, node =>\r\n                    ['it', 'describe', 'beforeEach', 'afterEach', 'beforeAll', 'afterAll'].includes(node.callee?.name) // Optional chaining por si callee no existe\r\n                );\r\n\r\n                if (relevantCalls.length === 0) {\r\n                    // No hay llamadas relevantes, consideramos el describe vacío\r\n                    isEmpty = true;\r\n                }\r\n\r\n            } catch (findError){\r\n                 console.error(`Error inspeccionando cuerpo de describe (línea ${describePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\r\n                 // No eliminar si hubo error al inspeccionar\r\n                 isEmpty = false;\r\n            }\r\n\r\n\r\n            if (isEmpty) {\r\n                 // Eliminar el ExpressionStatement que contiene la llamada al describe\r\n                 const parentStatementPath = describePath.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement') {\r\n                     j(parentStatementPath).remove();\r\n                     console.log(`   - Describe vacío eliminado (línea ${describePath.node.loc?.start?.line}) en archivo ${index + 1}`);\r\n                 } else {\r\n                     console.warn(`Advertencia: Describe vacío (línea ${describePath.node.loc?.start?.line}) no estaba en un ExpressionStatement directo. No se eliminó.`);\r\n                 }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante la limpieza de bloques describe en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO ---\r\n\r\n\r\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\r\n    const resultsDir = path.join(dir, 'results'); // Directorio de resultados\r\n    const newFileName = `${baseName}${index + 1}${ext}`;\r\n    const newFilePath = path.join(resultsDir, newFileName); // Ruta completa en 'results'\r\n\r\n    // 8. Asegurarse de que el directorio 'results' exista\r\n    try {\r\n        if (!fs.existsSync(resultsDir)) {\r\n            fs.mkdirSync(resultsDir, { recursive: true });\r\n            console.log(`   Directorio 'results' creado en: ${resultsDir}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error creando directorio ${resultsDir}:`, error);\r\n        return; // No continuar si no se puede crear el directorio\r\n    }\r\n\r\n\r\n    // 9. Escribir el nuevo archivo en el directorio 'results'\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Devolver undefined/null para no modificar el original\r\n  return undefined;\r\n}\r\n\r\n// export const parser = 'ts';"],"mappings":"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","ignoreList":[]}},"mtime":1746468081749},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\\\\split-specs5.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\30_04_25-15_05_25\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs.js\n\n// --- Helper Function ---\nconst locationsAreEqual = (locA, locB) => {\n  if (!locA || !locB) return false;\n  try {\n    return locA.start.line === locB.start.line && locA.start.column === locB.start.column && locA.end.line === locB.end.line && locA.end.column === locB.end.column;\n  } catch (e) {\n    console.error(\"Error comparando localizaciones:\", e);\n    return false;\n  }\n};\n// --- Fin Helper ---\n\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths();\n  if (itPaths.length <= 1) {\n    return undefined;\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath);\n  const baseName = _path.default.basename(originalPath, ext);\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear copia fresca del AST\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar todos los 'it' en la copia\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Obtener la ubicación del 'it' a conservar\n    const targetLoc = targetItPath.node.loc;\n    if (!targetLoc) {\n      console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\n      return;\n    }\n\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      const currentLoc = currentItPathInCopy.node.loc;\n      if (!locationsAreEqual(currentLoc, targetLoc)) {\n        try {\n          var _parentStatementPath$;\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement' && (_parentStatementPath$ = parentStatementPath.parentPath) !== null && _parentStatementPath$ !== void 0 && (_parentStatementPath$ = _parentStatementPath$.node) !== null && _parentStatementPath$ !== void 0 && _parentStatementPath$.type) {\n            j(parentStatementPath).remove();\n          } else {\n            var _currentLoc$start;\n            j(currentItPathInCopy).remove();\n            console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start = currentLoc.start) === null || _currentLoc$start === void 0 ? void 0 : _currentLoc$start.line}). Revise el archivo ${index + 1}.`);\n          }\n        } catch (error) {\n          var _currentLoc$start2;\n          console.error(`Error eliminando bloque 'it' (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start2 = currentLoc.start) === null || _currentLoc$start2 === void 0 ? void 0 : _currentLoc$start2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\n        }\n      }\n    });\n\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' o 'context' vacíos ---\n    try {\n      const suitePaths = astCopy.find(j.CallExpression).filter(path => path.node.callee.type === 'Identifier' && ['describe', 'context'].includes(path.node.callee.name)).paths();\n\n      // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\n      suitePaths.reverse().forEach(suitePath => {\n        let isEffectivelyEmpty = false;\n        try {\n          // Acceder al cuerpo (BlockStatement) de la función del describe/context\n          const suiteFunc = suitePath.node.arguments[1]; // El callback es usualmente el 2º argumento\n          let blockStatementNode;\n          if (suiteFunc && (suiteFunc.type === 'FunctionExpression' || suiteFunc.type === 'ArrowFunctionExpression') && suiteFunc.body.type === 'BlockStatement') {\n            blockStatementNode = suiteFunc.body;\n          } else {\n            var _suitePath$node$loc;\n            console.warn(`Advertencia: Estructura inesperada en describe/context (línea ${(_suitePath$node$loc = suitePath.node.loc) === null || _suitePath$node$loc === void 0 || (_suitePath$node$loc = _suitePath$node$loc.start) === null || _suitePath$node$loc === void 0 ? void 0 : _suitePath$node$loc.line}) en ${fileInfo.path} para archivo ${index + 1}. No se considerará para limpieza.`);\n            return; // Saltar al siguiente suitePath\n          }\n\n          // Comprobar si el cuerpo contiene llamadas 'it'\n          const itCallsInBlock = j(blockStatementNode).find(j.CallExpression, {\n            callee: {\n              name: 'it'\n            }\n          });\n          if (itCallsInBlock.length === 0) {\n            // No hay llamadas 'it' en este bloque describe/context.\n            isEffectivelyEmpty = true;\n          }\n        } catch (findError) {\n          var _suitePath$node$loc2;\n          console.error(`Error inspeccionando cuerpo de describe/context (línea ${(_suitePath$node$loc2 = suitePath.node.loc) === null || _suitePath$node$loc2 === void 0 || (_suitePath$node$loc2 = _suitePath$node$loc2.start) === null || _suitePath$node$loc2 === void 0 ? void 0 : _suitePath$node$loc2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\n          isEffectivelyEmpty = false; // No eliminar si hubo error al inspeccionar\n        }\n        if (isEffectivelyEmpty) {\n          const parentStatementPath = suitePath.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement') {\n            var _suitePath$node$loc3;\n            j(parentStatementPath).remove();\n            console.log(`   - Describe/Context (línea ${(_suitePath$node$loc3 = suitePath.node.loc) === null || _suitePath$node$loc3 === void 0 || (_suitePath$node$loc3 = _suitePath$node$loc3.start) === null || _suitePath$node$loc3 === void 0 ? void 0 : _suitePath$node$loc3.line}) eliminado en archivo ${index + 1} por no contener bloques 'it'.`);\n          } else {\n            var _suitePath$node$loc4;\n            console.warn(`Advertencia: Describe/Context (línea ${(_suitePath$node$loc4 = suitePath.node.loc) === null || _suitePath$node$loc4 === void 0 || (_suitePath$node$loc4 = _suitePath$node$loc4.start) === null || _suitePath$node$loc4 === void 0 ? void 0 : _suitePath$node$loc4.line}) sin bloques 'it' no estaba en un ExpressionStatement directo y no se eliminó. Archivo ${index + 1}.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante la limpieza de bloques describe/context en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO ---\n\n    // 5.1 --- NUEVO PASO: Desenvolver 'context' si solo contiene el bloque 'it' objetivo ---\n    try {\n      const contextCallPaths = astCopy.find(j.CallExpression, {\n        callee: {\n          name: 'context'\n        }\n      }).paths();\n      contextCallPaths.reverse().forEach(contextCallPath => {\n        const contextNode = contextCallPath.node;\n        if (!contextNode.arguments || contextNode.arguments.length < 2) return;\n        const contextCallback = contextNode.arguments[1];\n        if (!contextCallback || !contextCallback.body || contextCallback.body.type !== 'BlockStatement') return;\n        const contextBodyNode = contextCallback.body;\n        // Verificar que el cuerpo del context contenga exactamente una declaración\n        if (!contextBodyNode.body || contextBodyNode.body.length !== 1) {\n          return;\n        }\n        const singleStatementInContextBody = contextBodyNode.body[0];\n        // Verificar que la única declaración sea una ExpressionStatement que llama a 'it'\n        if (singleStatementInContextBody.type === 'ExpressionStatement' && singleStatementInContextBody.expression && singleStatementInContextBody.expression.type === 'CallExpression' && singleStatementInContextBody.expression.callee && singleStatementInContextBody.expression.callee.name === 'it') {\n          // Este 'context' contiene únicamente una llamada 'it'.\n          // Dado que otros 'it' fueron eliminados en el paso 4, este 'it' es el objetivo.\n          const contextStatementPath = contextCallPath.parentPath;\n          if (contextStatementPath.node.type === 'ExpressionStatement') {\n            var _contextNode$loc;\n            // Reemplazar el ExpressionStatement del 'context' con el ExpressionStatement del 'it'\n            j(contextStatementPath).replaceWith(singleStatementInContextBody);\n            console.log(`   - Contexto desenvuelto (línea ${(_contextNode$loc = contextNode.loc) === null || _contextNode$loc === void 0 || (_contextNode$loc = _contextNode$loc.start) === null || _contextNode$loc === void 0 ? void 0 : _contextNode$loc.line}) en archivo ${index + 1} porque solo contenía un bloque 'it'.`);\n          } else {\n            var _contextNode$loc2;\n            console.warn(`Advertencia: Contexto (línea ${(_contextNode$loc2 = contextNode.loc) === null || _contextNode$loc2 === void 0 || (_contextNode$loc2 = _contextNode$loc2.start) === null || _contextNode$loc2 === void 0 ? void 0 : _contextNode$loc2.line}) que solo contenía un 'it' no estaba en un ExpressionStatement directo. No se desenvolvió en archivo ${index + 1}.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante el desenvolvimiento de bloques 'context' en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO 5.1 ---\n\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\n    const resultsDir = _path.default.join(dir, 'results'); // Directorio de resultados\n\n    let newFileName;\n    if (baseName.endsWith('.spec')) {\n      const nameWithoutSpec = baseName.substring(0, baseName.length - '.spec'.length);\n      newFileName = `${nameWithoutSpec}${index + 1}.spec${ext}`;\n    } else {\n      // Fallback for other naming conventions if needed, or stick to original logic\n      // For now, let's assume files are *.spec.ext or handle as an error/warning\n      // Sticking to a modified version of original logic for non .spec files for broader compatibility\n      newFileName = `${baseName}${index + 1}${ext}`;\n      console.warn(`   Advertencia: El archivo base \"${baseName}${ext}\" no termina con '.spec'. Se usó el formato de nombre: ${newFileName}`);\n    }\n    // const newFileName = `${baseName}${index + 1}${ext}`; // Original line\n    const newFilePath = _path.default.join(resultsDir, newFileName); // Ruta completa en 'results'\n\n    // 8. Asegurarse de que el directorio 'results' exista\n    try {\n      if (!_fs.default.existsSync(resultsDir)) {\n        _fs.default.mkdirSync(resultsDir, {\n          recursive: true\n        });\n        console.log(`   Directorio 'results' creado en: ${resultsDir}`);\n      }\n    } catch (error) {\n      console.error(`Error creando directorio ${resultsDir}:`, error);\n      return; // No continuar si no se puede crear el directorio\n    }\n\n    // 9. Escribir el nuevo archivo en el directorio 'results'\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Devolver undefined/null para no modificar el original\n  return undefined;\n}\n\n// export const parser = 'ts';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","locationsAreEqual","locA","locB","start","line","column","end","console","error","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","undefined","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","forEach","targetItPath","index","astCopy","allItPathsInCopy","targetLoc","node","loc","currentItPathInCopy","currentLoc","_parentStatementPath$","parentStatementPath","parentPath","type","remove","_currentLoc$start","warn","_currentLoc$start2","suitePaths","filter","includes","reverse","suitePath","isEffectivelyEmpty","suiteFunc","arguments","blockStatementNode","body","_suitePath$node$loc","itCallsInBlock","findError","_suitePath$node$loc2","_suitePath$node$loc3","_suitePath$node$loc4","contextCallPaths","contextCallPath","contextNode","contextCallback","contextBodyNode","singleStatementInContextBody","expression","contextStatementPath","_contextNode$loc","replaceWith","_contextNode$loc2","outputSource","toSource","quote","trailingComma","resultsDir","join","newFileName","endsWith","nameWithoutSpec","substring","newFilePath","fs","existsSync","mkdirSync","recursive","writeFileSync"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\30_04_25-15_05_25\\splitITJCodeShift\\","sources":["split-specs5.js"],"sourcesContent":["// split-specs.js\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// --- Helper Function ---\r\nconst locationsAreEqual = (locA, locB) => {\r\n    if (!locA || !locB) return false;\r\n    try {\r\n        return (\r\n            locA.start.line === locB.start.line &&\r\n            locA.start.column === locB.start.column &&\r\n            locA.end.line === locB.end.line &&\r\n            locA.end.column === locB.end.column\r\n        );\r\n    } catch(e) {\r\n        console.error(\"Error comparando localizaciones:\", e);\r\n        return false;\r\n    }\r\n};\r\n// --- Fin Helper ---\r\n\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source);\r\n\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths();\r\n\r\n  if (itPaths.length <= 1) {\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath);\r\n  const baseName = path.basename(originalPath, ext);\r\n\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear copia fresca del AST\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar todos los 'it' en la copia\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Obtener la ubicación del 'it' a conservar\r\n    const targetLoc = targetItPath.node.loc;\r\n    if (!targetLoc) {\r\n        console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\r\n        return;\r\n    }\r\n\r\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n        const currentLoc = currentItPathInCopy.node.loc;\r\n        if (!locationsAreEqual(currentLoc, targetLoc)) {\r\n            try {\r\n                 const parentStatementPath = currentItPathInCopy.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement' && parentStatementPath.parentPath?.node?.type) {\r\n                     j(parentStatementPath).remove();\r\n                 } else {\r\n                     j(currentItPathInCopy).remove();\r\n                     console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc?.start?.line}). Revise el archivo ${index + 1}.`);\r\n                 }\r\n            } catch (error) {\r\n                console.error(`Error eliminando bloque 'it' (línea ${currentLoc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n            }\r\n        }\r\n    });\r\n\r\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' o 'context' vacíos ---\r\n    try {\r\n        const suitePaths = astCopy.find(j.CallExpression)\r\n            .filter(path =>\r\n                path.node.callee.type === 'Identifier' &&\r\n                ['describe', 'context'].includes(path.node.callee.name)\r\n            )\r\n            .paths();\r\n\r\n        // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\r\n        suitePaths.reverse().forEach(suitePath => {\r\n            let isEffectivelyEmpty = false;\r\n            try {\r\n                // Acceder al cuerpo (BlockStatement) de la función del describe/context\r\n                const suiteFunc = suitePath.node.arguments[1]; // El callback es usualmente el 2º argumento\r\n                let blockStatementNode;\r\n\r\n                if (suiteFunc && (suiteFunc.type === 'FunctionExpression' || suiteFunc.type === 'ArrowFunctionExpression') && suiteFunc.body.type === 'BlockStatement') {\r\n                     blockStatementNode = suiteFunc.body;\r\n                } else {\r\n                     console.warn(`Advertencia: Estructura inesperada en describe/context (línea ${suitePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}. No se considerará para limpieza.`);\r\n                     return; // Saltar al siguiente suitePath\r\n                }\r\n\r\n                // Comprobar si el cuerpo contiene llamadas 'it'\r\n                const itCallsInBlock = j(blockStatementNode).find(j.CallExpression, {\r\n                    callee: { name: 'it' }\r\n                });\r\n\r\n                if (itCallsInBlock.length === 0) {\r\n                    // No hay llamadas 'it' en este bloque describe/context.\r\n                    isEffectivelyEmpty = true;\r\n                }\r\n\r\n            } catch (findError){\r\n                 console.error(`Error inspeccionando cuerpo de describe/context (línea ${suitePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\r\n                 isEffectivelyEmpty = false; // No eliminar si hubo error al inspeccionar\r\n            }\r\n\r\n            if (isEffectivelyEmpty) {\r\n                 const parentStatementPath = suitePath.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement') {\r\n                     j(parentStatementPath).remove();\r\n                     console.log(`   - Describe/Context (línea ${suitePath.node.loc?.start?.line}) eliminado en archivo ${index + 1} por no contener bloques 'it'.`);\r\n                 } else {\r\n                     console.warn(`Advertencia: Describe/Context (línea ${suitePath.node.loc?.start?.line}) sin bloques 'it' no estaba en un ExpressionStatement directo y no se eliminó. Archivo ${index + 1}.`);\r\n                 }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante la limpieza de bloques describe/context en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO ---\r\n\r\n    // 5.1 --- NUEVO PASO: Desenvolver 'context' si solo contiene el bloque 'it' objetivo ---\r\n    try {\r\n        const contextCallPaths = astCopy.find(j.CallExpression, {\r\n            callee: { name: 'context' }\r\n        }).paths();\r\n\r\n        contextCallPaths.reverse().forEach(contextCallPath => {\r\n            const contextNode = contextCallPath.node;\r\n            if (!contextNode.arguments || contextNode.arguments.length < 2) return;\r\n\r\n            const contextCallback = contextNode.arguments[1];\r\n            if (!contextCallback || !contextCallback.body || contextCallback.body.type !== 'BlockStatement') return;\r\n\r\n            const contextBodyNode = contextCallback.body;\r\n            // Verificar que el cuerpo del context contenga exactamente una declaración\r\n            if (!contextBodyNode.body || contextBodyNode.body.length !== 1) {\r\n                return;\r\n            }\r\n\r\n            const singleStatementInContextBody = contextBodyNode.body[0];\r\n            // Verificar que la única declaración sea una ExpressionStatement que llama a 'it'\r\n            if (singleStatementInContextBody.type === 'ExpressionStatement' &&\r\n                singleStatementInContextBody.expression &&\r\n                singleStatementInContextBody.expression.type === 'CallExpression' &&\r\n                singleStatementInContextBody.expression.callee &&\r\n                singleStatementInContextBody.expression.callee.name === 'it') {\r\n\r\n                // Este 'context' contiene únicamente una llamada 'it'.\r\n                // Dado que otros 'it' fueron eliminados en el paso 4, este 'it' es el objetivo.\r\n                const contextStatementPath = contextCallPath.parentPath;\r\n                if (contextStatementPath.node.type === 'ExpressionStatement') {\r\n                    // Reemplazar el ExpressionStatement del 'context' con el ExpressionStatement del 'it'\r\n                    j(contextStatementPath).replaceWith(singleStatementInContextBody);\r\n                    console.log(`   - Contexto desenvuelto (línea ${contextNode.loc?.start?.line}) en archivo ${index + 1} porque solo contenía un bloque 'it'.`);\r\n                } else {\r\n                    console.warn(`Advertencia: Contexto (línea ${contextNode.loc?.start?.line}) que solo contenía un 'it' no estaba en un ExpressionStatement directo. No se desenvolvió en archivo ${index + 1}.`);\r\n                }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante el desenvolvimiento de bloques 'context' en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO 5.1 ---\r\n\r\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\r\n    const resultsDir = path.join(dir, 'results'); // Directorio de resultados\r\n    \r\n    let newFileName;\r\n    if (baseName.endsWith('.spec')) {\r\n      const nameWithoutSpec = baseName.substring(0, baseName.length - '.spec'.length);\r\n      newFileName = `${nameWithoutSpec}${index + 1}.spec${ext}`;\r\n    } else {\r\n      // Fallback for other naming conventions if needed, or stick to original logic\r\n      // For now, let's assume files are *.spec.ext or handle as an error/warning\r\n      // Sticking to a modified version of original logic for non .spec files for broader compatibility\r\n      newFileName = `${baseName}${index + 1}${ext}`;\r\n      console.warn(`   Advertencia: El archivo base \"${baseName}${ext}\" no termina con '.spec'. Se usó el formato de nombre: ${newFileName}`);\r\n    }\r\n    // const newFileName = `${baseName}${index + 1}${ext}`; // Original line\r\n    const newFilePath = path.join(resultsDir, newFileName); // Ruta completa en 'results'\r\n\r\n    // 8. Asegurarse de que el directorio 'results' exista\r\n    try {\r\n        if (!fs.existsSync(resultsDir)) {\r\n            fs.mkdirSync(resultsDir, { recursive: true });\r\n            console.log(`   Directorio 'results' creado en: ${resultsDir}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error creando directorio ${resultsDir}:`, error);\r\n        return; // No continuar si no se puede crear el directorio\r\n    }\r\n\r\n\r\n    // 9. Escribir el nuevo archivo en el directorio 'results'\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Devolver undefined/null para no modificar el original\r\n  return undefined;\r\n}\r\n\r\n// export const parser = 'ts';"],"mappings":"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","ignoreList":[]}},"mtime":1746629971568},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\split-specs-configurable.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformer;\nexports.parser = void 0;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// split-specs-configurable.js - Modified transformer that accepts custom output folder\n\n// --- Helper Function ---\nconst locationsAreEqual = (locA, locB) => {\n  if (!locA || !locB) return false;\n  try {\n    return locA.start.line === locB.start.line && locA.start.column === locB.start.column && locA.end.line === locB.end.line && locA.end.column === locB.end.column;\n  } catch (e) {\n    console.error(\"Error comparando localizaciones:\", e);\n    return false;\n  }\n};\n// --- Fin Helper ---\n\nfunction transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const itPaths = root.find(j.CallExpression, {\n    callee: {\n      name: 'it'\n    }\n  }).paths();\n  if (itPaths.length <= 1) {\n    return undefined;\n  }\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\n  const originalPath = fileInfo.path;\n  const dir = _path.default.dirname(originalPath);\n  const ext = _path.default.extname(originalPath);\n  const baseName = _path.default.basename(originalPath, ext);\n\n  // Use custom output folder if provided, otherwise default to 'results' subdirectory\n  const customOutputFolder = global.CUSTOM_OUTPUT_FOLDER;\n  const resultsDir = customOutputFolder || _path.default.join(dir, 'results');\n  itPaths.forEach((targetItPath, index) => {\n    // 1. Crear copia fresca del AST\n    const astCopy = j(fileInfo.source);\n\n    // 2. Encontrar todos los 'it' en la copia\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\n      callee: {\n        name: 'it'\n      }\n    }).paths();\n\n    // 3. Obtener la ubicación del 'it' a conservar\n    const targetLoc = targetItPath.node.loc;\n    if (!targetLoc) {\n      console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\n      return;\n    }\n\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\n    allItPathsInCopy.forEach(currentItPathInCopy => {\n      const currentLoc = currentItPathInCopy.node.loc;\n      if (!locationsAreEqual(currentLoc, targetLoc)) {\n        try {\n          var _parentStatementPath$;\n          const parentStatementPath = currentItPathInCopy.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement' && (_parentStatementPath$ = parentStatementPath.parentPath) !== null && _parentStatementPath$ !== void 0 && (_parentStatementPath$ = _parentStatementPath$.node) !== null && _parentStatementPath$ !== void 0 && _parentStatementPath$.type) {\n            j(parentStatementPath).remove();\n          } else {\n            var _currentLoc$start;\n            j(currentItPathInCopy).remove();\n            console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start = currentLoc.start) === null || _currentLoc$start === void 0 ? void 0 : _currentLoc$start.line}). Revise el archivo ${index + 1}.`);\n          }\n        } catch (error) {\n          var _currentLoc$start2;\n          console.error(`Error eliminando bloque 'it' (línea ${currentLoc === null || currentLoc === void 0 || (_currentLoc$start2 = currentLoc.start) === null || _currentLoc$start2 === void 0 ? void 0 : _currentLoc$start2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\n        }\n      }\n    });\n\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' o 'context' vacíos ---\n    try {\n      const suitePaths = astCopy.find(j.CallExpression).filter(path => path.node.callee.type === 'Identifier' && ['describe', 'context'].includes(path.node.callee.name)).paths();\n\n      // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\n      suitePaths.reverse().forEach(suitePath => {\n        let isEffectivelyEmpty = false;\n        try {\n          // Acceder al cuerpo (BlockStatement) de la función del describe/context\n          const suiteFunc = suitePath.node.arguments[1]; // El callback es usualmente el 2º argumento\n          let blockStatementNode;\n          if (suiteFunc && (suiteFunc.type === 'FunctionExpression' || suiteFunc.type === 'ArrowFunctionExpression') && suiteFunc.body.type === 'BlockStatement') {\n            blockStatementNode = suiteFunc.body;\n          } else {\n            var _suitePath$node$loc;\n            console.warn(`Advertencia: Estructura inesperada en describe/context (línea ${(_suitePath$node$loc = suitePath.node.loc) === null || _suitePath$node$loc === void 0 || (_suitePath$node$loc = _suitePath$node$loc.start) === null || _suitePath$node$loc === void 0 ? void 0 : _suitePath$node$loc.line}) en ${fileInfo.path} para archivo ${index + 1}. No se considerará para limpieza.`);\n            return; // Saltar al siguiente suitePath\n          }\n\n          // Comprobar si el cuerpo contiene llamadas 'it'\n          const itCallsInBlock = j(blockStatementNode).find(j.CallExpression, {\n            callee: {\n              name: 'it'\n            }\n          });\n          if (itCallsInBlock.length === 0) {\n            // No hay llamadas 'it' en este bloque describe/context.\n            isEffectivelyEmpty = true;\n          }\n        } catch (findError) {\n          var _suitePath$node$loc2;\n          console.error(`Error inspeccionando cuerpo de describe/context (línea ${(_suitePath$node$loc2 = suitePath.node.loc) === null || _suitePath$node$loc2 === void 0 || (_suitePath$node$loc2 = _suitePath$node$loc2.start) === null || _suitePath$node$loc2 === void 0 ? void 0 : _suitePath$node$loc2.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\n          isEffectivelyEmpty = false; // No eliminar si hubo error al inspeccionar\n        }\n        if (isEffectivelyEmpty) {\n          const parentStatementPath = suitePath.parentPath;\n          if (parentStatementPath.node.type === 'ExpressionStatement') {\n            var _suitePath$node$loc3;\n            j(parentStatementPath).remove();\n            console.log(`   - Describe/Context (línea ${(_suitePath$node$loc3 = suitePath.node.loc) === null || _suitePath$node$loc3 === void 0 || (_suitePath$node$loc3 = _suitePath$node$loc3.start) === null || _suitePath$node$loc3 === void 0 ? void 0 : _suitePath$node$loc3.line}) eliminado en archivo ${index + 1} por no contener bloques 'it'.`);\n          } else {\n            var _suitePath$node$loc4;\n            console.warn(`Advertencia: Describe/Context (línea ${(_suitePath$node$loc4 = suitePath.node.loc) === null || _suitePath$node$loc4 === void 0 || (_suitePath$node$loc4 = _suitePath$node$loc4.start) === null || _suitePath$node$loc4 === void 0 ? void 0 : _suitePath$node$loc4.line}) sin bloques 'it' no estaba en un ExpressionStatement directo y no se eliminó. Archivo ${index + 1}.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante la limpieza de bloques describe/context en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO ---\n\n    // 5.1 --- NUEVO PASO: Desenvolver 'context' si solo contiene el bloque 'it' objetivo ---\n    try {\n      const contextCallPaths = astCopy.find(j.CallExpression, {\n        callee: {\n          name: 'context'\n        }\n      }).paths();\n      contextCallPaths.reverse().forEach(contextCallPath => {\n        const contextNode = contextCallPath.node;\n        if (!contextNode.arguments || contextNode.arguments.length < 2) return;\n        const contextCallback = contextNode.arguments[1];\n        if (!contextCallback || !contextCallback.body || contextCallback.body.type !== 'BlockStatement') return;\n        const contextBodyNode = contextCallback.body;\n        // Verificar que el cuerpo del context contenga exactamente una declaración\n        if (!contextBodyNode.body || contextBodyNode.body.length !== 1) {\n          return;\n        }\n        const singleStatementInContextBody = contextBodyNode.body[0];\n        // Verificar que la única declaración sea una ExpressionStatement que llama a 'it'\n        if (singleStatementInContextBody.type === 'ExpressionStatement' && singleStatementInContextBody.expression && singleStatementInContextBody.expression.type === 'CallExpression' && singleStatementInContextBody.expression.callee && singleStatementInContextBody.expression.callee.name === 'it') {\n          // Este 'context' contiene únicamente una llamada 'it'.\n          // Dado que otros 'it' fueron eliminados en el paso 4, este 'it' es el objetivo.\n          const contextStatementPath = contextCallPath.parentPath;\n          if (contextStatementPath.node.type === 'ExpressionStatement') {\n            var _contextNode$loc;\n            // Reemplazar el ExpressionStatement del 'context' con el ExpressionStatement del 'it'\n            j(contextStatementPath).replaceWith(singleStatementInContextBody);\n            console.log(`   - Contexto desenvuelto (línea ${(_contextNode$loc = contextNode.loc) === null || _contextNode$loc === void 0 || (_contextNode$loc = _contextNode$loc.start) === null || _contextNode$loc === void 0 ? void 0 : _contextNode$loc.line}) en archivo ${index + 1} porque solo contenía un bloque 'it'.`);\n          } else {\n            var _contextNode$loc2;\n            console.warn(`Advertencia: Contexto (línea ${(_contextNode$loc2 = contextNode.loc) === null || _contextNode$loc2 === void 0 || (_contextNode$loc2 = _contextNode$loc2.start) === null || _contextNode$loc2 === void 0 ? void 0 : _contextNode$loc2.line}) que solo contenía un 'it' no estaba en un ExpressionStatement directo. No se desenvolvió en archivo ${index + 1}.`);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error durante el desenvolvimiento de bloques 'context' en ${fileInfo.path} para archivo ${index + 1}:`, error);\n    }\n    // --- FIN NUEVO PASO 5.1 ---\n\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\n    const outputSource = astCopy.toSource({\n      quote: 'single',\n      trailingComma: true\n    });\n\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\n    let newFileName;\n    if (baseName.endsWith('.spec')) {\n      const nameWithoutSpec = baseName.substring(0, baseName.length - '.spec'.length);\n      newFileName = `${nameWithoutSpec}${index + 1}.spec${ext}`;\n    } else {\n      // Fallback for other naming conventions if needed, or stick to original logic\n      // For now, let's assume files are *.spec.ext or handle as an error/warning\n      // Sticking to a modified version of original logic for non .spec files for broader compatibility\n      newFileName = `${baseName}${index + 1}${ext}`;\n      console.warn(`   Advertencia: El archivo base \"${baseName}${ext}\" no termina con '.spec'. Se usó el formato de nombre: ${newFileName}`);\n    }\n    const newFilePath = _path.default.join(resultsDir, newFileName); // Ruta completa usando resultsDir configurable\n\n    // 8. Asegurarse de que el directorio de salida exista\n    try {\n      if (!_fs.default.existsSync(resultsDir)) {\n        _fs.default.mkdirSync(resultsDir, {\n          recursive: true\n        });\n        if (customOutputFolder) {\n          console.log(`   Directorio de salida personalizado creado en: ${resultsDir}`);\n        } else {\n          console.log(`   Directorio 'results' creado en: ${resultsDir}`);\n        }\n      }\n    } catch (error) {\n      console.error(`Error creando directorio ${resultsDir}:`, error);\n      return; // No continuar si no se puede crear el directorio\n    }\n\n    // 9. Escribir el nuevo archivo en el directorio de salida\n    try {\n      _fs.default.writeFileSync(newFilePath, outputSource);\n      console.log(`   Creado: ${newFilePath}`);\n    } catch (error) {\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\n    }\n  });\n\n  // Devolver undefined/null para no modificar el original\n  return undefined;\n}\nconst parser = exports.parser = 'tsx';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","locationsAreEqual","locA","locB","start","line","column","end","console","error","transformer","fileInfo","api","j","jscodeshift","root","source","itPaths","find","CallExpression","callee","name","paths","length","undefined","log","path","originalPath","dir","dirname","ext","extname","baseName","basename","customOutputFolder","global","CUSTOM_OUTPUT_FOLDER","resultsDir","join","forEach","targetItPath","index","astCopy","allItPathsInCopy","targetLoc","node","loc","currentItPathInCopy","currentLoc","_parentStatementPath$","parentStatementPath","parentPath","type","remove","_currentLoc$start","warn","_currentLoc$start2","suitePaths","filter","includes","reverse","suitePath","isEffectivelyEmpty","suiteFunc","arguments","blockStatementNode","body","_suitePath$node$loc","itCallsInBlock","findError","_suitePath$node$loc2","_suitePath$node$loc3","_suitePath$node$loc4","contextCallPaths","contextCallPath","contextNode","contextCallback","contextBodyNode","singleStatementInContextBody","expression","contextStatementPath","_contextNode$loc","replaceWith","_contextNode$loc2","outputSource","toSource","quote","trailingComma","newFileName","endsWith","nameWithoutSpec","substring","newFilePath","fs","existsSync","mkdirSync","recursive","writeFileSync","parser","exports"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\splitITJCodeShift\\","sources":["split-specs-configurable.js"],"sourcesContent":["// split-specs-configurable.js - Modified transformer that accepts custom output folder\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// --- Helper Function ---\r\nconst locationsAreEqual = (locA, locB) => {\r\n    if (!locA || !locB) return false;\r\n    try {\r\n        return (\r\n            locA.start.line === locB.start.line &&\r\n            locA.start.column === locB.start.column &&\r\n            locA.end.line === locB.end.line &&\r\n            locA.end.column === locB.end.column\r\n        );\r\n    } catch(e) {\r\n        console.error(\"Error comparando localizaciones:\", e);\r\n        return false;\r\n    }\r\n};\r\n// --- Fin Helper ---\r\n\r\nexport default function transformer(fileInfo, api) {\r\n  const j = api.jscodeshift;\r\n  const root = j(fileInfo.source);\r\n\r\n  const itPaths = root.find(j.CallExpression, {\r\n    callee: { name: 'it' },\r\n  }).paths();\r\n\r\n  if (itPaths.length <= 1) {\r\n    return undefined;\r\n  }\r\n\r\n  console.log(`-> Archivo ${fileInfo.path}: ${itPaths.length} bloque(s) 'it' encontrados. Generando archivos individuales...`);\r\n\r\n  const originalPath = fileInfo.path;\r\n  const dir = path.dirname(originalPath);\r\n  const ext = path.extname(originalPath);\r\n  const baseName = path.basename(originalPath, ext);\r\n\r\n  // Use custom output folder if provided, otherwise default to 'results' subdirectory\r\n  const customOutputFolder = global.CUSTOM_OUTPUT_FOLDER;\r\n  const resultsDir = customOutputFolder || path.join(dir, 'results');\r\n\r\n  itPaths.forEach((targetItPath, index) => {\r\n    // 1. Crear copia fresca del AST\r\n    const astCopy = j(fileInfo.source);\r\n\r\n    // 2. Encontrar todos los 'it' en la copia\r\n    const allItPathsInCopy = astCopy.find(j.CallExpression, {\r\n        callee: { name: 'it' },\r\n      }).paths();\r\n\r\n    // 3. Obtener la ubicación del 'it' a conservar\r\n    const targetLoc = targetItPath.node.loc;\r\n    if (!targetLoc) {\r\n        console.error(`Error Crítico: Falta información de ubicación para el bloque 'it' (índice ${index}) en ${fileInfo.path}. No se puede generar archivo ${index + 1}.`);\r\n        return;\r\n    }\r\n\r\n    // 4. Eliminar los 'it' cuya ubicación NO COINCIDA\r\n    allItPathsInCopy.forEach(currentItPathInCopy => {\r\n        const currentLoc = currentItPathInCopy.node.loc;\r\n        if (!locationsAreEqual(currentLoc, targetLoc)) {\r\n            try {\r\n                 const parentStatementPath = currentItPathInCopy.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement' && parentStatementPath.parentPath?.node?.type) {\r\n                     j(parentStatementPath).remove();\r\n                 } else {\r\n                     j(currentItPathInCopy).remove();\r\n                     console.warn(`Advertencia: Estructura inesperada para bloque 'it' en ${fileInfo.path} (línea ${currentLoc?.start?.line}). Revise el archivo ${index + 1}.`);\r\n                 }\r\n            } catch (error) {\r\n                console.error(`Error eliminando bloque 'it' (línea ${currentLoc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n            }\r\n        }\r\n    });\r\n\r\n    // 5. --- NUEVO PASO: Eliminar bloques 'describe' o 'context' vacíos ---\r\n    try {\r\n        const suitePaths = astCopy.find(j.CallExpression)\r\n            .filter(path =>\r\n                path.node.callee.type === 'Identifier' &&\r\n                ['describe', 'context'].includes(path.node.callee.name)\r\n            )\r\n            .paths();\r\n\r\n        // Iterar en REVERSA es importante al eliminar nodos para no afectar índices/paths\r\n        suitePaths.reverse().forEach(suitePath => {\r\n            let isEffectivelyEmpty = false;\r\n            try {\r\n                // Acceder al cuerpo (BlockStatement) de la función del describe/context\r\n                const suiteFunc = suitePath.node.arguments[1]; // El callback es usualmente el 2º argumento\r\n                let blockStatementNode;\r\n\r\n                if (suiteFunc && (suiteFunc.type === 'FunctionExpression' || suiteFunc.type === 'ArrowFunctionExpression') && suiteFunc.body.type === 'BlockStatement') {\r\n                     blockStatementNode = suiteFunc.body;\r\n                } else {\r\n                     console.warn(`Advertencia: Estructura inesperada en describe/context (línea ${suitePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}. No se considerará para limpieza.`);\r\n                     return; // Saltar al siguiente suitePath\r\n                }\r\n\r\n                // Comprobar si el cuerpo contiene llamadas 'it'\r\n                const itCallsInBlock = j(blockStatementNode).find(j.CallExpression, {\r\n                    callee: { name: 'it' }\r\n                });\r\n\r\n                if (itCallsInBlock.length === 0) {\r\n                    // No hay llamadas 'it' en este bloque describe/context.\r\n                    isEffectivelyEmpty = true;\r\n                }\r\n\r\n            } catch (findError){\r\n                 console.error(`Error inspeccionando cuerpo de describe/context (línea ${suitePath.node.loc?.start?.line}) en ${fileInfo.path} para archivo ${index + 1}:`, findError);\r\n                 isEffectivelyEmpty = false; // No eliminar si hubo error al inspeccionar\r\n            }\r\n\r\n            if (isEffectivelyEmpty) {\r\n                 const parentStatementPath = suitePath.parentPath;\r\n                 if (parentStatementPath.node.type === 'ExpressionStatement') {\r\n                     j(parentStatementPath).remove();\r\n                     console.log(`   - Describe/Context (línea ${suitePath.node.loc?.start?.line}) eliminado en archivo ${index + 1} por no contener bloques 'it'.`);\r\n                 } else {\r\n                     console.warn(`Advertencia: Describe/Context (línea ${suitePath.node.loc?.start?.line}) sin bloques 'it' no estaba en un ExpressionStatement directo y no se eliminó. Archivo ${index + 1}.`);\r\n                 }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante la limpieza de bloques describe/context en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO ---\r\n\r\n    // 5.1 --- NUEVO PASO: Desenvolver 'context' si solo contiene el bloque 'it' objetivo ---\r\n    try {\r\n        const contextCallPaths = astCopy.find(j.CallExpression, {\r\n            callee: { name: 'context' }\r\n        }).paths();\r\n\r\n        contextCallPaths.reverse().forEach(contextCallPath => {\r\n            const contextNode = contextCallPath.node;\r\n            if (!contextNode.arguments || contextNode.arguments.length < 2) return;\r\n\r\n            const contextCallback = contextNode.arguments[1];\r\n            if (!contextCallback || !contextCallback.body || contextCallback.body.type !== 'BlockStatement') return;\r\n\r\n            const contextBodyNode = contextCallback.body;\r\n            // Verificar que el cuerpo del context contenga exactamente una declaración\r\n            if (!contextBodyNode.body || contextBodyNode.body.length !== 1) {\r\n                return;\r\n            }\r\n\r\n            const singleStatementInContextBody = contextBodyNode.body[0];\r\n            // Verificar que la única declaración sea una ExpressionStatement que llama a 'it'\r\n            if (singleStatementInContextBody.type === 'ExpressionStatement' &&\r\n                singleStatementInContextBody.expression &&\r\n                singleStatementInContextBody.expression.type === 'CallExpression' &&\r\n                singleStatementInContextBody.expression.callee &&\r\n                singleStatementInContextBody.expression.callee.name === 'it') {\r\n\r\n                // Este 'context' contiene únicamente una llamada 'it'.\r\n                // Dado que otros 'it' fueron eliminados en el paso 4, este 'it' es el objetivo.\r\n                const contextStatementPath = contextCallPath.parentPath;\r\n                if (contextStatementPath.node.type === 'ExpressionStatement') {\r\n                    // Reemplazar el ExpressionStatement del 'context' con el ExpressionStatement del 'it'\r\n                    j(contextStatementPath).replaceWith(singleStatementInContextBody);\r\n                    console.log(`   - Contexto desenvuelto (línea ${contextNode.loc?.start?.line}) en archivo ${index + 1} porque solo contenía un bloque 'it'.`);\r\n                } else {\r\n                    console.warn(`Advertencia: Contexto (línea ${contextNode.loc?.start?.line}) que solo contenía un 'it' no estaba en un ExpressionStatement directo. No se desenvolvió en archivo ${index + 1}.`);\r\n                }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(`Error durante el desenvolvimiento de bloques 'context' en ${fileInfo.path} para archivo ${index + 1}:`, error);\r\n    }\r\n    // --- FIN NUEVO PASO 5.1 ---\r\n\r\n    // 6. Generar código fuente desde el AST modificado (ahora también sin describes vacíos)\r\n    const outputSource = astCopy.toSource({ quote: 'single', trailingComma: true });\r\n\r\n    // 7. Construir nuevo nombre de archivo y ruta de directorio de resultados\r\n    let newFileName;\r\n    if (baseName.endsWith('.spec')) {\r\n      const nameWithoutSpec = baseName.substring(0, baseName.length - '.spec'.length);\r\n      newFileName = `${nameWithoutSpec}${index + 1}.spec${ext}`;\r\n    } else {\r\n      // Fallback for other naming conventions if needed, or stick to original logic\r\n      // For now, let's assume files are *.spec.ext or handle as an error/warning\r\n      // Sticking to a modified version of original logic for non .spec files for broader compatibility\r\n      newFileName = `${baseName}${index + 1}${ext}`;\r\n      console.warn(`   Advertencia: El archivo base \"${baseName}${ext}\" no termina con '.spec'. Se usó el formato de nombre: ${newFileName}`);\r\n    }\r\n    const newFilePath = path.join(resultsDir, newFileName); // Ruta completa usando resultsDir configurable\r\n\r\n    // 8. Asegurarse de que el directorio de salida exista\r\n    try {\r\n        if (!fs.existsSync(resultsDir)) {\r\n            fs.mkdirSync(resultsDir, { recursive: true });\r\n            if (customOutputFolder) {\r\n                console.log(`   Directorio de salida personalizado creado en: ${resultsDir}`);\r\n            } else {\r\n                console.log(`   Directorio 'results' creado en: ${resultsDir}`);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error creando directorio ${resultsDir}:`, error);\r\n        return; // No continuar si no se puede crear el directorio\r\n    }\r\n\r\n    // 9. Escribir el nuevo archivo en el directorio de salida\r\n    try {\r\n      fs.writeFileSync(newFilePath, outputSource);\r\n      console.log(`   Creado: ${newFilePath}`);\r\n    } catch (error) {\r\n      console.error(`Error escribiendo archivo ${newFilePath}:`, error);\r\n    }\r\n  });\r\n\r\n  // Devolver undefined/null para no modificar el original\r\n  return undefined;\r\n}\r\n\r\nexport const parser = 'tsx';\r\n"],"mappings":"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","ignoreList":[]}},"mtime":1749060428279},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\tsx.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\nconst baseOptions = require('./tsOptions');\nconst options = Object.assign({}, baseOptions);\noptions.plugins = ['jsx'].concat(baseOptions.plugins);\n\n/**\n * Doesn't accept custom options because babylon should be used directly in\n * that case.\n */\nmodule.exports = function () {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYWJ5bG9uIiwicmVxdWlyZSIsImJhc2VPcHRpb25zIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsInBsdWdpbnMiLCJjb25jYXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2UiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHhhYmlhXFxPbmVEcml2ZVxcRG9jdW1lbnRvc1xcNC5NYWlsYVxcVEZHLUJlc3RlbGFrb2FrXFxCZXN0ZWxha29ha1xcUHJvaWVrdHVhXFxzcGxpdElUSkNvZGVTaGlmdFxcbm9kZV9tb2R1bGVzXFxqc2NvZGVzaGlmdFxccGFyc2VyXFwiLCJzb3VyY2VzIjpbInRzeC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBiYWJ5bG9uID0gcmVxdWlyZSgnQGJhYmVsL3BhcnNlcicpO1xuY29uc3QgYmFzZU9wdGlvbnMgPSByZXF1aXJlKCcuL3RzT3B0aW9ucycpO1xuXG5jb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgYmFzZU9wdGlvbnMpO1xub3B0aW9ucy5wbHVnaW5zID0gWydqc3gnXS5jb25jYXQoYmFzZU9wdGlvbnMucGx1Z2lucyk7XG5cbi8qKlxuICogRG9lc24ndCBhY2NlcHQgY3VzdG9tIG9wdGlvbnMgYmVjYXVzZSBiYWJ5bG9uIHNob3VsZCBiZSB1c2VkIGRpcmVjdGx5IGluXG4gKiB0aGF0IGNhc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcGFyc2UoY29kZSkge1xuICAgICAgcmV0dXJuIGJhYnlsb24ucGFyc2UoY29kZSwgb3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUN4QyxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFMUMsTUFBTUUsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUgsV0FBVyxDQUFDO0FBQzlDQyxPQUFPLENBQUNHLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDQyxNQUFNLENBQUNMLFdBQVcsQ0FBQ0ksT0FBTyxDQUFDOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFXO0VBQzFCLE9BQU87SUFDTEMsS0FBS0EsQ0FBQ0MsSUFBSSxFQUFFO01BQ1YsT0FBT1gsT0FBTyxDQUFDVSxLQUFLLENBQUNDLElBQUksRUFBRVIsT0FBTyxDQUFDO0lBQ3JDO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=","map":{"version":3,"names":["babylon","require","baseOptions","options","Object","assign","plugins","concat","module","exports","parse","code"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\splitITJCodeShift\\node_modules\\jscodeshift\\parser\\","sources":["tsx.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\nconst baseOptions = require('./tsOptions');\n\nconst options = Object.assign({}, baseOptions);\noptions.plugins = ['jsx'].concat(baseOptions.plugins);\n\n/**\n * Doesn't accept custom options because babylon should be used directly in\n * that case.\n */\nmodule.exports = function() {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    },\n  };\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AACxC,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAE1C,MAAME,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,WAAW,CAAC;AAC9CC,OAAO,CAACG,OAAO,GAAG,CAAC,KAAK,CAAC,CAACC,MAAM,CAACL,WAAW,CAACI,OAAO,CAAC;;AAErD;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,YAAW;EAC1B,OAAO;IACLC,KAAKA,CAACC,IAAI,EAAE;MACV,OAAOX,OAAO,CAACU,KAAK,CAACC,IAAI,EAAER,OAAO,CAAC;IACrC;EACF,CAAC;AACH,CAAC","ignoreList":[]}},"mtime":1746461488467},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"filename\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\\\\node_modules\\\\jscodeshift\\\\parser\\\\tsOptions.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\xabia\\\\OneDrive\\\\Documentos\\\\4.Maila\\\\TFG-Bestelakoak\\\\Bestelakoak\\\\Proiektua\\\\splitITJCodeShift\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Options shared by the TypeScript and TSX parsers.\n */\nmodule.exports = {\n  sourceType: 'module',\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: ['asyncGenerators', 'decoratorAutoAccessors', 'bigInt', 'classPrivateMethods', 'classPrivateProperties', 'classProperties', 'decorators-legacy', 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportExtensions', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importAttributes', 'importMeta', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', ['pipelineOperator', {\n    proposal: 'minimal'\n  }], 'throwExpressions', 'typescript']\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic291cmNlVHlwZSIsImFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZSIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwic3RhcnRMaW5lIiwidG9rZW5zIiwicGx1Z2lucyIsInByb3Bvc2FsIl0sInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXHhhYmlhXFxPbmVEcml2ZVxcRG9jdW1lbnRvc1xcNC5NYWlsYVxcVEZHLUJlc3RlbGFrb2FrXFxCZXN0ZWxha29ha1xcUHJvaWVrdHVhXFxzcGxpdElUSkNvZGVTaGlmdFxcbm9kZV9tb2R1bGVzXFxqc2NvZGVzaGlmdFxccGFyc2VyXFwiLCJzb3VyY2VzIjpbInRzT3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE9wdGlvbnMgc2hhcmVkIGJ5IHRoZSBUeXBlU2NyaXB0IGFuZCBUU1ggcGFyc2Vycy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNvdXJjZVR5cGU6ICdtb2R1bGUnLFxuICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IHRydWUsXG4gIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiB0cnVlLFxuICBzdGFydExpbmU6IDEsXG4gIHRva2VuczogdHJ1ZSxcbiAgcGx1Z2luczogW1xuICAgICdhc3luY0dlbmVyYXRvcnMnLFxuICAgICdkZWNvcmF0b3JBdXRvQWNjZXNzb3JzJyxcbiAgICAnYmlnSW50JyxcbiAgICAnY2xhc3NQcml2YXRlTWV0aG9kcycsXG4gICAgJ2NsYXNzUHJpdmF0ZVByb3BlcnRpZXMnLFxuICAgICdjbGFzc1Byb3BlcnRpZXMnLFxuICAgICdkZWNvcmF0b3JzLWxlZ2FjeScsXG4gICAgJ2RvRXhwcmVzc2lvbnMnLFxuICAgICdkeW5hbWljSW1wb3J0JyxcbiAgICAnZXhwb3J0RGVmYXVsdEZyb20nLFxuICAgICdleHBvcnRFeHRlbnNpb25zJyxcbiAgICAnZXhwb3J0TmFtZXNwYWNlRnJvbScsXG4gICAgJ2Z1bmN0aW9uQmluZCcsXG4gICAgJ2Z1bmN0aW9uU2VudCcsXG4gICAgJ2ltcG9ydEF0dHJpYnV0ZXMnLFxuICAgICdpbXBvcnRNZXRhJyxcbiAgICAnbnVsbGlzaENvYWxlc2NpbmdPcGVyYXRvcicsXG4gICAgJ251bWVyaWNTZXBhcmF0b3InLFxuICAgICdvYmplY3RSZXN0U3ByZWFkJyxcbiAgICAnb3B0aW9uYWxDYXRjaEJpbmRpbmcnLFxuICAgICdvcHRpb25hbENoYWluaW5nJyxcbiAgICBbJ3BpcGVsaW5lT3BlcmF0b3InLCB7IHByb3Bvc2FsOiAnbWluaW1hbCcgfV0sXG4gICAgJ3Rocm93RXhwcmVzc2lvbnMnLFxuICAgICd0eXBlc2NyaXB0J1xuICBdLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLFVBQVUsRUFBRSxRQUFRO0VBQ3BCQywyQkFBMkIsRUFBRSxJQUFJO0VBQ2pDQywwQkFBMEIsRUFBRSxJQUFJO0VBQ2hDQyxTQUFTLEVBQUUsQ0FBQztFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxPQUFPLEVBQUUsQ0FDUCxpQkFBaUIsRUFDakIsd0JBQXdCLEVBQ3hCLFFBQVEsRUFDUixxQkFBcUIsRUFDckIsd0JBQXdCLEVBQ3hCLGlCQUFpQixFQUNqQixtQkFBbUIsRUFDbkIsZUFBZSxFQUNmLGVBQWUsRUFDZixtQkFBbUIsRUFDbkIsa0JBQWtCLEVBQ2xCLHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsY0FBYyxFQUNkLGtCQUFrQixFQUNsQixZQUFZLEVBQ1osMkJBQTJCLEVBQzNCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGtCQUFrQixFQUNsQixDQUFDLGtCQUFrQixFQUFFO0lBQUVDLFFBQVEsRUFBRTtFQUFVLENBQUMsQ0FBQyxFQUM3QyxrQkFBa0IsRUFDbEIsWUFBWTtBQUVoQixDQUFDIiwiaWdub3JlTGlzdCI6W119","map":{"version":3,"names":["module","exports","sourceType","allowImportExportEverywhere","allowReturnOutsideFunction","startLine","tokens","plugins","proposal"],"sourceRoot":"C:\\Users\\xabia\\OneDrive\\Documentos\\4.Maila\\TFG-Bestelakoak\\Bestelakoak\\Proiektua\\splitITJCodeShift\\node_modules\\jscodeshift\\parser\\","sources":["tsOptions.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Options shared by the TypeScript and TSX parsers.\n */\nmodule.exports = {\n  sourceType: 'module',\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    'asyncGenerators',\n    'decoratorAutoAccessors',\n    'bigInt',\n    'classPrivateMethods',\n    'classPrivateProperties',\n    'classProperties',\n    'decorators-legacy',\n    'doExpressions',\n    'dynamicImport',\n    'exportDefaultFrom',\n    'exportExtensions',\n    'exportNamespaceFrom',\n    'functionBind',\n    'functionSent',\n    'importAttributes',\n    'importMeta',\n    'nullishCoalescingOperator',\n    'numericSeparator',\n    'objectRestSpread',\n    'optionalCatchBinding',\n    'optionalChaining',\n    ['pipelineOperator', { proposal: 'minimal' }],\n    'throwExpressions',\n    'typescript'\n  ],\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG;EACfC,UAAU,EAAE,QAAQ;EACpBC,2BAA2B,EAAE,IAAI;EACjCC,0BAA0B,EAAE,IAAI;EAChCC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,CACP,iBAAiB,EACjB,wBAAwB,EACxB,QAAQ,EACR,qBAAqB,EACrB,wBAAwB,EACxB,iBAAiB,EACjB,mBAAmB,EACnB,eAAe,EACf,eAAe,EACf,mBAAmB,EACnB,kBAAkB,EAClB,qBAAqB,EACrB,cAAc,EACd,cAAc,EACd,kBAAkB,EAClB,YAAY,EACZ,2BAA2B,EAC3B,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,kBAAkB,EAClB,CAAC,kBAAkB,EAAE;IAAEC,QAAQ,EAAE;EAAU,CAAC,CAAC,EAC7C,kBAAkB,EAClB,YAAY;AAEhB,CAAC","ignoreList":[]}},"mtime":1746461488461}}