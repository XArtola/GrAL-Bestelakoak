---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("submits a transaction payment and verifies the deposit for the receiver", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: The one `it` block can be filled out as follows. We assume a `userInfo` object is already in scope with the given transactions array and that the standard `cy.getBySel‚Ä¶` helpers exist:
> 
> ````typescript
> // it("submits a transaction payment and verifies the deposit for the receiver", () => {
> <generated_code>
> // 1. grab the receiver's initial balance from the database
> let initialBalance: number;
> cy.database("find", "users", { id: ctx.contact!.id }).then((user) => {
>   initialBalance = user.balance;
> });
> 
> // 2. open the "New Transaction" form
> cy.getBySelLike("new-transaction").click();
> cy.wait("@allUsers");
> 
> // 3. search for and select the contact
> cy.getBySelLike("user-list-search-input").type(ctx.contact!.firstName);
> cy.wait("@usersSearch");
> cy.getBySelLike("user-list-item").first().click();
> 
> // 4. fill out the payment using the first paymentTransactions entry
> cy.getBySelLike("amount-input").clear().type(userInfo.paymentTransactions[0].amount);
> cy.getBySelLike("description-input").clear().type(userInfo.paymentTransactions[0].description);
> 
> // 5. submit the payment
> cy.getBySel("transaction-create-submit-payment").click();
> cy.wait("@createTransaction");
> 
> // 6. logout the sender and log back in as the receiver
> cy.getBySel("sidenav-signout").click();
> cy.loginByXstate(ctx.contact!.username);
> 
> // 7. verify the new transaction appears in the receiver‚Äôs feed
> cy.getBySel("nav-personal-tab").click();
> cy.wait("@personalTransactions");
> cy.getBySel("transaction-item").first()
>   .should("contain", userInfo.paymentTransactions[0].description)
>   .and("contain", `$${userInfo.paymentTransactions[0].amount}`);
> 
> // 8. verify the receiver‚Äôs balance in the DB increased by the payment amount
> cy.database("find", "users", { id: ctx.contact!.id }).then((userAfter) => {
>   expect(userAfter.balance)
>     .to.equal(initialBalance + Number(userInfo.paymentTransactions[0].amount) * 100);
> });
> </generated_code>
> ````
