---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from "../../../src/models";
import { addDays, isWithinInterval, startOfDay } from "date-fns";
import { startOfDayUTC, endOfDayUTC } from "../../../src/utils/transactionUtils";
import { isMobile } from "../../support/utils";
const { _ } = Cypress;
type TransactionFeedsCtx = {
    allUsers?: User[];
    user?: User;
    contactIds?: string[];
};
describe("Transaction Feed", function () {
    const ctx: TransactionFeedsCtx = {};
    const feedViews = {
        public: {
            tab: "public-tab",
            tabLabel: "everyone",
            routeAlias: "publicTransactions",
            service: "publicTransactionService",
        },
        contacts: {
            tab: "contacts-tab",
            tabLabel: "friends",
            routeAlias: "contactsTransactions",
            service: "contactTransactionService",
        },
        personal: {
            tab: "personal-tab",
            tabLabel: "mine",
            routeAlias: "personalTransactions",
            service: "personalTransactionService",
        },
    };
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions*").as(feedViews.personal.routeAlias);
        cy.intercept("GET", "/transactions/public*").as(feedViews.public.routeAlias);
        cy.intercept("GET", "/transactions/contacts*").as(feedViews.contacts.routeAlias);
        cy.database("filter", "users").then((users: User[]) => {
            ctx.user = users[0];
            ctx.allUsers = users;
            cy.loginByXstate(ctx.user.username);
        });
    });
    describe("Feed Item Visibility", () => {
        it("first five items belong to contacts in public feed", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help generate the test code for the transaction feed test. Based on the test structure and context, here's the code for testing contact transactions in the public feed:
> 
> ```typescript
> // Test: first five items belong to contacts in public feed
> it("first five items belong to contacts in public feed", () => {
>     // Get user's contacts first to establish contact IDs
>     cy.database("find", "contacts", { userId: ctx.user!.id }).then((contacts: Contact[]) => {
>         const contactIds = contacts.map(contact => contact.contactUserId);
>         ctx.contactIds = contactIds;
>         
>         // Navigate to public feed
>         cy.getBySel("nav-public-tab").click();
>         cy.wait(`@${feedViews.public.routeAlias}`);
>         
>         // Ensure transactions are loaded
>         cy.getBySel("transaction-item").should("have.length.at.least", 1);
>         
>         // Check first 5 transactions (or less if fewer exist)
>         cy.getBySel("transaction-item").then($items => {
>             const numToCheck = Math.min(5, $items.length);
>             
>             for (let i = 0; i < numToCheck; i++) {
>                 cy.wrap($items[i]).within(() => {
>                     // Check if either sender or receiver is in user's contacts
>                     cy.get("[data-test^='transaction-sender-'], [data-test^='transaction-receiver-']")
>                         .invoke("attr", "data-test")
>                         .then(dataTest => {
>                             const userId = dataTest!.split("-")[2];
>                             const isContact = contactIds.includes(userId);
>                             expect(isContact, `Transaction ${i + 1} should involve a contact`).to.be.true;
>                         });
>                 });
>             }
>         });
>     });
> });
> ```
> 
> This test implementation:
> 
> 1. Gets the user's contacts from the database
> 2. Extracts contact IDs for comparison
> 3. Navigates to the public transactions feed
> 4. Waits for the public transactions API call to complete
> 5. Verifies transactions are present
> 6. Examines the first 5 transactions (or all if less than 5)
> 7. For each transaction, checks if either the sender or receiver is in the user's contacts
> 8. Uses assertions to verify each transaction involves at least one contact
> 
> The test uses Cypress commands and selectors that match the application's structure shown in the test files. It follows Cypress best practices by:
> - Using proper command chaining
> - Including meaningful assertions
> - Handling asynchronous operations correctly
> - Using appropriate selectors
> - Including clear comments explaining the test flow
> - Properly scoping element queries
> 
> The test makes use of the test context (ctx) and feed views configuration provided in the test setup.
