---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("soft deletes a bank account", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the "soft deletes a bank account" test based on the provided test structure and user information.
> 
> For the bank account deletion test, we need to first create a bank account (using the provided bank account info) and then delete it. Here's the code for this test:
> 
> ````typescript
> // Test: soft deletes a bank account
> it("soft deletes a bank account", () => {
>     // Create a new bank account first
>     cy.getBySel("bankaccount-new").click();
>     
>     // Fill in bank account details
>     cy.getBySel("bankaccount-bankName-input").type("The Best Bank");
>     cy.getBySel("bankaccount-routingNumber-input").type("987654321"); 
>     cy.getBySel("bankaccount-accountNumber-input").type("123456789");
>     cy.getBySel("bankaccount-submit").click();
>     
>     // Wait for bank account creation
>     cy.wait("@gqlCreateBankAccountMutation");
>     
>     // Verify bank account was created
>     cy.getBySel("bankaccount-list").should("contain", "The Best Bank");
>     cy.getBySel("bankaccount-list").should("contain", "123456789");
>     
>     // Delete the bank account
>     cy.getBySel("bankaccount-delete").first().click();
>     
>     // Confirm deletion in dialog
>     cy.getBySel("modal-delete-confirmation").should("be.visible");
>     cy.getBySel("modal-delete-confirmation-submit").click();
>     
>     // Wait for deletion mutation
>     cy.wait("@gqlDeleteBankAccountMutation");
>     
>     // Verify bank account was removed from list
>     cy.getBySel("bankaccount-list")
>         .should("not.contain", "The Best Bank")
>         .and("not.contain", "123456789");
> });
> ````
> 
> This test covers:
> 1. Creating a new bank account with the provided info
> 2. Verifying the bank account was created successfully
> 3. Deleting the bank account through the UI
> 4. Confirming the deletion in the modal dialog
> 5. Verifying the bank account was removed from the list
> 
> The test uses the data-test selectors (`getBySel`) which is a common pattern in the codebase. It also waits for the GraphQL mutations to complete before making assertions.
