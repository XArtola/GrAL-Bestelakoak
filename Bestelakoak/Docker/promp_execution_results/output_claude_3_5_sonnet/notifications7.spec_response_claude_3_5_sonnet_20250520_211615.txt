---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    it("renders an empty notifications state", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll help you generate the code for the "renders an empty notifications state" test block. Based on the test context, we want to verify that a clean/new user sees the empty state for notifications.
> 
> Here's the code for the test block:
> 
> ````typescript
> // Test: renders an empty notifications state
> it("renders an empty notifications state", () => {
>     // Create a brand new user that won't have any notifications
>     cy.task("db:seed:user").then((user: User) => {
>         // Log in as the new user
>         cy.loginByXstate(user.username);
>         cy.wait("@getNotifications");
> 
>         // Navigate to notifications page
>         cy.getBySel("notifications-link").click();
> 
>         // Verify empty state elements are visible
>         cy.getBySel("empty-list-header").should("be.visible");
>         cy.getBySel("empty-list-sub-header").should("be.visible");
> 
>         // Verify no notification items exist
>         cy.getBySel("notification-list-item").should("not.exist");
>     });
> });
> ````
> 
> This code:
> 
> 1. Creates a fresh user using `db:seed:user` to ensure no pre-existing notifications
> 2. Logs in as that new user
> 3. Waits for notifications API call to complete 
> 4. Navigates to notifications page
> 5. Verifies empty state UI elements are shown
> 6. Confirms no notification items exist
> 
> The test checks the core empty state functionality while following Cypress best practices:
> 
> - Uses data-test selectors (`getBySel`)
> - Waits for network requests (`@getNotifications`) 
> - Makes explicit assertions about UI state
> - Creates test data (new user) programmatically
> - Uses proper async handling with .then()
> 
> I'm using `getBySel` custom command which appears to be the project's convention for selecting elements by data-test attributes.
> 
> Let me know if you would like me to explain any part of the implementation or if you need modifications to better match your specific requirements.
