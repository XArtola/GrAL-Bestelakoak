---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User, Transaction, TransactionRequestStatus, TransactionResponseItem, Contact, TransactionStatus, } from "../../../src/models";
import { addDays, isWithinInterval, startOfDay } from "date-fns";
import { startOfDayUTC, endOfDayUTC } from "../../../src/utils/transactionUtils";
import { isMobile } from "../../support/utils";
const { _ } = Cypress;
type TransactionFeedsCtx = {
    allUsers?: User[];
    user?: User;
    contactIds?: string[];
};
describe("Transaction Feed", function () {
    const ctx: TransactionFeedsCtx = {};
    const feedViews = {
        public: {
            tab: "public-tab",
            tabLabel: "everyone",
            routeAlias: "publicTransactions",
            service: "publicTransactionService",
        },
        contacts: {
            tab: "contacts-tab",
            tabLabel: "friends",
            routeAlias: "contactsTransactions",
            service: "contactTransactionService",
        },
        personal: {
            tab: "personal-tab",
            tabLabel: "mine",
            routeAlias: "personalTransactions",
            service: "personalTransactionService",
        },
    };
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions*").as(feedViews.personal.routeAlias);
        cy.intercept("GET", "/transactions/public*").as(feedViews.public.routeAlias);
        cy.intercept("GET", "/transactions/contacts*").as(feedViews.contacts.routeAlias);
        cy.database("filter", "users").then((users: User[]) => {
            ctx.user = users[0];
            ctx.allUsers = users;
            cy.loginByXstate(ctx.user.username);
        });
    });
    describe("Feed Item Visibility", () => {
        it("mine feed only shows personal transactions", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the test structure, I'll write the implementation for testing if the "mine" tab in the transaction feed only shows the user's personal transactions.
> 
> The task is to verify that transactions shown in the personal feed are indeed related to the logged-in user (either as sender or receiver).
> 
> Here's the implementation:
> 
> ```typescript
> // Test: "mine feed only shows personal transactions"
> it("mine feed only shows personal transactions", () => {
>   // Navigate to personal feed
>   cy.getBySel("nav-personal-tab").click();
>   cy.wait(`@${feedViews.personal.routeAlias}`);
> 
>   // Get user's ID for later comparison
>   const userId = ctx.user!.id;
> 
>   // Check if there are any transactions
>   cy.getBySel("transaction-item").then(($items) => {
>     if ($items.length === 0) {
>       cy.getBySel("empty-list-header").should("be.visible");
>       cy.log("No transactions found in personal feed. Test skipped.");
>       return;
>     }
> 
>     // For each transaction in the personal feed, verify it involves the current user
>     cy.getBySel("transaction-item").each(($el) => {
>       // Check if the transaction sender or receiver is the current user
>       cy.wrap($el).within(() => {
>         cy.get("[data-test*='transaction-sender-'], [data-test*='transaction-receiver-']")
>           .invoke("attr", "data-test")
>           .then((dataTest) => {
>             // Extract the user ID from the data-test attribute
>             const transactionUserId = dataTest!.split("-")[2];
>             
>             // Assert that the transaction involves the current user
>             expect(transactionUserId).to.equal(userId);
>           });
>       });
>     });
> 
>     // Alternative verification: use database to confirm all transactions involve the user
>     cy.database("filter", "transactions", { 
>       $or: [{ senderId: userId }, { receiverId: userId }] 
>     }).then((userTransactions: Transaction[]) => {
>       // Check that number of user's transactions matches what's displayed in the feed
>       cy.getBySel("transaction-item").should("have.length", userTransactions.length);
>     });
>   });
> });
> ```
> 
> This implementation:
> 1. Navigates to the personal transactions tab
> 2. Checks if there are any transactions to test
> 3. For each transaction displayed in the personal feed:
>    - Verifies that it involves the current user (either as sender or receiver)
>    - Uses the data-test attributes to identify the user IDs in each transaction
> 4. As an additional check, verifies that the count of displayed transactions matches the count of the user's transactions in the database
> 
> The code handles the empty state case and uses proper assertions to validate that only personal transactions are shown in the "mine" feed.
