---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("creates a new bank account", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the provided Cypress test structure for bank accounts, I need to implement code for the "creates a new bank account" test block using the provided bank account information. Here's my implementation:
> 
> ## Bank Account Test Implementation
> 
> For the "creates a new bank account" test, I'll implement steps to navigate to the bank accounts section, create a new bank account with the provided details, and verify that it was created successfully.
> 
> ```typescript
> it("creates a new bank account", () => {
>     // Navigate to bank accounts page
>     cy.getBySel("sidenav-bankaccounts").click();
>     
>     // Click on the new bank account button
>     cy.getBySel("bankaccount-new").click();
>     
>     // Fill in the bank account form with provided test data
>     cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>     cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>     cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>     
>     // Submit the form
>     cy.getBySel("bankaccount-submit").click();
>     
>     // Wait for the GraphQL mutation to complete
>     cy.wait("@gqlCreateBankAccountMutation");
>     
>     // Verify the newly created bank account is visible in the list
>     cy.getBySel("bankaccount-list").should("be.visible");
>     cy.contains(bankAccountInfo.bankName).should("be.visible");
>     
>     // Verify account details are displayed correctly
>     cy.contains(bankAccountInfo.accountNumber).should("be.visible");
> });
> ```
> 
> This implementation:
> 1. Navigates to the bank accounts section
> 2. Opens the form to create a new bank account
> 3. Fills in the required details using the provided bank account information
> 4. Submits the form
> 5. Waits for the GraphQL mutation to complete
> 6. Verifies that the bank account was created successfully by checking that it appears in the list with the correct details
> 
> The test uses Cypress's custom `getBySel` command to select elements by their data-test attribute, which is a best practice for test stability.
