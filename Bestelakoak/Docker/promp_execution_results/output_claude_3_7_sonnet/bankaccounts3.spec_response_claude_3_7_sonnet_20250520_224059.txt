---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("soft deletes a bank account", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: # Bank Account Soft Deletion Test Code
> 
> Looking at your request, you want me to generate Cypress test code for the "soft deletes a bank account" test block in the Bank Accounts test suite. I'll implement this test based on the provided structure and bank account information.
> 
> The test needs to:
> 1. Navigate to the bank accounts page
> 2. Find an existing bank account
> 3. Delete that bank account
> 4. Verify the deletion was successful
> 
> Here's the implementation for the test:
> 
> ```typescript
> // it("soft deletes a bank account", () => { });
> it("soft deletes a bank account", () => {
>   // Navigate to bank accounts page
>   cy.getBySel("sidenav-bankaccounts").click();
>   cy.wait("@gqlListBankAccountQuery");
> 
>   // First create a new bank account to ensure we have one to delete
>   cy.getBySel("bankaccount-new").click();
>   cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>   cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>   cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>   cy.getBySel("bankaccount-submit").click();
>   cy.wait("@gqlCreateBankAccountMutation");
>   
>   // Verify the bank account exists in the list
>   cy.getBySel("bankaccount-list").should("be.visible");
>   cy.contains(bankAccountInfo.bankName).should("be.visible");
>   
>   // Delete the bank account
>   cy.contains(bankAccountInfo.bankName)
>     .parent()
>     .find("[data-test=bankaccount-delete]")
>     .click();
>   
>   // Confirm deletion in the dialog
>   cy.getBySel("bankaccount-delete-confirmation").click();
>   
>   // Wait for deletion request to complete
>   cy.wait("@gqlDeleteBankAccountMutation");
>   
>   // Verify the bank account is no longer displayed
>   cy.contains(bankAccountInfo.bankName).should("not.exist");
> });
> ```
> 
> This test:
> 1. Creates a bank account first to ensure there's something to delete
> 2. Verifies the account was created successfully
> 3. Finds the account in the list and clicks its delete button
> 4. Confirms the deletion in the confirmation dialog
> 5. Verifies that the account is no longer visible in the list
> 
> The test uses the bank account information provided in your request (bank name, routing number, and account number).
