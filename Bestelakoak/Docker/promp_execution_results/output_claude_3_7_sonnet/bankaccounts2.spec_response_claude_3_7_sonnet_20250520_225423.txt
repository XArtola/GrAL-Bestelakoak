---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
const apiGraphQL = `${Cypress.env("apiUrl")}/graphql`;
type BankAccountsTestCtx = {
    user?: User;
};
describe("Bank Accounts", function () {
    const ctx: BankAccountsTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications").as("getNotifications");
        cy.intercept("POST", apiGraphQL, (req) => {
            const operationAliases: Record<string, string> = {
                ListBankAccount: "gqlListBankAccountQuery",
                CreateBankAccount: "gqlCreateBankAccountMutation",
                DeleteBankAccount: "gqlDeleteBankAccountMutation",
            };
            const { body } = req;
            const operationName = body?.operationName;
            if (body.hasOwnProperty("operationName") &&
                operationName &&
                operationAliases[operationName]) {
                req.alias = operationAliases[operationName];
            }
        });
        cy.database("find", "users").then((user: User) => {
            ctx.user = user;
            return cy.loginByXstate(ctx.user.username);
        });
    });
    it("should display bank account form errors", () => { });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "bankAccountInfo": {
    "bankName": "The Best Bank",
    "routingNumber": "987654321",
    "accountNumber": "123456789"
  }
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: I'll generate code for the "should display bank account form errors" test block in the Bank Accounts test suite.
> 
> Looking at the test structure, this is part of a Bank Accounts test suite where we need to test form validation errors when creating a bank account. The test name suggests we need to check that appropriate error messages appear when the form is submitted with invalid or missing data.
> 
> Here's the code I'll write for the test block:
> 
> ```typescript
> // should display bank account form errors
> it("should display bank account form errors", () => {
>   // Navigate to bank accounts page
>   cy.getBySel("sidenav-bankaccounts").click();
>   
>   // Click the Create button to open the form
>   cy.getBySel("bankaccount-new").click();
>   
>   // Try to submit empty form
>   cy.getBySel("bankaccount-submit").click();
>   
>   // Verify that error messages appear for each required field
>   cy.get("#bankaccount-bankName-input-helper-text")
>     .should("be.visible")
>     .and("have.text", "Enter a bank name");
>   
>   cy.get("#bankaccount-routingNumber-input-helper-text")
>     .should("be.visible")
>     .and("have.text", "Enter a valid bank routing number");
>   
>   cy.get("#bankaccount-accountNumber-input-helper-text")
>     .should("be.visible")
>     .and("have.text", "Enter a valid bank account number");
>   
>   // Fill in form with invalid data and check for specific validation errors
>   
>   // Test invalid routing number (too short)
>   cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>   cy.getBySel("bankaccount-routingNumber-input").type("12345");
>   cy.getBySel("bankaccount-accountNumber-input").type(bankAccountInfo.accountNumber);
>   cy.getBySel("bankaccount-submit").click();
>   
>   cy.get("#bankaccount-routingNumber-input-helper-text")
>     .should("be.visible")
>     .and("have.text", "Must contain a valid routing number");
>   
>   // Clear the form
>   cy.getBySel("bankaccount-bankName-input").clear();
>   cy.getBySel("bankaccount-routingNumber-input").clear();
>   cy.getBySel("bankaccount-accountNumber-input").clear();
>   
>   // Test invalid account number (too short)
>   cy.getBySel("bankaccount-bankName-input").type(bankAccountInfo.bankName);
>   cy.getBySel("bankaccount-routingNumber-input").type(bankAccountInfo.routingNumber);
>   cy.getBySel("bankaccount-accountNumber-input").type("12345");
>   cy.getBySel("bankaccount-submit").click();
>   
>   cy.get("#bankaccount-accountNumber-input-helper-text")
>     .should("be.visible")
>     .and("have.text", "Must contain a valid account number");
> });
> ```
> 
> This test will:
> 1. Navigate to the bank accounts page
> 2. Open the new bank account form
> 3. Test submission with empty values and verify error messages
> 4. Test partial form completion with invalid routing number (too short)
> 5. Test partial form completion with invalid account number (too short)
> 
> The test verifies that proper validation error messages appear in each case.
