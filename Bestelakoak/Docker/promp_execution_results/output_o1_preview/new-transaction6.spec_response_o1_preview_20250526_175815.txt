---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import Dinero from "dinero.js";
import { User } from "../../../src/models";
import { isMobile } from "../../support/utils";
type NewTransactionTestCtx = {
    allUsers?: User[];
    user?: User;
    contact?: User;
};
describe("New Transaction", function () {
    const ctx: NewTransactionTestCtx = {};
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/users*").as("allUsers");
        cy.intercept("GET", "/users/search*").as("usersSearch");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("GET", "/notifications").as("notifications");
        cy.intercept("GET", "/transactions/public").as("publicTransactions");
        cy.intercept("GET", "/transactions").as("personalTransactions");
        cy.intercept("PATCH", "/transactions/*").as("updateTransaction");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.allUsers = users;
            ctx.user = users[0];
            ctx.contact = users[1];
            return cy.loginByXstate(ctx.user.username);
        });
    });
    context("searches for a user by attribute", function () {
        const searchAttrs: (keyof User)[] = [
            "firstName",
            "lastName",
            "username",
            "email",
            "phoneNumber",
        ];
        beforeEach(function () {
            cy.getBySelLike("new-transaction").click();
            cy.wait("@allUsers");
        });
        searchAttrs.forEach((attr: keyof User) => {
            it(attr, () => { });
        });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{
  "paymentTransactions": [
    {
      "amount": "35",
      "description": "Sushi dinner üç£"
    },
    {
      "amount": 25,
      "description": "Indian Food"
    }
  ],
  "requestTransactions": [
    {
      "amount": "95",
      "description": "Fancy Hotel üè®"
    },
    {
      "amount": 100,
      "description": "Fancy Hotel"
    }
  ]
}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: <generated_code>
>     // it("firstName", () => {})
>     it("firstName", () => {
>       // 1. Clear and type the contact's firstName into the search input
>       cy.getBySelLike("user-list-search-input").clear().type(ctx.contact!.firstName);
> 
>       // 2. Wait for the search request to finish
>       cy.wait("@usersSearch");
> 
>       // 3. Assert that the search results contain the contact's firstName
>       cy.getBySel("user-list-item").should("contain", ctx.contact!.firstName);
>     });
> 
>     // it("lastName", () => {})
>     it("lastName", () => {
>       // 1. Clear and type the contact's lastName into the search input
>       cy.getBySelLike("user-list-search-input").clear().type(ctx.contact!.lastName);
> 
>       // 2. Wait for the search request to finish
>       cy.wait("@usersSearch");
> 
>       // 3. Assert that the search results contain the contact's lastName
>       cy.getBySel("user-list-item").should("contain", ctx.contact!.lastName);
>     });
> 
>     // it("username", () => {})
>     it("username", () => {
>       // 1. Clear and type the contact's username into the search input
>       cy.getBySelLike("user-list-search-input").clear().type(ctx.contact!.username);
> 
>       // 2. Wait for the search request to finish
>       cy.wait("@usersSearch");
> 
>       // 3. Assert that the search results contain the contact's username
>       cy.getBySel("user-list-item").should("contain", ctx.contact!.username);
>     });
> 
>     // it("email", () => {})
>     it("email", () => {
>       // 1. Clear and type the contact's email into the search input
>       //    If the contact has no email, note: more info needed to test email search
>       cy.getBySelLike("user-list-search-input").clear().type(ctx.contact!.email || "test@example.com");
> 
>       // 2. Wait for the search request to finish
>       cy.wait("@usersSearch");
> 
>       // 3. Assert that the search results contain the contact's email, if set
>       cy.getBySel("user-list-item").should("contain", ctx.contact!.email || "test@example.com");
>     });
> 
>     // it("phoneNumber", () => {})
>     it("phoneNumber", () => {
>       // 1. Clear and type the contact's phoneNumber into the search input
>       //    If the contact has no phoneNumber, note: more info needed to test phone number search
>       cy.getBySelLike("user-list-search-input").clear().type(ctx.contact!.phoneNumber || "5551234567");
> 
>       // 2. Wait for the search request to finish
>       cy.wait("@usersSearch");
> 
>       // 3. Assert that the search results contain the contact's phoneNumber, if set
>       cy.getBySel("user-list-item").should("contain", ctx.contact!.phoneNumber || "5551234567");
>     });
> </generated_code>
