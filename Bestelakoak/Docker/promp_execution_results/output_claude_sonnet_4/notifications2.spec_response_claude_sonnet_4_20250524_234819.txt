---
tools: ['codebase']
---

#file:cypress-realworld-app 
You are tasked with generating the code inside the 'it' blocks for a Cypress test suite. The test suite is for user sign-up and login functionality. You will be provided with the test suite structure and user information to use in your generated code.

Here is the Cypress test code structure:

<cypress_test_code>
import { isMobile } from "../../support/utils";
import { User, Transaction } from "../../../src/models";
type NotificationsCtx = {
    userA: User;
    userB: User;
    userC: User;
};
describe("Notifications", function () {
    const ctx = {} as NotificationsCtx;
    beforeEach(function () {
        cy.task("db:seed");
        cy.intercept("GET", "/notifications*").as("getNotifications");
        cy.intercept("POST", "/transactions").as("createTransaction");
        cy.intercept("PATCH", "/notifications/*").as("updateNotification");
        cy.intercept("POST", "/comments/*").as("postComment");
        cy.database("filter", "users").then((users: User[]) => {
            ctx.userA = users[0];
            ctx.userB = users[1];
            ctx.userC = users[2];
        });
    });
    describe("notifications from user interactions", function () {
        it("User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction", () => { });
    });
});

</cypress_test_code>

And here is the user information to use in your tests:

<user_info>
{}
</user_info>

Your task is to generate the code inside each 'it' block so that the Cypress test runs and gets positive results. Follow these guidelines:

1. For each 'it' block, write Cypress commands that test the functionality described in the test name.
2. Use the provided user information (firstName, lastName, username, password) in your test commands where appropriate.
3. Ensure that your generated code follows Cypress best practices and conventions.
4. Include appropriate assertions to verify the expected behavior of each test.
5. If a test requires multiple steps, use comments to explain each step.
6. Do not modify the existing code structure or add new 'it' blocks.

When using the user information, refer to it as 'userInfo' followed by the property name, e.g., 'userInfo.firstName'.

If you encounter any scenarios where you need additional information that isn't provided, do not make assumptions. Instead, indicate that more information is needed for that specific test.

For error handling tests, use invalid data that is clearly different from the provided user information.

Place your generated code for each 'it' block within <generated_code> tags, and include the original 'it' block description as a comment before each block of generated code.

Begin generating the code for each 'it' block now.


> Copilot: Looking at the test structure and the attachments, I can see this is a notifications test for a Cypress Real World App. The test checks that when User C likes a transaction between User A and User B, both User A and User B receive notifications about the like.
> 
> Based on the patterns I see in the existing test files, here's the generated code:
> 
> <generated_code>
> // User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction
> it("User C likes a transaction between User A and User B; User A and User B get notifications that User C liked transaction", () => {
>     // First, create a transaction between User A and User B
>     cy.loginByXstate(ctx.userA.username);
>     
>     // Navigate to new transaction page
>     cy.getBySel("nav-top-new-transaction").click();
>     
>     // Select User B as recipient
>     cy.getBySel("user-list-search-input").type(ctx.userB.firstName);
>     cy.getBySel("user-list-item").contains(ctx.userB.firstName).click();
>     
>     // Enter transaction details
>     cy.getBySel("amount-input").type("50");
>     cy.getBySel("transaction-create-description-input").type("Test transaction for like notification");
>     
>     // Submit payment
>     cy.getBySel("transaction-create-submit-payment").click();
>     cy.wait("@createTransaction");
>     
>     // Get transaction ID from URL
>     cy.url().then((url) => {
>         const transactionId = url.split("/").pop();
>         
>         // Logout User A
>         cy.getBySel("sidenav-signout").click();
>         
>         // Login as User C
>         cy.loginByXstate(ctx.userC.username);
>         
>         // Visit the transaction page
>         cy.visit(`/transaction/${transactionId}`);
>         
>         // Like the transaction
>         cy.getBySel("like-button").click();
>         cy.wait("@postLike");
>         
>         // Logout User C
>         cy.getBySel("sidenav-signout").click();
>         
>         // Login as User A and check notifications
>         cy.loginByXstate(ctx.userA.username);
>         cy.visit("/");
>         cy.wait("@getNotifications");
>         
>         // Check notification count and content for User A
>         cy.getBySel("nav-top-notifications-count").should("contain", "1");
>         cy.getBySel("nav-top-notifications-link").click();
>         cy.getBySelLike("notification-list-item")
>             .first()
>             .should("contain", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);
>         
>         // Logout User A
>         cy.getBySel("sidenav-signout").click();
>         
>         // Login as User B and check notifications
>         cy.loginByXstate(ctx.userB.username);
>         cy.visit("/");
>         cy.wait("@getNotifications");
>         
>         // Check notification count and content for User B
>         cy.getBySel("nav-top-notifications-count").should("contain", "1");
>         cy.getBySel("nav-top-notifications-link").click();
>         cy.getBySelLike("notification-list-item")
>             .first()
>             .should("contain", `${ctx.userC.firstName} ${ctx.userC.lastName} liked your transaction`);
>     });
> });
> </generated_code>
